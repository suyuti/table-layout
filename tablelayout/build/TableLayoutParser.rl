// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

import com.esotericsoftware.tablelayout.BaseTableLayout.Cell;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, String input) {
		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		String widgetLayoutString = null;
		String className = null;
		Object label = null;

		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell cell = null, rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		RuntimeException parseRuntimeEx = null;
		boolean hasColon = false;

		boolean debug = false;
		if (debug) System.out.println();

		try {
		%%{
			machine tableLayout;

			prepush {
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			}

			action buffer { s = p; }
			action name {
				name = new String(data, s, p - s);
				s = p;
				hasColon = false;
			}
			action value {
				values.add(new String(data, s, p - s));
			}
			action tableProperty {
				if (debug) System.out.println("tableProperty: " + name + " = " + values);
				((BaseTableLayout)parent).setTableProperty(name, values);
				values.clear();
			}
			action cellDefaultProperty {
				if (debug) System.out.println("cellDefaultProperty: " + name + " = " + values);
				table.setCellProperty(((BaseTableLayout)parent).getCellDefaults(), name, values);
				values.clear();
			}
			action startColumn {
				int column = ((BaseTableLayout)parent).getColumnDefaults().size();
				columnDefaults = ((BaseTableLayout)parent).getColumnDefaults(column);
			}
			action columnDefaultProperty {
				if (debug) System.out.println("columnDefaultProperty: " + name + " = " + values);
				table.setCellProperty(columnDefaults, name, values);
				values.clear();
			}
			action startRow {
				if (debug) System.out.println("startRow");
				rowDefaults = ((BaseTableLayout)parent).startRow();
			}
			action rowDefaultValue {
				if (debug) System.out.println("rowDefaultValue: " + name + " = " + values);
				table.setCellProperty(rowDefaults, name, values);
				values.clear();
			}
			action cellProperty {
				if (debug) System.out.println("cellProperty: " + name + " = " + values);
				table.setCellProperty(cell, name, values);
				values.clear();
			}
			action setTitle {
				if (debug) System.out.println("setTitle: " + new String(data, s, p - s));
				if (widget instanceof BaseTableLayout)
					((BaseTableLayout)widget).title = new String(data, s, p - s);
				else
					table.setTitle(widget, new String(data, s, p - s));
			}
			action widgetLayoutString {
				if (debug) System.out.println("widgetLayoutString: " + new String(data, s, p - s).trim());
				widgetLayoutString = new String(data, s, p - s).trim();
			}
			action newWidgetClassName {
				className = new String(data, s, p - s);
			}
			action newWidgetLabel {
				label = table.newLabel(new String(data, s, p - s));
			}
			action newWidget {
				if (debug) System.out.println("newWidget: " + name + " " + className + " " + label);
				widget = null;
				if (label != null) { // 'label' or ['label'] or [name:'label']
					widget = label;
					label = null;
					if (name.length() > 0) table.setName(name, widget);
				} else if (className == null) {
					if (name.length() > 0) { // [name]
						widget = table.getWidget(name);
						if (widget == null) {
							// Try the widget name as a class name.
							try {
								widget = table.wrap(table.newWidget(name));
							} catch (Exception ex) {
								if (hasColon) { // [name:]
									widget = table.wrap(null);
									table.setName(name, widget);
								} else
									throw new IllegalArgumentException("Widget not found with name: " + name);
							}
						}
					} // else leave widget null for: []
				} else { // [:class] and [name:class]
					try {
						widget = table.wrap(table.newWidget(className));
					} catch (Exception ex) {
						throw new RuntimeException("Error creating instance of class: " + className, ex);
					}
					className = null;
					if (name.length() > 0) table.setName(name, widget);
				}
			}
			action newLabel {
				if (debug) System.out.println("newLabel: " + new String(data, s, p - s));
				widget = table.newLabel(new String(data, s, p - s));
			}
			action startTable {
				if (debug) System.out.println("startTable");
				parents.add(parent);
				parent = table.newTableLayout();
				cell = null;
				widget = null;
				fcall table;
			}
			action endTable {
				widget = parent;
				if (!parents.isEmpty()) {
					if (debug) System.out.println("endTable");
					parent = parents.remove(parents.size() - 1);
					fret;
				}
			}
			action startWidgetSection {
				if (debug) System.out.println("startWidgetSection");
				parents.add(parent);
				parent = widget;
				widget = null;
				fcall widgetSection;
			}
			action endWidgetSection {
				if (debug) System.out.println("endWidgetSection");
				widget = parent;
				parent = parents.remove(parents.size() - 1);
				fret;
			}
			action addCell {
				if (debug) System.out.println("addCell");
				cell = ((BaseTableLayout)parent).add(table.wrap(widget));
			}
			action addWidget {
				if (debug) System.out.println("addWidget");
				table.addChild(parent, table.wrap(widget), widgetLayoutString);
				widgetLayoutString = null;
			}
			action widgetProperty {
				if (debug) System.out.println("widgetProperty: " + name + " = " + values);
				try {
					table.setProperty(parent, name, values);
				} catch (RuntimeException ex) {
					throw new RuntimeException("Error setting property: " + name + "\nClass: " + parent.getClass()
						+ "\nValues: " + values, ex);
				}
				values.clear();
			}

			title = '<' ^'>'* >buffer %setTitle '>';
			propertyValue =
				('-'? (alnum | '.' | '_')+ '%'?) >buffer %value |
				('\'' ^'\''* >buffer %value '\'');
			property = alnum+ >buffer %name (space* ':' space* propertyValue (',' propertyValue)* )?;

			widget =
				# Widget name.
				'[' space* ^[\]:]* >buffer %name <:
				space* ':'? %{ hasColon = true; } space*
				(
					# Class name.
					(^[\]':]+ >buffer %newWidgetClassName) |
					# Label.
					('\'' ^'\''* >buffer %newWidgetLabel '\'')
				)?
				space* ']' @newWidget;
			label = '\'' ^'\''* >buffer %newLabel '\'';
			startTable = '{' @startTable;

			startWidgetSection = '(' @startWidgetSection;
			widgetSection := space*
				# Widget properties.
				(property %widgetProperty (space+ property %widgetProperty)* space*)?
				(
					(
						# Widget contents.
						(widget | label | startTable) space*
						# Contents title.
						(title space*)? <:
						# Contents layout string.
						(space* <: (alnum | ' ')+ >buffer %widgetLayoutString )?
					) %addWidget <:
					# Contents properties.
					startWidgetSection? space*
				)* <:
				space* ')' @endWidgetSection;

			table = space*
				# Table title.
				(title space*)? <:
				# Table properties.
				(property %tableProperty (space+ property %tableProperty)* space*)?
				# Default cell properties.
				('*' space* property %cellDefaultProperty (space+ property %cellDefaultProperty)* space*)?
				# Default column properties.
				('|' %startColumn space* (property %columnDefaultProperty (space+ property %columnDefaultProperty)* space*)? '|'? space*)*
				(
					# Start row and default row properties.
					('---' %startRow space* (property %rowDefaultValue (space+ property %rowDefaultValue)* )? )?
					(
						# Cell contents.
						space* (widget | label | startTable) %addCell space*
						# Contents title.
						(title space*)?
						# Cell properties.
						(property %cellProperty (space+ property %cellProperty)* space*)?
						# Contents properties.
						startWidgetSection? space*
					)+
				)+
				space* '}' @endTable;
			
			main := 
				space* '{'? <: table (space* title)? <: space*
			;

			write init;
			write exec;
		}%%
		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			for (int i = 0; i < p; i++)
				if (data[i] == '\n') lineNumber++;
			throw new IllegalArgumentException("Error parsing layout on line " + lineNumber + " near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0) 
			throw new IllegalArgumentException("Error parsing layout (possibly an unmatched brace or quote): " + input, parseRuntimeEx);
	}

	%% write data;
}
