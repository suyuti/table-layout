// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, String input) {
		Toolkit toolkit = table.toolkit;

		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		String widgetLayoutString = null;
		String className = null;

		int columnDefaultCount = 0;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell cell = null, rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		RuntimeException parseRuntimeEx = null;
		boolean hasColon = false;

		boolean debug = false;
		if (debug) System.out.println();

		try {

			// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

			// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
								// line 43 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
								// line 44 "TableLayoutParser.rl"
								{
									name = new String(data, s, p - s);
									s = p;
								}
									break;
								case 2:
								// line 48 "TableLayoutParser.rl"
								{
									values.add(new String(data, s, p - s));
								}
									break;
								case 3:
								// line 51 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("tableProperty: " + name + " = " + values);
									toolkit.setTableProperty((BaseTableLayout)parent, name, values);
									values.clear();
									name = null;
								}
									break;
								case 4:
								// line 57 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellDefaultProperty: " + name + " = " + values);
									toolkit.setCellProperty(((BaseTableLayout)parent).defaults(), name, values);
									values.clear();
									name = null;
								}
									break;
								case 5:
								// line 63 "TableLayoutParser.rl"
								{
									columnDefaults = ((BaseTableLayout)parent).columnDefaults(columnDefaultCount++);
								}
									break;
								case 6:
								// line 66 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("columnDefaultProperty: " + name + " = " + values);
									toolkit.setCellProperty(columnDefaults, name, values);
									values.clear();
									name = null;
								}
									break;
								case 7:
								// line 72 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startRow");
									rowDefaults = ((BaseTableLayout)parent).row();
								}
									break;
								case 8:
								// line 76 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("rowDefaultValue: " + name + " = " + values);
									toolkit.setCellProperty(rowDefaults, name, values);
									values.clear();
									name = null;
								}
									break;
								case 9:
								// line 82 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellProperty: " + name + " = " + values);
									toolkit.setCellProperty(cell, name, values);
									values.clear();
									name = null;
								}
									break;
								case 10:
								// line 88 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetLayoutString: " + new String(data, s, p - s).trim());
									widgetLayoutString = new String(data, s, p - s).trim();
								}
									break;
								case 11:
								// line 92 "TableLayoutParser.rl"
								{
									className = new String(data, s, p - s);
								}
									break;
								case 12:
								// line 95 "TableLayoutParser.rl"
								{
									if (debug)
										System.out.println("newWidget, name:" + name + " class:" + className + " widget:" + widget);
									if (widget != null) { // 'label' or ['label'] or [name:'label']
										if (name != null && name.length() > 0) table.register(name, widget);
									} else if (className == null) {
										if (name.length() > 0) {
											if (hasColon) { // [name:]
												widget = toolkit.wrap(table, null);
												table.register(name, widget);
											} else { // [name]
												widget = table.getWidget(name);
												if (widget == null) {
													// Try the widget name as a class name.
													try {
														widget = toolkit.newWidget(table, name);
													} catch (RuntimeException ex) {
														throw new IllegalArgumentException("Widget not found with name: " + name);
													}
												}
											}
										} else
											// []
											widget = toolkit.wrap(table, null);
									} else { // [:class] and [name:class]
										widget = toolkit.newWidget(table, className);
										if (name.length() > 0) table.register(name, widget);
									}
									name = null;
									className = null;
								}
									break;
								case 13:
								// line 124 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newLabel: " + new String(data, s, p - s));
									widget = toolkit.wrap(table, new String(data, s, p - s));
								}
									break;
								case 14:
								// line 128 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startTable, name:" + name);
									parents.add(parent);
									BaseTableLayout parentTable = null;
									for (int i = parents.size() - 1; i >= 0; i--) {
										Object object = parents.get(i);
										if (object instanceof BaseTableLayout) {
											parentTable = (BaseTableLayout)object;
											break;
										}
									}
									if (parentTable == null) parentTable = table;
									parent = toolkit.getLayout(toolkit.newTable(parentTable.getTable()));
									((BaseTableLayout)parent).setParent(parentTable);
									if (name != null) { // [name:{}]
										table.register(name, ((BaseTableLayout)parent).getTable());
										name = null;
									}
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 70;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 15:
								// line 150 "TableLayoutParser.rl"
								{
									widget = parent;
									if (!parents.isEmpty()) {
										if (debug) System.out.println("endTable");
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 16:
								// line 158 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startStack, name:" + name);
									parents.add(parent);
									parent = toolkit.newStack();
									if (name != null) { // [name:<>]
										table.register(name, parent);
										name = null;
									}
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 101;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 17:
								// line 170 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endStack");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 18:
								// line 176 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startWidgetSection");
									parents.add(parent);
									parent = widget;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 79;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 19:
								// line 183 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endWidgetSection");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 20:
								// line 189 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addCell");
									cell = ((BaseTableLayout)parent).add(toolkit.wrap(table, widget));
								}
									break;
								case 21:
								// line 193 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addWidget");
									toolkit.addChild(parent, toolkit.wrap(table, widget), widgetLayoutString);
									widgetLayoutString = null;
								}
									break;
								case 22:
								// line 198 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetProperty: " + name + " = " + values);
									Object propertyTarget = parent;
									if (parent instanceof BaseTableLayout) propertyTarget = ((BaseTableLayout)parent).getTable();
									toolkit.setProperty(table, propertyTarget, name, values);
									values.clear();
									name = null;
								}
									break;
								case 23:
								// line 218 "TableLayoutParser.rl"
								{
									widget = null;
									hasColon = false;
								}
									break;
								case 24:
								// line 219 "TableLayoutParser.rl"
								{
									hasColon = true;
								}
									break;
								// line 346 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
					case 5:
					}
					break;
				}
			}

			// line 278 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			int lineStartOffset = 0;
			for (int i = 0; i < p; i++) {
				if (data[i] == '\n') {
					lineNumber++;
					lineStartOffset = i;
				}
			}
			ParseException ex = new ParseException("Error parsing layout on line " + lineNumber + ":" + (p - lineStartOffset)
				+ " near: " + new String(data, p, Math.min(64, pe - p)), parseRuntimeEx);
			ex.line = lineNumber;
			ex.column = p - lineStartOffset;
			throw ex;
		} else if (top > 0)
			throw new ParseException("Error parsing layout (possibly an unmatched brace or quote): "
				+ new String(data, 0, Math.min(64, pe)), parseRuntimeEx);
	}

	// line 366 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16,
			1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 2, 0, 2, 2, 0, 11, 2, 0, 13, 2, 1, 3, 2, 1, 4, 2, 1, 6, 2, 1, 8, 2, 1,
			9, 2, 1, 12, 2, 1, 22, 2, 1, 24, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 9, 2, 2, 22, 2, 3, 14, 2, 3, 15, 2, 3, 16, 2,
			3, 23, 2, 4, 14, 2, 4, 15, 2, 4, 16, 2, 4, 23, 2, 5, 0, 2, 5, 14, 2, 5, 15, 2, 5, 16, 2, 5, 23, 2, 6, 14, 2, 6, 15, 2,
			6, 16, 2, 6, 23, 2, 7, 0, 2, 7, 14, 2, 7, 16, 2, 7, 23, 2, 8, 14, 2, 8, 16, 2, 8, 23, 2, 9, 14, 2, 9, 15, 2, 9, 16, 2,
			9, 18, 2, 9, 23, 2, 10, 21, 2, 11, 12, 2, 16, 0, 2, 20, 0, 2, 20, 14, 2, 20, 15, 2, 20, 16, 2, 20, 18, 2, 20, 23, 2, 21,
			14, 2, 21, 16, 2, 21, 17, 2, 21, 18, 2, 21, 19, 2, 21, 23, 2, 22, 14, 2, 22, 16, 2, 22, 19, 2, 22, 23, 3, 0, 1, 12, 3,
			0, 1, 24, 3, 1, 3, 14, 3, 1, 3, 15, 3, 1, 3, 16, 3, 1, 3, 23, 3, 1, 4, 14, 3, 1, 4, 15, 3, 1, 4, 16, 3, 1, 4, 23, 3, 1,
			6, 14, 3, 1, 6, 15, 3, 1, 6, 16, 3, 1, 6, 23, 3, 1, 8, 14, 3, 1, 8, 16, 3, 1, 8, 23, 3, 1, 9, 14, 3, 1, 9, 15, 3, 1, 9,
			16, 3, 1, 9, 18, 3, 1, 9, 23, 3, 1, 22, 14, 3, 1, 22, 16, 3, 1, 22, 19, 3, 1, 22, 23, 3, 2, 3, 7, 3, 2, 3, 14, 3, 2, 3,
			15, 3, 2, 3, 16, 3, 2, 3, 23, 3, 2, 4, 7, 3, 2, 4, 14, 3, 2, 4, 15, 3, 2, 4, 16, 3, 2, 4, 23, 3, 2, 6, 7, 3, 2, 6, 14,
			3, 2, 6, 15, 3, 2, 6, 16, 3, 2, 6, 23, 3, 2, 8, 14, 3, 2, 8, 16, 3, 2, 8, 23, 3, 2, 9, 14, 3, 2, 9, 15, 3, 2, 9, 16, 3,
			2, 9, 18, 3, 2, 9, 23, 3, 2, 22, 14, 3, 2, 22, 16, 3, 2, 22, 19, 3, 2, 22, 23, 3, 7, 2, 9, 3, 10, 21, 14, 3, 10, 21, 16,
			3, 10, 21, 18, 3, 10, 21, 19, 3, 10, 21, 23, 4, 1, 8, 2, 9, 4, 2, 3, 1, 8, 4, 2, 3, 7, 14, 4, 2, 3, 7, 16, 4, 2, 3, 7,
			23, 4, 2, 4, 1, 8, 4, 2, 4, 7, 14, 4, 2, 4, 7, 16, 4, 2, 4, 7, 23, 4, 2, 6, 1, 8, 4, 2, 6, 7, 14, 4, 2, 6, 7, 16, 4, 2,
			6, 7, 23, 4, 7, 14, 2, 9, 4, 7, 16, 2, 9, 4, 7, 23, 2, 9, 5, 1, 8, 14, 2, 9, 5, 1, 8, 16, 2, 9, 5, 1, 8, 23, 2, 9, 5, 2,
			3, 1, 8, 14, 5, 2, 3, 1, 8, 16, 5, 2, 3, 1, 8, 23, 5, 2, 4, 1, 8, 14, 5, 2, 4, 1, 8, 16, 5, 2, 4, 1, 8, 23, 5, 2, 6, 1,
			8, 14, 5, 2, 6, 1, 8, 16, 5, 2, 6, 1, 8, 23};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 17, 18, 19, 35, 51, 60, 61, 62, 75, 82, 87, 89, 97, 104, 112, 113, 114, 118, 132, 146, 164, 175,
			176, 177, 185, 202, 219, 233, 253, 264, 265, 266, 277, 297, 317, 337, 358, 367, 384, 401, 415, 435, 451, 467, 483, 500,
			517, 531, 551, 562, 563, 564, 575, 595, 615, 635, 656, 667, 668, 669, 680, 700, 720, 740, 761, 779, 797, 811, 832, 849,
			860, 861, 862, 874, 895, 916, 937, 959, 973, 974, 975, 990, 998, 1003, 1005, 1013, 1020, 1028, 1029, 1030, 1034, 1049,
			1064, 1079, 1093, 1112, 1123, 1124, 1125, 1134, 1142, 1143, 1144, 1153, 1162, 1167, 1169, 1177, 1184, 1192, 1193, 1194,
			1198, 1202, 1205, 1205};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 45, 60, 91,
			123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45,
			60, 91, 123, 125, 9, 13, 45, 45, 32, 39, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 60, 91, 123, 9, 13, 32,
			58, 93, 9, 13, 58, 93, 32, 39, 58, 60, 93, 123, 9, 13, 32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123, 9, 13, 39,
			39, 32, 93, 9, 13, 32, 39, 58, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 95, 9, 13, 45, 46, 48, 57, 65,
			90, 97, 122, 32, 37, 39, 44, 60, 91, 95, 123, 9, 13, 45, 46, 48, 57, 65, 90, 97, 122, 37, 39, 95, 45, 46, 48, 57, 65,
			90, 97, 122, 39, 39, 32, 39, 44, 60, 91, 123, 9, 13, 32, 39, 40, 45, 58, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97,
			122, 32, 39, 40, 45, 58, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 95, 9, 13, 45, 46, 48, 57, 65,
			90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 60, 91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 37, 39, 95, 45, 46, 48,
			57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 44, 45, 60, 91, 123, 125, 9, 13, 32, 37, 39, 40, 44, 45, 46, 60, 91, 95, 123,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 60, 91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122,
			32, 37, 39, 40, 44, 45, 46, 60, 91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 58, 60,
			91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39,
			95, 9, 13, 45, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90,
			97, 122, 32, 39, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 60, 91, 123, 124, 125, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123,
			124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37,
			39, 95, 9, 13, 45, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65,
			90, 97, 122, 37, 39, 95, 45, 46, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 60, 91, 123, 124, 125, 9, 13, 32, 37,
			39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122,
			32, 37, 39, 44, 45, 46, 58, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 37, 39, 95, 45, 46, 48, 57, 65,
			90, 97, 122, 39, 39, 32, 39, 44, 45, 60, 91, 123, 124, 125, 9, 13, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37,
			39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 58, 60, 91, 95, 123,
			124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 42, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 95, 9, 13, 45, 46, 48, 57, 65, 90,
			97, 122, 32, 37, 39, 42, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 60, 91,
			123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 37, 39, 95, 45, 46, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 42, 44, 45,
			60, 91, 123, 124, 125, 9, 13, 32, 37, 39, 42, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			37, 39, 42, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 42, 44, 45, 46, 60, 91,
			95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 42, 44, 45, 46, 58, 60, 91, 95, 123, 124, 125, 9, 13, 48,
			57, 65, 90, 97, 122, 32, 39, 41, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 41, 60, 91, 123, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 60, 91, 123, 9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 58, 60, 93, 123, 9, 13,
			32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123, 9, 13, 39, 39, 32, 93, 9, 13, 32, 39, 40, 41, 60, 91, 123, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 60, 91, 123, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 37, 39, 95, 9, 13, 45, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 41, 44, 60, 91, 95,
			123, 9, 13, 45, 46, 48, 57, 65, 90, 97, 122, 37, 39, 95, 45, 46, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 41, 44, 60,
			91, 123, 9, 13, 32, 39, 60, 62, 91, 123, 9, 13, 39, 39, 32, 39, 40, 60, 62, 91, 123, 9, 13, 32, 39, 40, 60, 62, 91, 123,
			9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 58, 60, 93, 123, 9, 13, 32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123,
			9, 13, 39, 39, 32, 93, 9, 13, 32, 40, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 9, 1, 1, 8, 8, 7, 1, 1, 5, 5, 3, 2, 6, 5, 6, 1, 1, 2, 6, 4, 8, 3, 1, 1, 6, 9, 9, 4, 12, 3, 1, 1, 9,
			12, 12, 12, 13, 1, 9, 9, 4, 12, 8, 8, 8, 9, 9, 4, 12, 3, 1, 1, 9, 12, 12, 12, 13, 3, 1, 1, 9, 12, 12, 12, 13, 10, 10, 4,
			13, 9, 3, 1, 1, 10, 13, 13, 13, 14, 6, 1, 1, 7, 6, 3, 2, 6, 5, 6, 1, 1, 2, 7, 7, 7, 4, 9, 3, 1, 1, 7, 6, 1, 1, 7, 7, 3,
			2, 6, 5, 6, 1, 1, 2, 2, 1, 0, 0};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 0, 0, 4, 4, 1, 0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 5, 5, 4, 0, 0, 1, 4, 4, 5, 4, 4, 0, 0, 1, 4,
			4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 0, 0, 1,
			4, 4, 4, 4, 4, 0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 4, 4, 5, 5, 4, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1,
			1, 0, 0};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 14, 16, 18, 31, 44, 53, 55, 57, 67, 74, 79, 82, 90, 97, 105, 107, 109, 113, 124, 134, 148, 156,
			158, 160, 168, 182, 196, 206, 223, 231, 233, 235, 246, 263, 280, 297, 315, 321, 335, 349, 359, 376, 389, 402, 415, 429,
			443, 453, 470, 478, 480, 482, 493, 510, 527, 544, 562, 570, 572, 574, 585, 602, 619, 636, 654, 669, 684, 694, 712, 726,
			734, 736, 738, 750, 768, 786, 804, 823, 834, 836, 838, 850, 858, 863, 866, 874, 881, 889, 891, 893, 897, 909, 921, 933,
			943, 958, 966, 968, 970, 979, 987, 989, 991, 1000, 1009, 1014, 1017, 1025, 1032, 1040, 1042, 1044, 1048, 1052, 1055,
			1056};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {1, 2, 38, 7, 4, 11, 70, 44, 114, 1, 66, 66, 66, 0, 4, 3, 4, 3, 5, 2, 6, 7, 4, 11, 4, 114, 5, 26, 26, 26,
			0, 5, 2, 6, 7, 4, 11, 4, 114, 5, 26, 26, 26, 0, 6, 2, 7, 4, 11, 4, 114, 6, 0, 8, 0, 9, 0, 10, 2, 4, 11, 4, 10, 19, 19,
			19, 0, 10, 2, 4, 11, 4, 10, 0, 11, 13, 4, 11, 12, 13, 4, 12, 15, 16, 0, 14, 4, 18, 15, 14, 14, 0, 0, 4, 0, 14, 14, 15,
			16, 0, 14, 4, 18, 15, 14, 18, 17, 18, 17, 18, 4, 18, 0, 10, 2, 20, 4, 11, 4, 10, 19, 19, 19, 0, 20, 21, 23, 21, 20, 21,
			21, 21, 21, 0, 10, 21, 2, 22, 4, 11, 21, 4, 10, 21, 21, 21, 21, 0, 21, 23, 21, 21, 21, 21, 21, 0, 25, 24, 25, 24, 10, 2,
			22, 4, 11, 4, 10, 0, 27, 2, 6, 7, 28, 4, 11, 4, 114, 27, 26, 26, 26, 0, 27, 2, 6, 7, 28, 4, 11, 4, 114, 27, 26, 26, 26,
			0, 28, 29, 31, 29, 28, 29, 29, 29, 29, 0, 5, 29, 2, 6, 30, 34, 29, 4, 11, 29, 4, 114, 5, 29, 29, 29, 0, 29, 31, 29, 29,
			29, 29, 29, 0, 33, 32, 33, 32, 5, 2, 6, 30, 7, 4, 11, 4, 114, 5, 0, 5, 29, 2, 6, 30, 35, 29, 4, 11, 29, 4, 114, 5, 29,
			29, 29, 0, 5, 29, 2, 6, 30, 36, 29, 4, 11, 29, 4, 114, 5, 29, 29, 29, 0, 5, 29, 2, 6, 30, 36, 29, 4, 11, 29, 4, 114, 5,
			37, 37, 37, 0, 5, 29, 2, 6, 30, 34, 29, 20, 4, 11, 29, 4, 114, 5, 37, 37, 37, 0, 38, 38, 39, 39, 39, 0, 40, 2, 7, 41, 4,
			11, 4, 44, 114, 40, 39, 39, 39, 0, 40, 2, 7, 41, 4, 11, 4, 44, 114, 40, 39, 39, 39, 0, 41, 42, 59, 42, 41, 42, 42, 42,
			42, 0, 43, 42, 2, 58, 62, 42, 4, 11, 42, 4, 44, 114, 43, 42, 42, 42, 0, 43, 2, 7, 4, 11, 4, 44, 114, 43, 39, 39, 39, 0,
			45, 2, 7, 4, 11, 4, 44, 114, 45, 46, 46, 46, 0, 45, 2, 7, 4, 11, 4, 44, 114, 45, 46, 46, 46, 0, 47, 2, 7, 48, 4, 11, 4,
			44, 114, 47, 46, 46, 46, 0, 47, 2, 7, 48, 4, 11, 4, 44, 114, 47, 46, 46, 46, 0, 48, 49, 51, 49, 48, 49, 49, 49, 49, 0,
			45, 49, 2, 50, 54, 49, 4, 11, 49, 4, 44, 114, 45, 49, 49, 49, 0, 49, 51, 49, 49, 49, 49, 49, 0, 53, 52, 53, 52, 45, 2,
			50, 7, 4, 11, 4, 44, 114, 45, 0, 45, 49, 2, 50, 55, 49, 4, 11, 49, 4, 44, 114, 45, 49, 49, 49, 0, 45, 49, 2, 50, 56, 49,
			4, 11, 49, 4, 44, 114, 45, 49, 49, 49, 0, 45, 49, 2, 50, 56, 49, 4, 11, 49, 4, 44, 114, 45, 57, 57, 57, 0, 45, 49, 2,
			50, 54, 49, 20, 4, 11, 49, 4, 44, 114, 45, 57, 57, 57, 0, 42, 59, 42, 42, 42, 42, 42, 0, 61, 60, 61, 60, 43, 2, 58, 7,
			4, 11, 4, 44, 114, 43, 0, 43, 42, 2, 58, 63, 42, 4, 11, 42, 4, 44, 114, 43, 42, 42, 42, 0, 43, 42, 2, 58, 64, 42, 4, 11,
			42, 4, 44, 114, 43, 42, 42, 42, 0, 43, 42, 2, 58, 64, 42, 4, 11, 42, 4, 44, 114, 43, 65, 65, 65, 0, 43, 42, 2, 58, 62,
			42, 20, 4, 11, 42, 4, 44, 114, 43, 65, 65, 65, 0, 67, 2, 38, 7, 68, 4, 11, 4, 44, 114, 67, 66, 66, 66, 0, 67, 2, 38, 7,
			68, 4, 11, 4, 44, 114, 67, 66, 66, 66, 0, 68, 69, 72, 69, 68, 69, 69, 69, 69, 0, 70, 69, 2, 38, 71, 75, 69, 4, 11, 69,
			4, 44, 114, 70, 69, 69, 69, 0, 70, 2, 38, 7, 4, 11, 4, 44, 114, 70, 66, 66, 66, 0, 69, 72, 69, 69, 69, 69, 69, 0, 74,
			73, 74, 73, 70, 2, 38, 71, 7, 4, 11, 4, 44, 114, 70, 0, 70, 69, 2, 38, 71, 76, 69, 4, 11, 69, 4, 44, 114, 70, 69, 69,
			69, 0, 70, 69, 2, 38, 71, 77, 69, 4, 11, 69, 4, 44, 114, 70, 69, 69, 69, 0, 70, 69, 2, 38, 71, 77, 69, 4, 11, 69, 4, 44,
			114, 70, 78, 78, 78, 0, 70, 69, 2, 38, 71, 75, 69, 20, 4, 11, 69, 4, 44, 114, 70, 78, 78, 78, 0, 79, 80, 116, 82, 84,
			82, 79, 93, 93, 93, 0, 82, 81, 82, 81, 82, 80, 83, 116, 82, 84, 82, 82, 92, 92, 92, 0, 83, 80, 116, 82, 84, 82, 83, 0,
			84, 86, 82, 84, 85, 86, 82, 85, 88, 89, 0, 87, 82, 91, 88, 87, 87, 0, 0, 82, 0, 87, 87, 88, 89, 0, 87, 82, 91, 88, 87,
			91, 90, 91, 90, 91, 82, 91, 0, 92, 80, 83, 116, 82, 84, 82, 83, 92, 92, 92, 0, 94, 80, 116, 95, 82, 84, 82, 94, 93, 93,
			93, 0, 94, 80, 116, 95, 82, 84, 82, 94, 93, 93, 93, 0, 95, 96, 98, 96, 95, 96, 96, 96, 96, 0, 79, 96, 80, 116, 97, 82,
			84, 96, 82, 79, 96, 96, 96, 96, 0, 96, 98, 96, 96, 96, 96, 96, 0, 100, 99, 100, 99, 79, 80, 116, 97, 82, 84, 82, 79, 0,
			101, 102, 104, 117, 106, 104, 101, 0, 104, 103, 104, 103, 105, 102, 101, 104, 117, 106, 104, 105, 0, 105, 102, 101, 104,
			117, 106, 104, 105, 0, 106, 108, 104, 106, 107, 108, 104, 107, 110, 111, 0, 109, 104, 113, 110, 109, 109, 0, 0, 104, 0,
			109, 109, 110, 111, 0, 109, 104, 113, 110, 109, 113, 112, 113, 112, 113, 104, 113, 0, 114, 115, 114, 0, 115, 115, 0, 0,
			0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 31, 45, 0, 0, 29, 0, 1, 1, 1, 0, 53, 1, 25, 0, 39, 39, 206, 39, 203, 209, 197, 200, 39,
			194, 194, 194, 0, 0, 0, 35, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 0, 0, 0, 31, 45, 27, 29, 0, 0, 0, 0, 0, 0, 15, 15, 155,
			158, 152, 15, 149, 149, 149, 0, 0, 0, 31, 45, 27, 0, 0, 1, 246, 242, 1, 1, 77, 71, 0, 1, 0, 0, 191, 23, 27, 1, 1, 21, 0,
			0, 188, 0, 21, 0, 50, 0, 0, 191, 188, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 65, 65, 3, 302, 306, 298, 65, 0, 0, 0, 0, 0,
			1, 0, 1, 0, 1, 1, 1, 1, 0, 89, 0, 89, 5, 410, 414, 0, 406, 89, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 47, 1, 5, 0, 17,
			17, 0, 164, 167, 161, 17, 0, 68, 68, 322, 68, 3, 318, 326, 310, 314, 68, 0, 0, 0, 0, 0, 0, 35, 0, 0, 31, 45, 27, 29, 0,
			1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 92, 0, 92, 430, 5, 92, 0, 426, 434, 0, 418, 422, 92, 0, 0, 0, 0, 1, 0, 1, 1,
			1, 1, 1, 0, 47, 1, 5, 0, 19, 19, 179, 0, 19, 176, 182, 170, 173, 19, 0, 92, 0, 92, 430, 5, 92, 0, 426, 434, 0, 418, 422,
			92, 0, 0, 0, 0, 92, 0, 92, 430, 5, 92, 0, 426, 434, 0, 418, 422, 92, 0, 0, 0, 0, 454, 0, 454, 430, 5, 92, 0, 548, 553,
			0, 543, 422, 454, 149, 149, 149, 0, 478, 0, 478, 430, 5, 92, 0, 3, 564, 570, 0, 558, 422, 478, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 59, 59, 59, 3, 274, 278, 266, 59, 270, 59, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 1, 0, 1,
			0, 1, 1, 1, 1, 0, 83, 0, 83, 5, 83, 0, 378, 382, 0, 370, 83, 374, 83, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1,
			1, 0, 11, 11, 11, 131, 134, 125, 11, 128, 11, 122, 122, 122, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 62, 62, 62,
			3, 290, 294, 282, 62, 286, 62, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0,
			86, 0, 86, 5, 86, 0, 398, 402, 0, 390, 86, 394, 86, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 47, 1, 5, 0, 13, 13, 0, 13, 143,
			146, 137, 13, 140, 13, 0, 86, 0, 86, 5, 86, 0, 398, 402, 0, 390, 86, 394, 86, 0, 0, 0, 0, 86, 0, 86, 5, 86, 0, 398, 402,
			0, 390, 86, 394, 86, 0, 0, 0, 0, 386, 0, 386, 5, 86, 0, 533, 538, 0, 528, 86, 394, 386, 149, 149, 149, 0, 523, 0, 523,
			5, 86, 0, 3, 618, 624, 0, 612, 86, 394, 523, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 47, 1, 5, 0, 9, 9, 0, 9, 116, 119, 110,
			9, 113, 9, 0, 83, 0, 83, 5, 83, 0, 378, 382, 0, 370, 83, 374, 83, 0, 0, 0, 0, 83, 0, 83, 5, 83, 0, 378, 382, 0, 370, 83,
			374, 83, 0, 0, 0, 0, 366, 0, 366, 5, 83, 0, 513, 518, 0, 508, 83, 374, 366, 149, 149, 149, 0, 503, 0, 503, 5, 83, 0, 3,
			600, 606, 0, 594, 83, 374, 503, 0, 0, 0, 0, 56, 56, 56, 56, 3, 258, 262, 250, 56, 254, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 80, 0, 80, 80, 5, 80, 0, 358, 362, 0, 350, 80, 354, 80,
			0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 47, 1, 5, 0, 7, 7, 7, 0, 7, 104, 107,
			98, 7, 101, 7, 0, 80, 0, 80, 80, 5, 80, 0, 358, 362, 0, 350, 80, 354, 80, 0, 0, 0, 0, 80, 0, 80, 80, 5, 80, 0, 358, 362,
			0, 350, 80, 354, 80, 0, 0, 0, 0, 346, 0, 346, 80, 5, 80, 0, 493, 498, 0, 488, 80, 354, 346, 149, 149, 149, 0, 483, 0,
			483, 80, 5, 80, 0, 3, 582, 588, 0, 576, 80, 354, 483, 0, 0, 0, 0, 0, 0, 37, 31, 45, 27, 0, 1, 1, 1, 0, 53, 1, 25, 0, 0,
			41, 221, 224, 215, 227, 212, 0, 1, 1, 1, 0, 0, 0, 37, 31, 45, 27, 0, 0, 1, 246, 242, 1, 1, 77, 71, 0, 1, 0, 0, 191, 23,
			27, 1, 1, 21, 0, 0, 188, 0, 21, 0, 50, 0, 0, 191, 188, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 0, 185, 466, 470, 462, 474,
			458, 185, 0, 0, 0, 0, 74, 74, 338, 3, 334, 342, 330, 74, 0, 0, 0, 0, 0, 0, 37, 0, 31, 45, 27, 0, 1, 1, 1, 0, 0, 1, 0, 1,
			0, 1, 1, 1, 1, 0, 95, 0, 95, 446, 5, 442, 450, 0, 438, 95, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 47, 1, 5, 0, 43, 43,
			236, 0, 233, 239, 230, 43, 0, 0, 0, 31, 33, 45, 27, 0, 0, 53, 1, 25, 0, 41, 41, 221, 215, 218, 227, 212, 41, 0, 0, 0,
			35, 31, 33, 45, 27, 0, 0, 1, 246, 242, 1, 1, 77, 71, 0, 1, 0, 0, 191, 23, 27, 1, 1, 21, 0, 0, 188, 0, 21, 0, 50, 0, 0,
			191, 188, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 114;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_widgetSection = 79;
	static final int tableLayout_en_stack = 101;
	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 70;

	// line 303 "TableLayoutParser.rl"
}
