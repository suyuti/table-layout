// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, String input) {
		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		String widgetLayoutString = null;
		String className = null;
		Object label = null;

		int columnDefaultCount = 0;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell cell = null, rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		RuntimeException parseRuntimeEx = null;
		boolean hasColon = false;

		boolean debug = false;
		if (debug) System.out.println();

		try {

			// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

			// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
									// line 42 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
									// line 43 "TableLayoutParser.rl"
								{
									name = new String(data, s, p - s);
									s = p;
									hasColon = false;
								}
									break;
								case 2:
									// line 48 "TableLayoutParser.rl"
								{
									values.add(new String(data, s, p - s));
								}
									break;
								case 3:
									// line 51 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("tableProperty: " + name + " = " + values);
									((BaseTableLayout)parent).setTableProperty(name, values);
									values.clear();
								}
									break;
								case 4:
									// line 56 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellDefaultProperty: " + name + " = " + values);
									table.setCellProperty(((BaseTableLayout)parent).cellDefaults, name, values);
									values.clear();
								}
									break;
								case 5:
									// line 61 "TableLayoutParser.rl"
								{
									columnDefaults = ((BaseTableLayout)parent).getColumnDefaults(columnDefaultCount++);
								}
									break;
								case 6:
									// line 64 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("columnDefaultProperty: " + name + " = " + values);
									table.setCellProperty(columnDefaults, name, values);
									values.clear();
								}
									break;
								case 7:
									// line 69 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startRow");
									rowDefaults = ((BaseTableLayout)parent).startRow();
								}
									break;
								case 8:
									// line 73 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("rowDefaultValue: " + name + " = " + values);
									table.setCellProperty(rowDefaults, name, values);
									values.clear();
								}
									break;
								case 9:
									// line 78 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellProperty: " + name + " = " + values);
									table.setCellProperty(cell, name, values);
									values.clear();
								}
									break;
								case 10:
									// line 83 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetLayoutString: " + new String(data, s, p - s).trim());
									widgetLayoutString = new String(data, s, p - s).trim();
								}
									break;
								case 11:
									// line 87 "TableLayoutParser.rl"
								{
									className = new String(data, s, p - s);
								}
									break;
								case 12:
									// line 90 "TableLayoutParser.rl"
								{
									label = table.wrap(new String(data, s, p - s));
								}
									break;
								case 13:
									// line 93 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newWidget: " + name + " " + className + " " + label);
									if (label != null) { // 'label' or ['label'] or [name:'label']
										widget = label;
										label = null;
										if (name.length() > 0) table.register(name, widget);
									} else if (className == null) {
										if (name.length() > 0) {
											if (hasColon) { // [name:]
												widget = table.wrap(null);
												table.register(name, widget);
											} else { // [name]
												widget = table.getWidget(name);
												if (widget == null) {
													// Try the widget name as a class name.
													try {
														widget = table.newWidget(name);
													} catch (RuntimeException ex) {
														throw new IllegalArgumentException("Widget not found with name: " + name);
													}
												}
											}
										} else
											// []
											widget = table.wrap(null);
									} else { // [:class] and [name:class]
										widget = table.newWidget(className);
										className = null;
										if (name.length() > 0) table.register(name, widget);
									}
								}
									break;
								case 14:
									// line 123 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newLabel: " + new String(data, s, p - s));
									widget = table.wrap(new String(data, s, p - s));
								}
									break;
								case 15:
									// line 127 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startTable");
									parents.add(parent);
									parent = table.newTableLayout(parent instanceof BaseTableLayout ? (BaseTableLayout)parent : null);
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 69;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 16:
									// line 135 "TableLayoutParser.rl"
								{
									widget = parent;
									if (!parents.isEmpty()) {
										if (debug) System.out.println("endTable");
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 17:
									// line 143 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startWidgetSection");
									parents.add(parent);
									parent = widget;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 74;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 18:
									// line 150 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endWidgetSection");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 19:
									// line 156 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addCell");
									if (widget instanceof BaseTableLayout) {
										BaseTableLayout layout = (BaseTableLayout)widget;
										if (layout.name != null) table.register(layout.name, layout.getTable());
									}
									cell = ((BaseTableLayout)parent).addCell(table.wrap(widget));
								}
									break;
								case 20:
									// line 164 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addWidget");
									table.addChild(parent, table.wrap(widget), widgetLayoutString);
									widgetLayoutString = null;
								}
									break;
								case 21:
									// line 169 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetProperty: " + name + " = " + values);
									table.setProperty(parent, name, values);
									values.clear();
								}
									break;
								case 22:
									// line 183 "TableLayoutParser.rl"
								{
									hasColon = true;
								}
									break;
								// line 301 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
					case 5:
					}
					break;
				}
			}

			// line 237 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			for (int i = 0; i < p; i++)
				if (data[i] == '\n') lineNumber++;
			throw new IllegalArgumentException("Error parsing layout on line " + lineNumber + " near: "
				+ new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0)
			throw new IllegalArgumentException("Error parsing layout (possibly an unmatched brace or quote): " + input,
				parseRuntimeEx);
	}

	// line 321 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16,
			1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 2, 0, 2, 2, 0, 11, 2, 0, 12, 2, 0, 14, 2, 1, 3, 2, 1, 4, 2, 1, 6, 2, 1, 8, 2, 1, 9,
			2, 1, 13, 2, 1, 21, 2, 1, 22, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 9, 2, 2, 21, 2, 3, 15, 2, 4, 15, 2, 5, 0, 2, 5,
			15, 2, 6, 15, 2, 7, 0, 2, 7, 15, 2, 8, 15, 2, 9, 15, 2, 9, 16, 2, 9, 17, 2, 10, 20, 2, 11, 13, 2, 19, 0, 2, 19, 15, 2,
			19, 16, 2, 19, 17, 2, 20, 15, 2, 20, 17, 2, 20, 18, 2, 21, 15, 2, 21, 18, 3, 0, 1, 13, 3, 0, 1, 22, 3, 1, 3, 15, 3, 1,
			4, 15, 3, 1, 6, 15, 3, 1, 8, 15, 3, 1, 9, 15, 3, 1, 9, 16, 3, 1, 9, 17, 3, 1, 21, 15, 3, 1, 21, 18, 3, 2, 3, 15, 3, 2,
			4, 15, 3, 2, 6, 15, 3, 2, 8, 15, 3, 2, 9, 15, 3, 2, 9, 16, 3, 2, 9, 17, 3, 2, 21, 15, 3, 2, 21, 18, 3, 10, 20, 15, 3,
			10, 20, 17, 3, 10, 20, 18};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 15, 16, 17, 32, 47, 55, 56, 57, 69, 81, 94, 107, 120, 121, 122, 129, 139, 147, 163, 170, 175,
			177, 183, 189, 195, 196, 197, 201, 217, 233, 246, 247, 248, 258, 268, 276, 295, 305, 314, 329, 344, 357, 358, 359, 368,
			382, 396, 410, 425, 440, 453, 454, 455, 464, 474, 482, 500, 509, 519, 527, 545, 554, 570, 586, 599, 600, 601, 611, 626,
			636, 644, 663, 673, 686, 687, 688, 702, 709, 714, 716, 722, 728, 734, 735, 736, 740, 754, 768, 782, 795, 796, 797, 805,
			815, 823, 840, 848, 851};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 45, 91, 123, 125, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 125, 9,
			13, 45, 45, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9,
			13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 91, 123, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48,
			57, 65, 90, 97, 122, 32, 37, 39, 44, 46, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 91, 123, 9, 13, 32,
			58, 93, 9, 13, 58, 93, 32, 39, 58, 93, 9, 13, 32, 39, 58, 93, 9, 13, 32, 39, 58, 93, 9, 13, 39, 39, 32, 93, 9, 13, 32,
			39, 40, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90,
			97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 44, 45, 91, 123, 125, 9, 13, 39, 45,
			46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 91, 95, 123, 125, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 40, 44, 45, 91, 123, 125, 9, 13, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58,
			91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45,
			46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 45, 91, 123, 124, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48,
			57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9,
			13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 91, 95, 123, 124,
			9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95,
			48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 91, 95, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91,
			123, 124, 9, 13, 32, 39, 42, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 91, 123, 124, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 42, 44, 45, 91, 123,
			124, 9, 13, 32, 39, 42, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46,
			95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 42, 44, 45, 46, 91, 95, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42,
			44, 45, 91, 123, 124, 9, 13, 32, 39, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 41, 91, 123, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 91, 123, 9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 58, 93, 9, 13, 32, 39, 58,
			93, 9, 13, 32, 39, 58, 93, 9, 13, 39, 39, 32, 93, 9, 13, 32, 39, 40, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 41, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 41, 44, 91, 123, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97,
			122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 41, 44, 46, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41,
			44, 91, 123, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 7, 1, 1, 7, 7, 6, 1, 1, 4, 4, 5, 5, 5, 1, 1, 5, 4, 2, 8, 5, 3, 2, 4, 4, 4, 1, 1, 2, 8, 8, 5, 1, 1, 8,
			4, 2, 11, 8, 1, 7, 7, 5, 1, 1, 7, 6, 6, 6, 7, 7, 5, 1, 1, 7, 4, 2, 10, 7, 4, 2, 10, 7, 8, 8, 5, 1, 1, 8, 7, 4, 2, 11, 8,
			5, 1, 1, 6, 5, 3, 2, 4, 4, 4, 1, 1, 2, 6, 6, 6, 5, 1, 1, 6, 4, 2, 9, 6, 1, 0};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 0, 0, 4, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 4, 4, 0, 0, 1,
			3, 3, 4, 1, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 3, 3, 4, 1, 4, 4, 4, 0, 0, 1, 4, 3, 3, 4, 1, 4,
			0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 0};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 12, 14, 16, 28, 40, 48, 50, 52, 61, 70, 80, 90, 100, 102, 104, 111, 119, 125, 138, 145, 150, 153,
			159, 165, 171, 173, 175, 179, 192, 205, 215, 217, 219, 229, 237, 243, 259, 269, 275, 287, 299, 309, 311, 313, 322, 333,
			344, 355, 367, 379, 389, 391, 393, 402, 410, 416, 431, 440, 448, 454, 469, 478, 491, 504, 514, 516, 518, 528, 540, 548,
			554, 570, 580, 590, 592, 594, 605, 612, 617, 620, 626, 632, 638, 640, 642, 646, 657, 668, 679, 689, 691, 693, 701, 709,
			715, 729, 737, 740};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {1, 2, 39, 7, 21, 69, 47, 1, 63, 63, 63, 0, 4, 3, 4, 3, 5, 2, 6, 7, 21, 4, 98, 5, 29, 29, 29, 0, 5, 2, 6,
			7, 21, 4, 98, 5, 29, 29, 29, 0, 6, 2, 7, 21, 4, 98, 6, 0, 8, 0, 9, 0, 10, 2, 21, 4, 10, 11, 11, 11, 0, 10, 2, 21, 4, 10,
			11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 13, 14, 18, 19, 19, 13, 19, 19,
			19, 0, 16, 15, 16, 15, 10, 2, 17, 21, 4, 10, 0, 14, 18, 19, 19, 19, 19, 19, 0, 19, 19, 19, 19, 19, 0, 10, 20, 2, 17, 19,
			21, 19, 4, 10, 19, 19, 19, 0, 10, 2, 17, 21, 4, 10, 0, 21, 23, 4, 21, 22, 23, 4, 22, 25, 26, 0, 4, 25, 24, 24, 0, 0, 4,
			24, 24, 25, 26, 0, 4, 25, 24, 28, 27, 28, 27, 28, 4, 28, 0, 30, 2, 6, 7, 31, 21, 4, 98, 30, 29, 29, 29, 0, 30, 2, 6, 7,
			31, 21, 4, 98, 30, 29, 29, 29, 0, 31, 32, 36, 37, 37, 31, 37, 37, 37, 0, 34, 33, 34, 33, 5, 2, 6, 35, 7, 21, 4, 98, 5,
			0, 32, 36, 37, 37, 37, 37, 37, 0, 37, 37, 37, 37, 37, 0, 5, 38, 2, 6, 35, 7, 37, 21, 37, 4, 98, 5, 37, 37, 37, 0, 5, 2,
			6, 35, 7, 21, 4, 98, 5, 0, 39, 39, 40, 40, 40, 0, 41, 2, 7, 42, 21, 4, 47, 41, 40, 40, 40, 0, 41, 2, 7, 42, 21, 4, 47,
			41, 40, 40, 40, 0, 42, 43, 60, 61, 61, 42, 61, 61, 61, 0, 45, 44, 45, 44, 46, 2, 59, 7, 21, 4, 47, 46, 0, 46, 2, 7, 21,
			4, 47, 46, 40, 40, 40, 0, 48, 2, 7, 21, 4, 47, 48, 49, 49, 49, 0, 48, 2, 7, 21, 4, 47, 48, 49, 49, 49, 0, 50, 2, 7, 51,
			21, 4, 47, 50, 49, 49, 49, 0, 50, 2, 7, 51, 21, 4, 47, 50, 49, 49, 49, 0, 51, 52, 56, 57, 57, 51, 57, 57, 57, 0, 54, 53,
			54, 53, 48, 2, 55, 7, 21, 4, 47, 48, 0, 52, 56, 57, 57, 57, 57, 57, 0, 57, 57, 57, 57, 57, 0, 48, 58, 2, 55, 7, 57, 21,
			57, 4, 47, 48, 57, 57, 57, 0, 48, 2, 55, 7, 21, 4, 47, 48, 0, 43, 60, 61, 61, 61, 61, 61, 0, 61, 61, 61, 61, 61, 0, 46,
			62, 2, 59, 7, 61, 21, 61, 4, 47, 46, 61, 61, 61, 0, 46, 2, 59, 7, 21, 4, 47, 46, 0, 64, 2, 39, 7, 65, 21, 4, 47, 64, 63,
			63, 63, 0, 64, 2, 39, 7, 65, 21, 4, 47, 64, 63, 63, 63, 0, 65, 66, 71, 72, 72, 65, 72, 72, 72, 0, 68, 67, 68, 67, 69, 2,
			39, 70, 7, 21, 4, 47, 69, 0, 69, 2, 39, 7, 21, 4, 47, 69, 63, 63, 63, 0, 66, 71, 72, 72, 72, 72, 72, 0, 72, 72, 72, 72,
			72, 0, 69, 73, 2, 39, 70, 7, 72, 21, 72, 4, 47, 69, 72, 72, 72, 0, 69, 2, 39, 70, 7, 21, 4, 47, 69, 0, 74, 75, 99, 79,
			77, 74, 88, 88, 88, 0, 77, 76, 77, 76, 77, 75, 78, 99, 79, 77, 77, 87, 87, 87, 0, 78, 75, 99, 79, 77, 78, 0, 79, 81, 77,
			79, 80, 81, 77, 80, 83, 84, 0, 77, 83, 82, 82, 0, 0, 77, 82, 82, 83, 84, 0, 77, 83, 82, 86, 85, 86, 85, 86, 77, 86, 0,
			87, 75, 78, 99, 79, 77, 78, 87, 87, 87, 0, 89, 75, 99, 90, 79, 77, 89, 88, 88, 88, 0, 89, 75, 99, 90, 79, 77, 89, 88,
			88, 88, 0, 90, 91, 95, 96, 96, 90, 96, 96, 96, 0, 93, 92, 93, 92, 74, 75, 99, 94, 79, 77, 74, 0, 91, 95, 96, 96, 96, 96,
			96, 0, 96, 96, 96, 96, 96, 0, 74, 97, 75, 99, 94, 96, 79, 96, 77, 74, 96, 96, 96, 0, 74, 75, 99, 94, 79, 77, 74, 0, 98,
			98, 0, 0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 52, 1, 27, 0, 37, 37, 145, 37, 37, 139, 142, 37, 136, 136, 136, 0,
			0, 0, 33, 0, 0, 29, 31, 0, 1, 1, 1, 0, 0, 0, 0, 0, 29, 31, 0, 0, 0, 0, 0, 0, 15, 15, 15, 115, 15, 112, 112, 112, 0, 0,
			0, 0, 29, 0, 1, 1, 1, 0, 64, 64, 3, 64, 183, 64, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,
			0, 43, 1, 5, 0, 17, 17, 0, 17, 118, 17, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 88, 0, 88, 5, 0, 88, 0, 219, 88, 0,
			0, 0, 0, 88, 88, 5, 88, 219, 88, 0, 1, 167, 163, 1, 1, 76, 70, 0, 1, 0, 0, 25, 1, 1, 21, 0, 0, 133, 21, 0, 46, 0, 0,
			133, 46, 1, 49, 1, 23, 0, 0, 25, 0, 0, 67, 67, 195, 67, 3, 67, 187, 191, 67, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 29, 31, 0,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 43, 1, 5, 0, 19, 19, 127, 0, 19, 19, 121, 124, 19, 0, 0, 1, 1, 1, 1, 1, 1, 0,
			0, 0, 0, 0, 0, 0, 91, 0, 91, 231, 5, 91, 0, 91, 0, 223, 227, 91, 0, 0, 0, 0, 91, 91, 231, 5, 91, 91, 223, 227, 91, 0, 0,
			0, 1, 1, 1, 0, 58, 58, 58, 3, 58, 175, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1,
			1, 0, 43, 1, 5, 0, 9, 9, 0, 9, 9, 100, 9, 9, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 11, 11, 11, 11, 106, 11, 11, 103, 103,
			103, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 61, 61, 61, 3, 61, 179, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1,
			0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 43, 1, 5, 0, 13, 13, 0, 13, 13, 109, 13, 13, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
			0, 85, 0, 85, 5, 85, 0, 85, 0, 215, 85, 85, 0, 0, 0, 0, 85, 85, 5, 85, 85, 215, 85, 85, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 82, 0, 82, 5, 82, 0, 82, 0, 211, 82, 82, 0, 0, 0, 0, 82, 82, 5, 82, 82, 211, 82, 82, 0, 55, 55, 55, 55, 3,
			55, 171, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 43, 1, 5, 0, 7, 7, 7,
			0, 7, 7, 97, 7, 7, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 79, 0, 79, 79, 5,
			79, 0, 79, 0, 207, 79, 79, 0, 0, 0, 0, 79, 79, 79, 5, 79, 79, 207, 79, 79, 0, 0, 0, 35, 0, 29, 0, 1, 1, 1, 0, 52, 1, 27,
			0, 0, 39, 151, 154, 39, 148, 0, 1, 1, 1, 0, 0, 0, 35, 0, 29, 0, 0, 1, 167, 163, 1, 1, 76, 70, 0, 1, 0, 0, 25, 1, 1, 21,
			0, 0, 133, 21, 0, 46, 0, 0, 133, 46, 1, 49, 1, 23, 0, 0, 25, 0, 0, 0, 130, 247, 251, 130, 243, 130, 0, 0, 0, 0, 73, 73,
			203, 3, 73, 199, 73, 0, 0, 0, 0, 0, 0, 35, 0, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 43, 1, 5, 0, 41, 41,
			160, 0, 41, 157, 41, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 94, 0, 94, 239, 5, 0, 94, 0, 235, 94, 0, 0, 0, 0, 94,
			94, 239, 5, 94, 235, 94, 0, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 98;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_widgetSection = 74;
	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 69;

	// line 252 "TableLayoutParser.rl"
}
