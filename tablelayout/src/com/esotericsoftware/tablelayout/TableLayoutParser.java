// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, String input) {
		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		String widgetLayoutString = null;
		String className = null;

		int columnDefaultCount = 0;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell cell = null, rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		RuntimeException parseRuntimeEx = null;
		boolean hasColon = false;

		boolean debug = false;
		if (debug) System.out.println();

		try {

			// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

			// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
									// line 41 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
									// line 42 "TableLayoutParser.rl"
								{
									name = new String(data, s, p - s);
									s = p;
								}
									break;
								case 2:
									// line 46 "TableLayoutParser.rl"
								{
									values.add(new String(data, s, p - s));
								}
									break;
								case 3:
									// line 49 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("tableProperty: " + name + " = " + values);
									((BaseTableLayout)parent).setTableProperty(name, values);
									values.clear();
									name = null;
								}
									break;
								case 4:
									// line 55 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellDefaultProperty: " + name + " = " + values);
									table.setCellProperty(((BaseTableLayout)parent).cellDefaults, name, values);
									values.clear();
									name = null;
								}
									break;
								case 5:
									// line 61 "TableLayoutParser.rl"
								{
									columnDefaults = ((BaseTableLayout)parent).getColumnDefaults(columnDefaultCount++);
								}
									break;
								case 6:
									// line 64 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("columnDefaultProperty: " + name + " = " + values);
									table.setCellProperty(columnDefaults, name, values);
									values.clear();
									name = null;
								}
									break;
								case 7:
									// line 70 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startRow");
									rowDefaults = ((BaseTableLayout)parent).startRow();
								}
									break;
								case 8:
									// line 74 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("rowDefaultValue: " + name + " = " + values);
									table.setCellProperty(rowDefaults, name, values);
									values.clear();
									name = null;
								}
									break;
								case 9:
									// line 80 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellProperty: " + name + " = " + values);
									table.setCellProperty(cell, name, values);
									values.clear();
									name = null;
								}
									break;
								case 10:
									// line 86 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetLayoutString: " + new String(data, s, p - s).trim());
									widgetLayoutString = new String(data, s, p - s).trim();
								}
									break;
								case 11:
									// line 90 "TableLayoutParser.rl"
								{
									className = new String(data, s, p - s);
								}
									break;
								case 12:
									// line 93 "TableLayoutParser.rl"
								{
									if (debug)
										System.out.println("newWidget, name:" + name + " class:" + className + " widget:" + widget);
									if (widget != null) { // 'label' or ['label'] or [name:'label']
										if (name != null && name.length() > 0) table.register(name, widget);
									} else if (className == null) {
										if (name.length() > 0) {
											if (hasColon) { // [name:]
												widget = table.wrap(null);
												table.register(name, widget);
											} else { // [name]
												widget = table.getWidget(name);
												if (widget == null) {
													// Try the widget name as a class name.
													try {
														widget = table.newWidget(name);
													} catch (RuntimeException ex) {
														throw new IllegalArgumentException("Widget not found with name: " + name);
													}
												}
											}
										} else
											// []
											widget = table.wrap(null);
									} else { // [:class] and [name:class]
										widget = table.newWidget(className);
										if (name.length() > 0) table.register(name, widget);
									}
									name = null;
									className = null;
								}
									break;
								case 13:
									// line 122 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newLabel: " + new String(data, s, p - s));
									widget = table.wrap(new String(data, s, p - s));
								}
									break;
								case 14:
									// line 126 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startTable, name:" + name);
									parents.add(parent);
									BaseTableLayout parentTable = null;
									for (int i = parents.size() - 1; i >= 0; i--) {
										Object object = parents.get(i);
										if (object instanceof BaseTableLayout) {
											parentTable = (BaseTableLayout)object;
											break;
										}
									}
									if (parentTable == null) parentTable = table;
									parent = parentTable.newTableLayout();
									if (name != null) { // [name:{}]
										table.register(name, ((BaseTableLayout)parent).getTable());
										name = null;
									}
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 70;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 15:
									// line 147 "TableLayoutParser.rl"
								{
									widget = parent;
									if (!parents.isEmpty()) {
										if (debug) System.out.println("endTable");
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 16:
									// line 155 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startStack, name:" + name);
									parents.add(parent);
									parent = table.newStack();
									if (name != null) { // [name:<>]
										table.register(name, parent);
										name = null;
									}
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 99;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 17:
									// line 167 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endStack");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 18:
									// line 173 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startWidgetSection");
									parents.add(parent);
									parent = widget;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 75;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 19:
									// line 180 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endWidgetSection");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 20:
									// line 186 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addCell");
									cell = ((BaseTableLayout)parent).addCell(table.wrap(widget));
								}
									break;
								case 21:
									// line 190 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addWidget");
									table.addChild(parent, table.wrap(widget), widgetLayoutString);
									widgetLayoutString = null;
								}
									break;
								case 22:
									// line 195 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetProperty: " + name + " = " + values);
									table.setProperty(parent, name, values);
									values.clear();
									name = null;
								}
									break;
								case 23:
									// line 212 "TableLayoutParser.rl"
								{
									widget = null;
									hasColon = false;
								}
									break;
								case 24:
									// line 213 "TableLayoutParser.rl"
								{
									hasColon = true;
								}
									break;
								// line 342 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
					case 5:
					}
					break;
				}
			}

			// line 272 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			int lineStartOffset = 0;
			for (int i = 0; i < p; i++) {
				if (data[i] == '\n') {
					lineNumber++;
					lineStartOffset = i;
				}
			}
			ParseException ex = new ParseException("Error parsing layout on line " + lineNumber + ":" + (p - lineStartOffset)
				+ " near: " + new String(data, p, Math.min(64, pe - p)), parseRuntimeEx);
			ex.line = lineNumber;
			ex.column = p - lineStartOffset;
			throw ex;
		} else if (top > 0)
			throw new ParseException("Error parsing layout (possibly an unmatched brace or quote): "
				+ new String(data, 0, Math.min(64, pe)), parseRuntimeEx);
	}

	// line 362 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16,
			1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 2, 0, 2, 2, 0, 11, 2, 0, 13, 2, 1, 3, 2, 1, 4, 2, 1, 6, 2, 1, 8, 2, 1,
			9, 2, 1, 12, 2, 1, 22, 2, 1, 24, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 9, 2, 2, 22, 2, 3, 14, 2, 3, 15, 2, 3, 16, 2,
			3, 23, 2, 4, 14, 2, 4, 15, 2, 4, 16, 2, 4, 23, 2, 5, 0, 2, 5, 14, 2, 5, 15, 2, 5, 16, 2, 5, 23, 2, 6, 14, 2, 6, 15, 2,
			6, 16, 2, 6, 23, 2, 7, 0, 2, 7, 14, 2, 7, 15, 2, 7, 16, 2, 7, 23, 2, 8, 14, 2, 8, 15, 2, 8, 16, 2, 8, 23, 2, 9, 14, 2,
			9, 15, 2, 9, 16, 2, 9, 18, 2, 9, 23, 2, 10, 21, 2, 11, 12, 2, 16, 0, 2, 20, 0, 2, 20, 14, 2, 20, 15, 2, 20, 16, 2, 20,
			18, 2, 20, 23, 2, 21, 14, 2, 21, 16, 2, 21, 17, 2, 21, 18, 2, 21, 19, 2, 21, 23, 2, 22, 14, 2, 22, 16, 2, 22, 19, 2, 22,
			23, 3, 0, 1, 12, 3, 0, 1, 24, 3, 1, 3, 14, 3, 1, 3, 15, 3, 1, 3, 16, 3, 1, 3, 23, 3, 1, 4, 14, 3, 1, 4, 15, 3, 1, 4, 16,
			3, 1, 4, 23, 3, 1, 6, 14, 3, 1, 6, 15, 3, 1, 6, 16, 3, 1, 6, 23, 3, 1, 8, 14, 3, 1, 8, 15, 3, 1, 8, 16, 3, 1, 8, 23, 3,
			1, 9, 14, 3, 1, 9, 15, 3, 1, 9, 16, 3, 1, 9, 18, 3, 1, 9, 23, 3, 1, 22, 14, 3, 1, 22, 16, 3, 1, 22, 19, 3, 1, 22, 23, 3,
			2, 3, 14, 3, 2, 3, 15, 3, 2, 3, 16, 3, 2, 3, 23, 3, 2, 4, 14, 3, 2, 4, 15, 3, 2, 4, 16, 3, 2, 4, 23, 3, 2, 6, 14, 3, 2,
			6, 15, 3, 2, 6, 16, 3, 2, 6, 23, 3, 2, 8, 14, 3, 2, 8, 15, 3, 2, 8, 16, 3, 2, 8, 23, 3, 2, 9, 14, 3, 2, 9, 15, 3, 2, 9,
			16, 3, 2, 9, 18, 3, 2, 9, 23, 3, 2, 22, 14, 3, 2, 22, 16, 3, 2, 22, 19, 3, 2, 22, 23, 3, 10, 21, 14, 3, 10, 21, 16, 3,
			10, 21, 18, 3, 10, 21, 19, 3, 10, 21, 23};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 17, 18, 19, 35, 51, 60, 61, 62, 77, 92, 108, 123, 136, 137, 138, 148, 162, 167, 169, 177, 184,
			192, 193, 194, 198, 208, 216, 235, 245, 262, 279, 292, 293, 294, 305, 315, 323, 343, 354, 363, 380, 397, 410, 411, 412,
			423, 439, 455, 471, 488, 505, 518, 519, 520, 531, 541, 549, 569, 580, 590, 598, 618, 629, 647, 665, 678, 679, 680, 692,
			709, 719, 727, 748, 760, 774, 775, 776, 791, 799, 804, 806, 814, 821, 829, 830, 831, 835, 850, 865, 880, 893, 894, 895,
			904, 914, 922, 940, 949, 957, 958, 959, 968, 977, 982, 984, 992, 999, 1007, 1008, 1009, 1013, 1016, 1016};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 45, 60, 91,
			123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45,
			60, 91, 123, 125, 9, 13, 45, 45, 32, 39, 45, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 60, 91, 123,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 58, 60,
			91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44,
			45, 60, 91, 123, 125, 9, 13, 32, 39, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 58, 93, 9, 13, 58, 93, 32,
			39, 58, 60, 93, 123, 9, 13, 32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123, 9, 13, 39, 39, 32, 93, 9, 13, 39, 45,
			46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 125, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 60, 91, 123, 125, 9, 13, 32, 39, 40, 45, 58, 60, 91, 123, 125, 9, 13, 48, 57,
			65, 90, 97, 122, 32, 39, 40, 45, 58, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48,
			57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 44, 45, 60, 91, 123, 125, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46,
			95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 60, 91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			40, 44, 45, 60, 91, 123, 125, 9, 13, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124, 125, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9,
			13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 60, 91, 123, 124, 125, 9, 13, 32, 39, 45, 60, 91, 123, 124, 125, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 60, 91, 123,
			124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39,
			39, 32, 39, 44, 45, 60, 91, 123, 124, 125, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97,
			122, 32, 37, 39, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 60, 91, 123,
			124, 125, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 60,
			91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 60, 91, 123, 124, 125, 9, 13, 32, 39, 42, 45, 58,
			60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90,
			97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 42, 44, 45, 60, 91, 123, 124, 125, 9, 13,
			32, 39, 42, 45, 60, 91, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95,
			48, 57, 65, 90, 97, 122, 32, 37, 39, 42, 44, 45, 46, 60, 91, 95, 123, 124, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			42, 44, 45, 60, 91, 123, 124, 125, 9, 13, 32, 39, 41, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40,
			41, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 60, 91, 123, 9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 58,
			60, 93, 123, 9, 13, 32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123, 9, 13, 39, 39, 32, 93, 9, 13, 32, 39, 40, 41,
			60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41,
			58, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 41,
			44, 60, 91, 123, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 41, 44,
			46, 60, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 44, 60, 91, 123, 9, 13, 32, 39, 60, 62, 91, 123, 9, 13,
			39, 39, 32, 39, 40, 60, 62, 91, 123, 9, 13, 32, 39, 40, 60, 62, 91, 123, 9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 58,
			60, 93, 123, 9, 13, 32, 39, 58, 93, 123, 9, 13, 32, 39, 58, 60, 93, 123, 9, 13, 39, 39, 32, 93, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 9, 1, 1, 8, 8, 7, 1, 1, 7, 7, 8, 7, 5, 1, 1, 8, 6, 3, 2, 6, 5, 6, 1, 1, 2, 4, 2, 11, 8, 9, 9, 5, 1,
			1, 9, 4, 2, 12, 9, 1, 9, 9, 5, 1, 1, 9, 8, 8, 8, 9, 9, 5, 1, 1, 9, 4, 2, 12, 9, 4, 2, 12, 9, 10, 10, 5, 1, 1, 10, 9, 4,
			2, 13, 10, 6, 1, 1, 7, 6, 3, 2, 6, 5, 6, 1, 1, 2, 7, 7, 7, 5, 1, 1, 7, 4, 2, 10, 7, 6, 1, 1, 7, 7, 3, 2, 6, 5, 6, 1, 1,
			2, 1, 0, 0};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 0, 0, 4, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 0, 1, 1, 1, 0, 0, 1, 3, 3, 4, 1, 4, 4, 4, 0, 0,
			1, 3, 3, 4, 1, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 3, 3, 4, 1, 4, 4, 4, 0, 0, 1, 4, 3, 3, 4, 1,
			4, 0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 14, 16, 18, 31, 44, 53, 55, 57, 69, 81, 94, 106, 116, 118, 120, 130, 141, 146, 149, 157, 164,
			172, 174, 176, 180, 188, 194, 210, 220, 234, 248, 258, 260, 262, 273, 281, 287, 304, 315, 321, 335, 349, 359, 361, 363,
			374, 387, 400, 413, 427, 441, 451, 453, 455, 466, 474, 480, 497, 508, 516, 522, 539, 550, 565, 580, 590, 592, 594, 606,
			620, 628, 634, 652, 664, 675, 677, 679, 691, 699, 704, 707, 715, 722, 730, 732, 734, 738, 750, 762, 774, 784, 786, 788,
			797, 805, 811, 826, 835, 843, 845, 847, 856, 865, 870, 873, 881, 888, 896, 898, 900, 904, 907, 908};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {1, 2, 40, 7, 4, 18, 70, 48, 112, 1, 64, 64, 64, 0, 4, 3, 4, 3, 5, 2, 6, 7, 4, 18, 4, 112, 5, 30, 30, 30,
			0, 5, 2, 6, 7, 4, 18, 4, 112, 5, 30, 30, 30, 0, 6, 2, 7, 4, 18, 4, 112, 6, 0, 8, 0, 9, 0, 10, 2, 7, 4, 18, 4, 112, 10,
			11, 11, 11, 0, 10, 2, 7, 4, 18, 4, 112, 10, 11, 11, 11, 0, 12, 2, 7, 13, 4, 18, 4, 112, 12, 11, 11, 11, 0, 12, 2, 13, 4,
			18, 4, 112, 12, 11, 11, 11, 0, 13, 14, 27, 28, 28, 13, 28, 28, 28, 0, 16, 15, 16, 15, 17, 2, 26, 7, 4, 18, 4, 112, 17,
			0, 17, 2, 4, 18, 4, 112, 17, 11, 11, 11, 0, 18, 20, 4, 18, 19, 20, 4, 19, 22, 23, 0, 21, 4, 25, 22, 21, 21, 0, 0, 4, 0,
			21, 21, 22, 23, 0, 21, 4, 25, 22, 21, 25, 24, 25, 24, 25, 4, 25, 0, 14, 27, 28, 28, 28, 28, 28, 0, 28, 28, 28, 28, 28,
			0, 17, 29, 2, 26, 7, 28, 4, 18, 28, 4, 112, 17, 28, 28, 28, 0, 17, 2, 26, 7, 4, 18, 4, 112, 17, 0, 31, 2, 6, 7, 32, 4,
			18, 4, 112, 31, 30, 30, 30, 0, 31, 2, 6, 7, 32, 4, 18, 4, 112, 31, 30, 30, 30, 0, 32, 33, 37, 38, 38, 32, 38, 38, 38, 0,
			35, 34, 35, 34, 5, 2, 6, 36, 7, 4, 18, 4, 112, 5, 0, 33, 37, 38, 38, 38, 38, 38, 0, 38, 38, 38, 38, 38, 0, 5, 39, 2, 6,
			36, 7, 38, 4, 18, 38, 4, 112, 5, 38, 38, 38, 0, 5, 2, 6, 36, 7, 4, 18, 4, 112, 5, 0, 40, 40, 41, 41, 41, 0, 42, 2, 7,
			43, 4, 18, 4, 48, 112, 42, 41, 41, 41, 0, 42, 2, 7, 43, 4, 18, 4, 48, 112, 42, 41, 41, 41, 0, 43, 44, 61, 62, 62, 43,
			62, 62, 62, 0, 46, 45, 46, 45, 47, 2, 60, 7, 4, 18, 4, 48, 112, 47, 0, 47, 2, 7, 4, 18, 4, 48, 112, 47, 41, 41, 41, 0,
			49, 2, 7, 4, 18, 4, 48, 112, 49, 50, 50, 50, 0, 49, 2, 7, 4, 18, 4, 48, 112, 49, 50, 50, 50, 0, 51, 2, 7, 52, 4, 18, 4,
			48, 112, 51, 50, 50, 50, 0, 51, 2, 7, 52, 4, 18, 4, 48, 112, 51, 50, 50, 50, 0, 52, 53, 57, 58, 58, 52, 58, 58, 58, 0,
			55, 54, 55, 54, 49, 2, 56, 7, 4, 18, 4, 48, 112, 49, 0, 53, 57, 58, 58, 58, 58, 58, 0, 58, 58, 58, 58, 58, 0, 49, 59, 2,
			56, 7, 58, 4, 18, 58, 4, 48, 112, 49, 58, 58, 58, 0, 49, 2, 56, 7, 4, 18, 4, 48, 112, 49, 0, 44, 61, 62, 62, 62, 62, 62,
			0, 62, 62, 62, 62, 62, 0, 47, 63, 2, 60, 7, 62, 4, 18, 62, 4, 48, 112, 47, 62, 62, 62, 0, 47, 2, 60, 7, 4, 18, 4, 48,
			112, 47, 0, 65, 2, 40, 7, 66, 4, 18, 4, 48, 112, 65, 64, 64, 64, 0, 65, 2, 40, 7, 66, 4, 18, 4, 48, 112, 65, 64, 64, 64,
			0, 66, 67, 72, 73, 73, 66, 73, 73, 73, 0, 69, 68, 69, 68, 70, 2, 40, 71, 7, 4, 18, 4, 48, 112, 70, 0, 70, 2, 40, 7, 4,
			18, 4, 48, 112, 70, 64, 64, 64, 0, 67, 72, 73, 73, 73, 73, 73, 0, 73, 73, 73, 73, 73, 0, 70, 74, 2, 40, 71, 7, 73, 4,
			18, 73, 4, 48, 112, 70, 73, 73, 73, 0, 70, 2, 40, 71, 7, 4, 18, 4, 48, 112, 70, 0, 75, 76, 113, 78, 80, 78, 75, 89, 89,
			89, 0, 78, 77, 78, 77, 78, 76, 79, 113, 78, 80, 78, 78, 88, 88, 88, 0, 79, 76, 113, 78, 80, 78, 79, 0, 80, 82, 78, 80,
			81, 82, 78, 81, 84, 85, 0, 83, 78, 87, 84, 83, 83, 0, 0, 78, 0, 83, 83, 84, 85, 0, 83, 78, 87, 84, 83, 87, 86, 87, 86,
			87, 78, 87, 0, 88, 76, 79, 113, 78, 80, 78, 79, 88, 88, 88, 0, 90, 76, 113, 91, 78, 80, 78, 90, 89, 89, 89, 0, 90, 76,
			113, 91, 78, 80, 78, 90, 89, 89, 89, 0, 91, 92, 96, 97, 97, 91, 97, 97, 97, 0, 94, 93, 94, 93, 75, 76, 113, 95, 78, 80,
			78, 75, 0, 92, 96, 97, 97, 97, 97, 97, 0, 97, 97, 97, 97, 97, 0, 75, 98, 76, 113, 95, 97, 78, 80, 97, 78, 75, 97, 97,
			97, 0, 75, 76, 113, 95, 78, 80, 78, 75, 0, 99, 100, 102, 114, 104, 102, 99, 0, 102, 101, 102, 101, 103, 100, 99, 102,
			114, 104, 102, 103, 0, 103, 100, 99, 102, 114, 104, 102, 103, 0, 104, 106, 102, 104, 105, 106, 102, 105, 108, 109, 0,
			107, 102, 111, 108, 107, 107, 0, 0, 102, 0, 107, 107, 108, 109, 0, 107, 102, 111, 108, 107, 111, 110, 111, 110, 111,
			102, 111, 0, 112, 112, 0, 0, 0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 31, 45, 0, 0, 29, 0, 1, 1, 1, 0, 53, 1, 25, 0, 39, 39, 212, 39, 209, 215, 203, 206, 39,
			200, 200, 200, 0, 0, 0, 35, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 0, 0, 0, 31, 45, 27, 29, 0, 0, 0, 0, 0, 0, 15, 15, 15,
			158, 161, 152, 155, 15, 149, 149, 149, 0, 0, 0, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 65, 65, 65, 3, 312, 316, 304, 308, 65,
			0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 47, 1, 5, 0, 17, 17, 0, 17, 170, 173,
			164, 167, 17, 0, 0, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 1, 252, 248, 1, 1, 77, 71, 0, 1, 0, 0, 197, 23, 27, 1, 1, 21, 0,
			0, 194, 0, 21, 0, 50, 0, 0, 197, 194, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
			89, 0, 89, 5, 89, 0, 412, 416, 0, 404, 408, 89, 0, 0, 0, 0, 89, 89, 5, 89, 412, 416, 404, 408, 89, 0, 68, 68, 332, 68,
			3, 328, 336, 320, 324, 68, 0, 0, 0, 0, 0, 0, 35, 0, 0, 31, 45, 27, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 47,
			1, 5, 0, 19, 19, 185, 0, 19, 182, 188, 176, 179, 19, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 92, 0, 92, 432, 5, 92,
			0, 428, 436, 0, 420, 424, 92, 0, 0, 0, 0, 92, 92, 432, 5, 92, 428, 436, 420, 424, 92, 0, 0, 0, 1, 1, 1, 0, 59, 59, 59,
			3, 280, 284, 272, 59, 276, 59, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0,
			47, 1, 5, 0, 9, 9, 0, 9, 116, 119, 110, 9, 113, 9, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 11, 11, 11, 131, 134,
			125, 11, 128, 11, 122, 122, 122, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 62, 62, 62, 3, 296, 300, 288, 62, 292,
			62, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 47, 1, 5, 0, 13, 13, 0, 13,
			143, 146, 137, 13, 140, 13, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 86, 0, 86, 5, 86, 0, 396, 400, 0, 388, 86, 392,
			86, 0, 0, 0, 0, 86, 86, 5, 86, 396, 400, 388, 86, 392, 86, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 83, 0, 83, 5,
			83, 0, 380, 384, 0, 372, 83, 376, 83, 0, 0, 0, 0, 83, 83, 5, 83, 380, 384, 372, 83, 376, 83, 0, 56, 56, 56, 56, 3, 264,
			268, 256, 56, 260, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 47, 1,
			5, 0, 7, 7, 7, 0, 7, 104, 107, 98, 7, 101, 7, 0, 0, 0, 0, 0, 31, 45, 27, 0, 29, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0,
			0, 0, 0, 0, 0, 0, 80, 0, 80, 80, 5, 80, 0, 364, 368, 0, 356, 80, 360, 80, 0, 0, 0, 0, 80, 80, 80, 5, 80, 364, 368, 356,
			80, 360, 80, 0, 0, 0, 37, 31, 45, 27, 0, 1, 1, 1, 0, 53, 1, 25, 0, 0, 41, 227, 230, 221, 233, 218, 0, 1, 1, 1, 0, 0, 0,
			37, 31, 45, 27, 0, 0, 1, 252, 248, 1, 1, 77, 71, 0, 1, 0, 0, 197, 23, 27, 1, 1, 21, 0, 0, 194, 0, 21, 0, 50, 0, 0, 197,
			194, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 0, 191, 464, 468, 460, 472, 456, 191, 0, 0, 0, 0, 74, 74, 348, 3, 344, 352,
			340, 74, 0, 0, 0, 0, 0, 0, 37, 0, 31, 45, 27, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 47, 1, 5, 0, 43, 43, 242, 0,
			239, 245, 236, 43, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 95, 0, 95, 448, 5, 0, 444, 452, 0, 440, 95, 0, 0, 0, 0,
			95, 95, 448, 5, 444, 452, 440, 95, 0, 0, 0, 31, 33, 45, 27, 0, 0, 53, 1, 25, 0, 41, 41, 227, 221, 224, 233, 218, 41, 0,
			0, 0, 35, 31, 33, 45, 27, 0, 0, 1, 252, 248, 1, 1, 77, 71, 0, 1, 0, 0, 197, 23, 27, 1, 1, 21, 0, 0, 194, 0, 21, 0, 50,
			0, 0, 197, 194, 27, 50, 1, 53, 1, 25, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 112;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_widgetSection = 75;
	static final int tableLayout_en_stack = 99;
	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 70;

	// line 287 "TableLayoutParser.rl"
}
