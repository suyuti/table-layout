
// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated from Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

import com.esotericsoftware.tablelayout.BaseTableLayout.Cell;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, Cell cell, String input) {
		char[] data = (input + " ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<BaseTableLayout> tables = new ArrayList(8);
		Cell rowDefaults = null;

		RuntimeException parseRuntimeEx = null;
		try {
		
// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	{
	cs = tableLayout_start;
	top = 0;
	}

// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _tableLayout_key_offsets[cs];
	_trans = _tableLayout_index_offsets[cs];
	_klen = _tableLayout_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _tableLayout_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _tableLayout_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _tableLayout_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _tableLayout_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _tableLayout_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	cs = _tableLayout_trans_targs[_trans];

	if ( _tableLayout_trans_actions[_trans] != 0 ) {
		_acts = _tableLayout_trans_actions[_trans];
		_nacts = (int) _tableLayout_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _tableLayout_actions[_acts++] )
			{
	case 0:
// line 34 "TableLayoutParser.rl"
	{ s = p; }
	break;
	case 1:
// line 35 "TableLayoutParser.rl"
	{
				name = new String(data, s, p - s);
				s = p;
			}
	break;
	case 2:
// line 39 "TableLayoutParser.rl"
	{
				values.add(new String(data, s, p - s));
			}
	break;
	case 3:
// line 42 "TableLayoutParser.rl"
	{
				System.out.println("tableProperty: " + name + " = " + values);
				setTableProperty(table, name, values);
			}
	break;
	case 4:
// line 46 "TableLayoutParser.rl"
	{
				System.out.println("cellDefaultProperty: " + name + " = " + values);
				setCellProperty(table.getCellDefaults(), name, values);
			}
	break;
	case 5:
// line 50 "TableLayoutParser.rl"
	{
				table.getColumnDefaults(table.getColumnDefaults().size());
			}
	break;
	case 6:
// line 53 "TableLayoutParser.rl"
	{
				System.out.println("columnDefaultProperty: " + name + " = " + values);
				setCellProperty(table.getColumnDefaults(table.getColumnDefaults().size() - 1), name, values);
			}
	break;
	case 7:
// line 57 "TableLayoutParser.rl"
	{
				System.out.println("startRow");
				rowDefaults = table.startRow();
			}
	break;
	case 8:
// line 61 "TableLayoutParser.rl"
	{
				System.out.println("rowDefaultValue: " + name + " = " + values);
				setCellProperty(rowDefaults, name, values);
			}
	break;
	case 9:
// line 65 "TableLayoutParser.rl"
	{
				String className = p > s ? new String(data, s, p - s) : null;
				System.out.println("addWidget: " + name + " " + className);
				Object widget = null;
				if (className == null) {
					if (!name.isEmpty()) {
						widget = table.getWidget(name);
						if (widget == null) throw new IllegalArgumentException("Widget not found with name: " + name);
					}
				} else {
					try {
						widget = Class.forName(className).newInstance();
					} catch (Exception ex) {
						throw new RuntimeException("Error creating instance of class: " + className, ex);
					}
					table.set(name, widget);
				}
				cell = table.add(widget);
			}
	break;
	case 10:
// line 84 "TableLayoutParser.rl"
	{
				System.out.println("addLabel: " + new String(data, s, p - s));
				Object widget = table.newLabel(new String(data, s, p - s));
				cell = table.add(widget);
			}
	break;
	case 11:
// line 89 "TableLayoutParser.rl"
	{
				System.out.println("cellProperty: " + name + " = " + values);
				setCellProperty(cell, name, values);
			}
	break;
	case 12:
// line 93 "TableLayoutParser.rl"
	{
				System.out.println("startTable");
				cell = null;
				BaseTableLayout parentTable = table;
				tables.add(parentTable);
				table = parentTable.newTableLayout();
				table.setAll(parentTable.nameToWidget);
				{
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			{stack[top++] = cs; cs = 3; _goto_targ = 2; if (true) continue _goto;}}
			}
	break;
	case 13:
// line 102 "TableLayoutParser.rl"
	{
				if (!tables.isEmpty()) {
					System.out.println("endTable");
					BaseTableLayout childTable = table;
					table = tables.remove(tables.size() - 1);
					cell = table.add(childTable);
					{cs = stack[--top];_goto_targ = 2; if (true) continue _goto;}
				}
			}
	break;
	case 14:
// line 111 "TableLayoutParser.rl"
	{
				System.out.println("setTitle: " + new String(data, s, p - s));
				// BOZO
			}
	break;
	case 15:
// line 115 "TableLayoutParser.rl"
	{
				System.out.println("widgetProperty: " + name + " = " + values);
				values.clear();
			}
	break;
	case 16:
// line 119 "TableLayoutParser.rl"
	{
				System.out.println("widgetLayoutString: " + new String(data, s, p - s));
			}
	break;
	case 17:
// line 135 "TableLayoutParser.rl"
	{ {
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			{stack[top++] = cs; cs = 69; _goto_targ = 2; if (true) continue _goto;}} }
	break;
	case 18:
// line 153 "TableLayoutParser.rl"
	{ {cs = stack[--top];_goto_targ = 2; if (true) continue _goto;} }
	break;
// line 246 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _tableLayout_eof_actions[cs];
	int __nacts = (int) _tableLayout_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _tableLayout_actions[__acts++] ) {
	case 13:
// line 102 "TableLayoutParser.rl"
	{
				if (!tables.isEmpty()) {
					System.out.println("endTable");
					BaseTableLayout childTable = table;
					table = tables.remove(tables.size() - 1);
					cell = table.add(childTable);
					{cs = stack[--top];_goto_targ = 2; if (true) continue _goto;}
				}
			}
	break;
// line 279 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			throw new IllegalArgumentException("Error parsing layout near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0) 
			throw new IllegalArgumentException("Error parsing layout, missing closing curly brace: " + input, parseRuntimeEx);
	}

	
// line 289 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
private static byte[] init__tableLayout_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    5,    1,    7,    1,
	    9,    1,   10,    1,   12,    1,   13,    1,   14,    1,   16,    1,
	   17,    1,   18,    2,    0,    1,    2,    0,    2,    2,    0,   10,
	    2,    0,   14,    2,    1,    3,    2,    1,    4,    2,    1,    6,
	    2,    1,    8,    2,    1,    9,    2,    1,   11,    2,    2,    3,
	    2,    2,    4,    2,    2,    6,    2,    2,    8,    2,    2,   11,
	    2,    2,   15,    2,    5,    0,    2,    7,    0,    2,    7,   12,
	    2,   10,   16,    2,   16,   12,    2,   16,   17,    2,   16,   18,
	    3,    0,    1,    9,    3,    0,    2,    3,    3,    0,    2,    4,
	    3,    0,    2,    6,    3,    0,    2,    8,    3,    0,    2,   11,
	    3,    0,   10,   16,    3,    1,    3,   12,    3,    1,    4,   12,
	    3,    1,    6,   12,    3,    1,    8,   12,    3,    1,   11,   12,
	    3,    1,   11,   17,    3,    2,    3,   12,    3,    2,    4,   12,
	    3,    2,    6,   12,    3,    2,    8,   12,    3,    2,   11,   12,
	    3,    2,   11,   17,    3,    2,   15,   12,    3,    2,   15,   18,
	    4,    0,    2,    3,   12,    4,    0,    2,    4,   12,    4,    0,
	    2,    6,   12,    4,    0,    2,    8,   12,    4,    0,    2,   11,
	   12,    4,    0,    2,   11,   17
	};
}

private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();


private static short[] init__tableLayout_key_offsets_0()
{
	return new short [] {
	    0,    0,   16,   20,   36,   37,   38,   54,   62,   63,   64,   76,
	   88,  101,  114,  124,  130,  144,  151,  164,  177,  179,  181,  182,
	  183,  199,  215,  225,  231,  248,  263,  273,  289,  305,  306,  307,
	  316,  331,  346,  356,  362,  378,  392,  401,  410,  425,  440,  450,
	  456,  472,  486,  500,  514,  523,  538,  553,  562,  577,  592,  608,
	  624,  634,  640,  657,  672,  682,  698,  714,  715,  716,  729,  730,
	  731,  746,  747,  748,  755,  759,  761,  763,  764,  765,  779,  780,
	  781,  795,  805,  809,  818,  831,  834,  837
	};
}

private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();


private static char[] init__tableLayout_trans_keys_0()
{
	return new char [] {
	   32,   39,   42,   45,   60,   91,  123,  124,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,  123,    9,   13,   32,   39,   42,   45,
	   60,   91,  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,
	   39,   39,   32,   39,   40,   45,   60,   91,  123,  125,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   39,   45,   91,  123,  125,
	    9,   13,   45,   45,   32,   39,   91,  123,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   39,   91,  123,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   39,   58,   91,  123,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   39,   58,   91,  123,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   45,    9,   13,   48,   57,
	   65,   90,   97,  122,   48,   57,   65,   90,   97,  122,   32,   37,
	   39,   44,   91,  123,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   39,   44,   91,  123,    9,   13,   32,   39,   44,   91,  123,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,   44,   91,
	  123,    9,   13,   48,   57,   65,   90,   97,  122,   58,   93,   58,
	   93,   93,   93,   32,   39,   40,   45,   58,   91,  123,  125,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   39,   40,   45,   58,
	   91,  123,  125,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   45,    9,   13,   48,   57,   65,   90,   97,  122,   48,   57,   65,
	   90,   97,  122,   32,   37,   39,   40,   44,   45,   91,  123,  125,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,   40,   45,
	   91,  123,  125,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   39,   40,   44,   45,   91,  123,  125,    9,   13,   32,   39,   40,
	   44,   45,   91,  123,  125,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   39,   40,   44,   45,   91,  123,  125,    9,   13,   48,
	   57,   65,   90,   97,  122,   62,   62,   32,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   39,   45,   58,   91,  123,  124,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   39,   45,   58,   91,
	  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,   32,   45,
	    9,   13,   48,   57,   65,   90,   97,  122,   48,   57,   65,   90,
	   97,  122,   32,   37,   39,   44,   45,   91,  123,  124,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   39,   45,   91,  123,  124,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   39,   45,   58,   91,  123,  124,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   39,   45,   58,   91,  123,  124,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   45,    9,   13,
	   48,   57,   65,   90,   97,  122,   48,   57,   65,   90,   97,  122,
	   32,   37,   39,   44,   45,   91,  123,  124,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   39,   45,   91,  123,  124,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   39,   45,   91,  123,  124,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,   45,   91,
	  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,
	   44,   45,   91,  123,  124,    9,   13,   32,   39,   44,   45,   91,
	  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,
	   44,   45,   91,  123,  124,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   39,   44,   45,   91,  123,  124,    9,   13,   32,   39,
	   44,   45,   91,  123,  124,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   39,   44,   45,   91,  123,  124,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   39,   42,   45,   58,   91,  123,  124,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,   42,   45,
	   58,   91,  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   45,    9,   13,   48,   57,   65,   90,   97,  122,   48,   57,
	   65,   90,   97,  122,   32,   37,   39,   42,   44,   45,   91,  123,
	  124,    9,   13,   48,   57,   65,   90,   97,  122,   32,   39,   42,
	   45,   91,  123,  124,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   39,   42,   44,   45,   91,  123,  124,    9,   13,   32,   39,
	   42,   44,   45,   91,  123,  124,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   39,   42,   44,   45,   91,  123,  124,    9,   13,
	   48,   57,   65,   90,   97,  122,   62,   62,   32,   39,   41,   91,
	  123,    9,   13,   48,   57,   65,   90,   97,  122,   39,   39,   32,
	   39,   40,   41,   60,   91,  123,    9,   13,   48,   57,   65,   90,
	   97,  122,   39,   39,   32,   39,   41,   91,  123,    9,   13,   32,
	   41,    9,   13,   58,   93,   58,   93,   93,   93,   32,   39,   40,
	   41,   91,  123,    9,   13,   48,   57,   65,   90,   97,  122,   62,
	   62,   32,   39,   40,   41,   91,  123,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   58,    9,   13,   32,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   39,   41,   91,  123,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,    9,   13,   32,    9,   13,    0
	};
}

private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();


private static byte[] init__tableLayout_single_lengths_0()
{
	return new byte [] {
	    0,    8,    2,    8,    1,    1,    8,    6,    1,    1,    4,    4,
	    5,    5,    2,    0,    6,    5,    5,    5,    2,    2,    1,    1,
	    8,    8,    2,    0,    9,    7,    8,    8,    8,    1,    1,    1,
	    7,    7,    2,    0,    8,    6,    1,    1,    7,    7,    2,    0,
	    8,    6,    6,    6,    7,    7,    7,    7,    7,    7,    8,    8,
	    2,    0,    9,    7,    8,    8,    8,    1,    1,    5,    1,    1,
	    7,    1,    1,    5,    2,    2,    2,    1,    1,    6,    1,    1,
	    6,    2,    2,    1,    5,    1,    1,    0
	};
}

private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();


private static byte[] init__tableLayout_range_lengths_0()
{
	return new byte [] {
	    0,    4,    1,    4,    0,    0,    4,    1,    0,    0,    4,    4,
	    4,    4,    4,    3,    4,    1,    4,    4,    0,    0,    0,    0,
	    4,    4,    4,    3,    4,    4,    1,    4,    4,    0,    0,    4,
	    4,    4,    4,    3,    4,    4,    4,    4,    4,    4,    4,    3,
	    4,    4,    4,    4,    1,    4,    4,    1,    4,    4,    4,    4,
	    4,    3,    4,    4,    1,    4,    4,    0,    0,    4,    0,    0,
	    4,    0,    0,    1,    1,    0,    0,    0,    0,    4,    0,    0,
	    4,    4,    1,    4,    4,    1,    1,    0
	};
}

private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();


private static short[] init__tableLayout_index_offsets_0()
{
	return new short [] {
	    0,    0,   13,   17,   30,   32,   34,   47,   55,   57,   59,   68,
	   77,   87,   97,  104,  108,  119,  126,  136,  146,  149,  152,  154,
	  156,  169,  182,  189,  193,  207,  219,  229,  242,  255,  257,  259,
	  265,  277,  289,  296,  300,  313,  324,  330,  336,  348,  360,  367,
	  371,  384,  395,  406,  417,  426,  438,  450,  459,  471,  483,  496,
	  509,  516,  520,  534,  546,  556,  569,  582,  584,  586,  596,  598,
	  600,  612,  614,  616,  623,  627,  630,  633,  635,  637,  648,  650,
	  652,  663,  670,  674,  680,  690,  693,  696
	};
}

private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();


private static byte[] init__tableLayout_trans_targs_0()
{
	return new byte [] {
	    2,    4,   35,    8,   67,   20,    3,   42,    2,   58,   58,   58,
	    0,    2,    3,    2,    0,    3,    4,   35,    8,   67,   20,    6,
	   42,    3,   58,   58,   58,    0,    6,    5,    6,    5,    6,    4,
	    7,    8,   33,   20,    6,   89,    6,   24,   24,   24,    0,    7,
	    4,    8,   20,    6,   89,    7,    0,    9,    0,   10,    0,   11,
	    4,   20,    6,   11,   12,   12,   12,    0,   11,    4,   20,    6,
	   11,   12,   12,   12,    0,   13,    4,   14,   20,    6,   13,   12,
	   12,   12,    0,   13,    4,   14,   20,    6,   13,   12,   12,   12,
	    0,   14,   15,   14,   16,   16,   16,    0,   16,   16,   16,    0,
	   11,   17,    4,   18,   20,    6,   11,   16,   16,   16,    0,   11,
	    4,   18,   20,    6,   11,    0,   11,    4,   18,   20,    6,   11,
	   19,   19,   19,    0,   11,    4,   18,   20,    6,   11,   19,   19,
	   19,    0,   22,    6,   21,   22,    6,   21,    0,   23,    6,   23,
	   25,    4,    7,    8,   26,   20,    6,   89,   25,   24,   24,   24,
	    0,   25,    4,    7,    8,   26,   20,    6,   89,   25,   24,   24,
	   24,    0,   26,   27,   26,   28,   28,   28,    0,   28,   28,   28,
	    0,   29,   30,    4,    7,   31,    8,   20,    6,   89,   29,   28,
	   28,   28,    0,   29,    4,    7,    8,   20,    6,   89,   29,   24,
	   24,   24,    0,   29,    4,    7,   31,    8,   20,    6,   89,   29,
	    0,   29,    4,    7,   31,    8,   20,    6,   89,   29,   32,   32,
	   32,    0,   29,    4,    7,   31,    8,   20,    6,   89,   29,   32,
	   32,   32,    0,   29,   34,   29,   34,   35,   35,   36,   36,   36,
	    0,   37,    4,    8,   38,   20,    6,   42,   37,   36,   36,   36,
	    0,   37,    4,    8,   38,   20,    6,   42,   37,   36,   36,   36,
	    0,   38,   39,   38,   40,   40,   40,    0,   40,   40,   40,    0,
	   41,   55,    4,   56,    8,   20,    6,   42,   41,   40,   40,   40,
	    0,   41,    4,    8,   20,    6,   42,   41,   36,   36,   36,    0,
	   43,   43,   44,   44,   44,    0,   43,   43,   44,   44,   44,    0,
	   45,    4,    8,   46,   20,    6,   50,   45,   44,   44,   44,    0,
	   45,    4,    8,   46,   20,    6,   50,   45,   44,   44,   44,    0,
	   46,   47,   46,   48,   48,   48,    0,   48,   48,   48,    0,   49,
	   52,    4,   53,    8,   20,    6,   50,   49,   48,   48,   48,    0,
	   49,    4,    8,   20,    6,   50,   49,   44,   44,   44,    0,   51,
	    4,    8,   20,    6,   42,   51,   44,   44,   44,    0,   51,    4,
	    8,   20,    6,   42,   51,   44,   44,   44,    0,   49,    4,   53,
	    8,   20,    6,   50,   49,    0,   49,    4,   53,    8,   20,    6,
	   50,   49,   54,   54,   54,    0,   49,    4,   53,    8,   20,    6,
	   50,   49,   54,   54,   54,    0,   41,    4,   56,    8,   20,    6,
	   42,   41,    0,   41,    4,   56,    8,   20,    6,   42,   41,   57,
	   57,   57,    0,   41,    4,   56,    8,   20,    6,   42,   41,   57,
	   57,   57,    0,   59,    4,   35,    8,   60,   20,    6,   42,   59,
	   58,   58,   58,    0,   59,    4,   35,    8,   60,   20,    6,   42,
	   59,   58,   58,   58,    0,   60,   61,   60,   62,   62,   62,    0,
	   62,   62,   62,    0,   63,   64,    4,   35,   65,    8,   20,    6,
	   42,   63,   62,   62,   62,    0,   63,    4,   35,    8,   20,    6,
	   42,   63,   58,   58,   58,    0,   63,    4,   35,   65,    8,   20,
	    6,   42,   63,    0,   63,    4,   35,   65,    8,   20,    6,   42,
	   63,   66,   66,   66,    0,   63,    4,   35,   65,    8,   20,    6,
	   42,   63,   66,   66,   66,    0,   63,   68,   63,   68,   69,   70,
	   91,   77,   72,   69,   85,   85,   85,    0,   72,   71,   72,   71,
	   72,   73,   75,   91,   82,   77,   72,   72,   81,   81,   81,    0,
	   72,   74,   72,   74,   76,   70,   91,   77,   72,   76,    0,   76,
	   91,   76,    0,   79,   72,   78,   79,   72,   78,    0,   80,   72,
	   80,   76,   70,   75,   91,   77,   72,   76,   81,   81,   81,    0,
	   84,   83,   84,   83,   84,   73,   75,   91,   77,   72,   84,   81,
	   81,   81,    0,   86,   87,   86,   85,   85,   85,    0,   86,   87,
	   86,    0,   87,   87,   88,   88,   88,    0,   69,   70,   91,   77,
	   72,   69,   88,   88,   88,    0,   90,   90,    0,   90,   90,    0,
	    0,    0
	};
}

private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();


private static short[] init__tableLayout_trans_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
	    0,    0,    1,    1,    1,    0,   33,    1,   13,    0,    0,    0,
	   23,    0,    0,    0,   15,    0,    0,    1,    1,    1,    0,    0,
	    0,    0,    0,   15,    0,    0,    0,    0,    0,    0,    0,    9,
	    9,    9,   81,    9,   78,   78,   78,    0,    0,    0,    0,   15,
	    0,    1,    1,    1,    0,   48,   48,    3,   48,  136,   48,    0,
	    0,    0,    0,    0,    0,    0,    0,   15,    0,    1,    1,    1,
	    0,    0,    1,    0,    1,    1,    1,    0,    0,    0,    0,    0,
	   66,    0,   66,    5,   66,  160,   66,    0,    0,    0,    0,   66,
	   66,    5,   66,  160,   66,    0,  112,  112,   30,  112,  195,  112,
	    1,    1,    1,    0,   66,   66,    5,   66,  160,   66,    0,    0,
	    0,    0,   27,   96,    1,    3,   51,    0,    0,    1,   11,    0,
	   54,   54,  144,   54,    3,   54,  140,   54,   54,    0,    0,    0,
	    0,    0,    0,   23,    0,    0,    0,   15,    0,    0,    1,    1,
	    1,    0,    0,    1,    0,    1,    1,    1,    0,    0,    0,    0,
	    0,   69,    0,   69,  168,    5,   69,   69,  164,   69,   69,    0,
	    0,    0,    0,    0,    0,   23,    0,    0,   15,    0,    0,    1,
	    1,    1,    0,   69,   69,  168,    5,   69,   69,  164,   69,   69,
	    0,  116,  116,  205,   30,  116,  116,  200,  116,  116,    1,    1,
	    1,    0,   69,   69,  168,    5,   69,   69,  164,   69,   69,    0,
	    0,    0,    0,   36,    1,   19,    0,    0,    0,    1,    1,    1,
	    0,   42,   42,   42,    3,   42,  128,   42,   42,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,    0,    0,    1,    1,    1,
	    0,    0,    1,    0,    1,    1,    1,    0,    0,    0,    0,    0,
	   60,    0,   60,    5,   60,   60,  152,   60,   60,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,    0,    0,    1,    1,    1,    0,
	    7,    7,   75,   75,   75,    0,    0,    0,    1,    1,    1,    0,
	   45,   45,   45,    3,   45,  132,   45,   45,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   15,    0,    0,    1,    1,    1,    0,
	    0,    1,    0,    1,    1,    1,    0,    0,    0,    0,    0,   63,
	    0,   63,    5,   63,   63,  156,   63,   63,    0,    0,    0,    0,
	    0,    0,    0,    0,   15,    0,    0,    1,    1,    1,    0,    7,
	    0,    0,    0,   15,    0,    7,   75,   75,   75,    0,    0,    0,
	    0,    0,   15,    0,    0,    1,    1,    1,    0,   63,   63,    5,
	   63,   63,  156,   63,   63,    0,  108,  108,   30,  108,  108,  190,
	  108,  108,    1,    1,    1,    0,   63,   63,    5,   63,   63,  156,
	   63,   63,    0,    0,    0,    0,   60,   60,    5,   60,   60,  152,
	   60,   60,    0,  104,  104,   30,  104,  104,  185,  104,  104,    1,
	    1,    1,    0,   60,   60,    5,   60,   60,  152,   60,   60,    0,
	    0,    0,    0,   39,   39,   39,   39,    3,   39,  124,   39,   39,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,    0,
	    0,    1,    1,    1,    0,    0,    1,    0,    1,    1,    1,    0,
	    0,    0,    0,    0,   57,    0,   57,   57,    5,   57,   57,  148,
	   57,   57,    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
	    0,    0,    1,    1,    1,    0,   57,   57,   57,    5,   57,   57,
	  148,   57,   57,    0,  100,  100,  100,   30,  100,  100,  180,  100,
	  100,    1,    1,    1,    0,   57,   57,   57,    5,   57,   57,  148,
	   57,   57,    0,    0,    0,    0,   36,    1,   19,    0,    0,    0,
	   25,    0,   15,    0,    1,    1,    1,    0,   33,    1,   13,    0,
	    0,    0,   23,   25,    0,    0,   15,    0,    1,    1,    1,    0,
	  120,    1,   84,    0,    0,    0,   25,    0,   15,    0,    0,    0,
	   25,    0,    0,   27,   96,    1,    3,   51,    0,    0,    1,   11,
	    0,   21,   21,   90,   93,   21,   87,   21,    0,    0,    0,    0,
	   36,    1,   19,    0,    0,    0,   23,   25,    0,   15,    0,    1,
	    1,    1,    0,    3,    3,    3,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    1,    0,   72,   72,  176,   72,
	  172,   72,    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,
	    0,    0
	};
}

private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();


private static short[] init__tableLayout_eof_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,   17,    0,    0
	};
}

private static final short _tableLayout_eof_actions[] = init__tableLayout_eof_actions_0();


static final int tableLayout_start = 1;
static final int tableLayout_first_final = 89;
static final int tableLayout_error = 0;

static final int tableLayout_en_widgetProperties = 69;
static final int tableLayout_en_main = 1;
static final int tableLayout_en_main_table = 3;


// line 198 "TableLayoutParser.rl"

	static public void setTableProperty (BaseTableLayout table, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("size")) {
				switch (values.size()) {
				case 1:
					value = values.get(0);
					// BOZO - Fix table %.
					if (value.endsWith("%"))
						table.fillX = table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = table.height = Integer.parseInt(values.get(0));
					break;
				case 2:
					value = values.get(0);
					if (value.endsWith("%"))
						table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = Integer.parseInt(values.get(0));
					value = values.get(1);
					if (value.endsWith("%"))
						table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.height = Integer.parseInt(values.get(0));
					break;
				}

			} else if (name.equals("width")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.width = Integer.parseInt(value);

			} else if (name.equals("height")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.height = Integer.parseInt(value);

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) table.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) table.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) table.padLeft = Integer.parseInt(value);
					break;
				case 1:
					table.padTop = table.padLeft = table.padBottom = table.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					table.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					table.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					table.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r"))
					table.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				table.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						table.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						table.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						table.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						table.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						table.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("debug")) {
				if (values.size() == 0) table.debug = "all,";
				for (int i = 0, n = values.size(); i < n; i++)
					table.debug += values.get(i) + ",";

			} else
				throw new IllegalArgumentException("Unknown property: " + name);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static public void setCellProperty (Cell c, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("expand")) {
				if (values.size() == 0) c.expandWidth = c.expandHeight = 1;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.expandWidth = 1;
					else if (value.equals("y"))
						c.expandHeight = 1;
					else if (value.equals("false"))
						c.expandWidth = c.expandHeight = 0;
					else {
						switch (i) {
						case 0:
							c.expandWidth = Integer.parseInt(value);
							break;
						case 1:
							c.expandHeight = Integer.parseInt(value);
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("fill")) {
				if (values.size() == 0) c.fillWidth = c.fillHeight = 1f;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.fillWidth = 1f;
					else if (value.equals("y")) //
						c.fillHeight = 1f;
					else {
						switch (i) {
						case 0:
							c.fillWidth = Integer.parseInt(value) / 100f;
							break;
						case 1:
							c.fillHeight = Integer.parseInt(value) / 100f;
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("size")) {
				switch (values.size()) {
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("width")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxWidth = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefWidth = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("height")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxHeight = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefHeight = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("spacing") || name.equals("space")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.spaceRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.spaceBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.spaceTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.spaceLeft = Integer.parseInt(value);
					break;
				case 1:
					c.spaceTop = c.spaceLeft = c.spaceBottom = c.spaceRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.padLeft = Integer.parseInt(value);
					break;
				case 1:
					c.padTop = c.padLeft = c.padBottom = c.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					c.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.startsWith("spacing") || name.startsWith("space")) {
				name = name.replace("spacing", "").replace("space", "");
				if (name.equals("top") || name.equals("t"))
					c.spaceTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.spaceLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.spaceBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.spaceRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				c.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						c.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						c.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						c.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						c.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						c.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("ignore")) {
				c.ignore = values.size() == 0 ? true : Boolean.valueOf(values.get(0));

			} else if (name.equals("colspan")) {
				c.colspan = Integer.parseInt(values.get(0));

			} else if (name.equals("uniform")) {
				if (values.size() == 0) c.uniformWidth = c.uniformHeight = true;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.uniformWidth = true;
					else if (value.equals("y"))
						c.uniformHeight = true;
					else if (value.equals("false"))
						c.uniformHeight = c.uniformHeight = null;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property.");
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	public static void main (String args[]) {
		BaseTableLayout table = new BaseTableLayout();
		table.set("button", 123);
		table.set("textbox", 345);
		table.set("textbox2", 345);
		table.parse("<Meow>" //
			+ "width:400 height:400 " //
			+ "[button:java.lang.String] <Booyah> size:80,80 align:left spacing:10 ( bean:true [button] 'moo' ) \n " //
			+ "{ [textbox] [textbox] } " //
			+ "[textbox]\nalign:right,bottom \n ");
	}
}
