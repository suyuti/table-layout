// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated from Ragel.

package com.esotericsoftware.tablelayout;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;

import com.esotericsoftware.tablelayout.BaseTableLayout.Cell;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, Cell cell, String input) {
		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		String widgetLayoutString = null;

		if (cell != null) {
			// BOZO - Set cell state.
		}

		RuntimeException parseRuntimeEx = null;
		try {

			// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

			// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
									// line 42 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
									// line 43 "TableLayoutParser.rl"
								{
									name = new String(data, s, p - s);
									s = p;
								}
									break;
								case 2:
									// line 47 "TableLayoutParser.rl"
								{
									values.add(new String(data, s, p - s));
								}
									break;
								case 3:
									// line 50 "TableLayoutParser.rl"
								{
									System.out.println("tableProperty: " + name + " = " + values);
									setTableProperty((BaseTableLayout)parent, name, values);
								}
									break;
								case 4:
									// line 54 "TableLayoutParser.rl"
								{
									System.out.println("cellDefaultProperty: " + name + " = " + values);
									setCellProperty(((BaseTableLayout)parent).getCellDefaults(), name, values);
								}
									break;
								case 5:
									// line 58 "TableLayoutParser.rl"
								{
									int column = ((BaseTableLayout)parent).getColumnDefaults().size();
									columnDefaults = ((BaseTableLayout)parent).getColumnDefaults(column);
								}
									break;
								case 6:
									// line 62 "TableLayoutParser.rl"
								{
									System.out.println("columnDefaultProperty: " + name + " = " + values);
									setCellProperty(columnDefaults, name, values);
								}
									break;
								case 7:
									// line 66 "TableLayoutParser.rl"
								{
									System.out.println("startRow");
									rowDefaults = ((BaseTableLayout)parent).startRow();
								}
									break;
								case 8:
									// line 70 "TableLayoutParser.rl"
								{
									System.out.println("rowDefaultValue: " + name + " = " + values);
									setCellProperty(rowDefaults, name, values);
								}
									break;
								case 9:
									// line 74 "TableLayoutParser.rl"
								{
									System.out.println("cellProperty: " + name + " = " + values);
									setCellProperty(cell, name, values);
								}
									break;
								case 10:
									// line 78 "TableLayoutParser.rl"
								{
									System.out.println("setTitle: " + new String(data, s, p - s));
									table.setTitle(parent, new String(data, s, p - s));
								}
									break;
								case 11:
									// line 82 "TableLayoutParser.rl"
								{
									System.out.println("widgetLayoutString: " + new String(data, s, p - s));
									widgetLayoutString = new String(data, s, p - s);
								}
									break;
								case 12:
									// line 86 "TableLayoutParser.rl"
								{
									String className = p > s ? new String(data, s, p - s) : null;
									System.out.println("newWidget: " + name + " " + className);
									widget = null;
									if (className == null) {
										if (!name.isEmpty()) {
											widget = table.getWidget(name);
											if (widget == null) {
												// Try the widget name as a class name.
												try {
													widget = table.wrap(newWidget(name));
												} catch (Exception ex) {
													throw new IllegalArgumentException("Widget not found with name: " + name);
												}
											}
										}
									} else {
										try {
											widget = table.wrap(newWidget(className));
										} catch (Exception ex) {
											throw new RuntimeException("Error creating instance of class: " + className, ex);
										}
										if (!name.isEmpty()) table.setName(name, widget);
									}
								}
									break;
								case 13:
									// line 111 "TableLayoutParser.rl"
								{
									System.out.println("newLabel: " + new String(data, s, p - s));
									widget = table.newLabel(new String(data, s, p - s));
								}
									break;
								case 14:
									// line 115 "TableLayoutParser.rl"
								{
									System.out.println("startTable");
									parents.add(parent);
									parent = table.newTableLayout();
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 76;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 15:
									// line 123 "TableLayoutParser.rl"
								{
									if (!parents.isEmpty()) {
										System.out.println("endTable");
										widget = parent;
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 16:
									// line 131 "TableLayoutParser.rl"
								{
									System.out.println("startWidgetSection");
									parents.add(parent);
									parent = widget;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 77;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 17:
									// line 138 "TableLayoutParser.rl"
								{
									System.out.println("endWidgetSection");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 18:
									// line 144 "TableLayoutParser.rl"
								{
									System.out.println("addCell");
									cell = ((BaseTableLayout)parent).add(table.wrap(widget));
								}
									break;
								case 19:
									// line 148 "TableLayoutParser.rl"
								{
									System.out.println("addWidget");
									table.addChild(parent, table.wrap(widget), widgetLayoutString);
								}
									break;
								case 20:
									// line 152 "TableLayoutParser.rl"
								{
									System.out.println("widgetProperty: " + name + " = " + values);
									try {
										try {
											invokeMethod(parent, name, values);
										} catch (NoSuchMethodException ex1) {
											try {
												invokeMethod(parent, "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1),
													values);
											} catch (NoSuchMethodException ex2) {
												try {
													Field field = parent.getClass().getField(name);
													Object value = convertType(parent, values.get(0), field.getType());
													if (value != null) field.set(parent, value);
												} catch (Exception ex3) {
													throw new RuntimeException("No method, bean property, or field found.");
												}
											}
										}
									} catch (RuntimeException ex) {
										throw new RuntimeException("Error setting property: " + name + "\nClass: " + parent.getClass()
											+ "\nValues: " + values, ex);
									}
									values.clear();
								}
									break;
								// line 297 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
						if (p == eof) {
							int __acts = _tableLayout_eof_actions[cs];
							int __nacts = (int)_tableLayout_actions[__acts++];
							while (__nacts-- > 0) {
								switch (_tableLayout_actions[__acts++]) {
								case 15:
									// line 123 "TableLayoutParser.rl"
								{
									if (!parents.isEmpty()) {
										System.out.println("endTable");
										widget = parent;
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								// line 329 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 5:
					}
					break;
				}
			}

			// line 236 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			throw new IllegalArgumentException("Error parsing layout near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0)
			throw new IllegalArgumentException("Error parsing layout (possibly an unmatched brace or quote): " + input,
				parseRuntimeEx);
	}

	// line 339 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15,
			1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 2, 0, 1, 2, 0, 2, 2, 0, 10, 2, 0, 13, 2, 1, 3, 2, 1, 4, 2, 1, 6, 2, 1, 8, 2, 1, 9, 2,
			1, 12, 2, 1, 20, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 9, 2, 2, 20, 2, 3, 14, 2, 4, 14, 2, 5, 0, 2, 5, 14, 2, 6, 14,
			2, 7, 0, 2, 7, 14, 2, 8, 14, 2, 9, 14, 2, 9, 16, 2, 11, 19, 2, 18, 0, 2, 18, 14, 2, 18, 16, 2, 19, 14, 2, 19, 16, 2, 19,
			17, 2, 20, 14, 2, 20, 17, 3, 0, 1, 12, 3, 1, 3, 14, 3, 1, 4, 14, 3, 1, 6, 14, 3, 1, 8, 14, 3, 1, 9, 14, 3, 1, 9, 16, 3,
			1, 20, 14, 3, 1, 20, 17, 3, 2, 3, 14, 3, 2, 4, 14, 3, 2, 6, 14, 3, 2, 8, 14, 3, 2, 9, 14, 3, 2, 9, 16, 3, 2, 20, 14, 3,
			2, 20, 17, 3, 11, 19, 14, 3, 11, 19, 16, 3, 11, 19, 17};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 16, 17, 18, 34, 50, 58, 59, 60, 72, 84, 97, 110, 122, 123, 124, 131, 140, 147, 162, 169, 174,
			179, 183, 184, 188, 204, 220, 232, 233, 234, 244, 259, 268, 275, 293, 303, 304, 305, 314, 329, 344, 356, 357, 358, 367,
			381, 395, 409, 424, 439, 451, 452, 453, 462, 471, 478, 495, 504, 513, 520, 537, 546, 562, 578, 590, 591, 592, 602, 617,
			626, 633, 651, 661, 662, 663, 679, 692, 693, 694, 709, 716, 721, 726, 730, 731, 735, 749, 757, 758, 759, 773, 787, 801,
			813, 814, 815, 823, 832, 839, 855, 863, 866, 869};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 60, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 45, 60, 91, 123,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91,
			123, 125, 9, 13, 45, 45, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97,
			122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			45, 46, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 91, 123, 9, 13, 39, 45, 46, 48, 57, 65, 90, 97, 122, 46, 48,
			57, 65, 90, 97, 122, 32, 37, 39, 44, 46, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 91, 123, 9, 13, 32, 58,
			93, 9, 13, 32, 58, 93, 9, 13, 32, 93, 9, 13, 93, 32, 93, 9, 13, 32, 39, 40, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90,
			97, 122, 32, 39, 40, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 9, 13, 48, 57, 65, 90, 97,
			122, 39, 39, 32, 39, 40, 44, 45, 91, 123, 125, 9, 13, 32, 39, 40, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 39,
			45, 46, 48, 57, 65, 90, 97, 122, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 91, 123, 125, 9, 13, 48, 57,
			65, 90, 97, 122, 32, 39, 40, 44, 45, 91, 123, 125, 9, 13, 62, 62, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58,
			91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45,
			46, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 45, 91, 123, 124, 9, 13, 48,
			57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57,
			65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48,
			57, 65, 90, 97, 122, 32, 39, 45, 46, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9, 13, 39,
			45, 46, 48, 57, 65, 90, 97, 122, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 91, 123, 124, 9, 13, 48, 57, 65,
			90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 39, 45, 46, 48, 57, 65, 90, 97, 122, 46, 48, 57, 65, 90, 97, 122, 32,
			37, 39, 44, 45, 46, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 42, 45,
			58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 45, 46, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 32, 39, 42, 45, 91, 123,
			124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 45, 46, 48, 57, 65, 90, 97, 122, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 42,
			44, 45, 46, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 62, 62, 32, 39, 42,
			45, 60, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32,
			39, 40, 41, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 91, 123, 9, 13, 32, 58, 93, 9, 13, 32, 58, 93, 9,
			13, 32, 93, 9, 13, 93, 32, 93, 9, 13, 32, 39, 40, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 41, 91, 123,
			9, 13, 62, 62, 32, 39, 40, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 91, 123, 9, 13, 48, 57, 65, 90,
			97, 122, 32, 39, 41, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 9, 13, 48, 57, 65, 90, 97, 122, 39,
			39, 32, 39, 41, 44, 91, 123, 9, 13, 39, 45, 46, 48, 57, 65, 90, 97, 122, 46, 48, 57, 65, 90, 97, 122, 32, 37, 39, 41,
			44, 46, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 44, 91, 123, 9, 13, 32, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 8, 1, 1, 8, 8, 6, 1, 1, 4, 4, 5, 5, 4, 1, 1, 5, 3, 1, 7, 5, 3, 3, 2, 1, 2, 8, 8, 4, 1, 1, 8, 7, 3, 1,
			10, 8, 1, 1, 1, 7, 7, 4, 1, 1, 7, 6, 6, 6, 7, 7, 4, 1, 1, 7, 3, 1, 9, 7, 3, 1, 9, 7, 8, 8, 4, 1, 1, 8, 7, 3, 1, 10, 8,
			1, 1, 8, 5, 1, 1, 7, 5, 3, 3, 2, 1, 2, 6, 6, 1, 1, 6, 6, 6, 4, 1, 1, 6, 3, 1, 8, 6, 1, 1, 0};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 0, 0, 4, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 1, 1, 0, 1, 4, 4, 4, 0, 0, 1, 4, 3, 3,
			4, 1, 0, 0, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 3, 3, 4, 1, 4, 4, 4, 0, 0, 1, 4, 3, 3, 4, 1, 0,
			0, 4, 4, 0, 0, 4, 1, 1, 1, 1, 0, 1, 4, 1, 0, 0, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 1, 0};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 13, 15, 17, 30, 43, 51, 53, 55, 64, 73, 83, 93, 102, 104, 106, 113, 120, 125, 137, 144, 149, 154,
			158, 160, 164, 177, 190, 199, 201, 203, 213, 225, 232, 237, 252, 262, 264, 266, 272, 284, 296, 305, 307, 309, 318, 329,
			340, 351, 363, 375, 384, 386, 388, 397, 404, 409, 423, 432, 439, 444, 458, 467, 480, 493, 502, 504, 506, 516, 528, 535,
			540, 555, 565, 567, 569, 582, 592, 594, 596, 608, 615, 620, 625, 629, 631, 635, 646, 654, 656, 658, 669, 680, 691, 700,
			702, 704, 712, 719, 724, 737, 745, 748, 751};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {1, 2, 39, 7, 74, 21, 76, 47, 1, 63, 63, 63, 0, 4, 3, 4, 3, 5, 2, 6, 7, 37, 21, 4, 102, 5, 26, 26, 26, 0,
			5, 2, 6, 7, 37, 21, 4, 102, 5, 26, 26, 26, 0, 6, 2, 7, 21, 4, 102, 6, 0, 8, 0, 9, 0, 10, 2, 21, 4, 10, 11, 11, 11, 0,
			10, 2, 21, 4, 10, 11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 13, 14, 18,
			19, 13, 19, 19, 19, 0, 16, 15, 16, 15, 10, 2, 17, 21, 4, 10, 0, 14, 18, 19, 19, 19, 19, 0, 19, 19, 19, 19, 0, 10, 20, 2,
			17, 19, 21, 4, 10, 19, 19, 19, 0, 10, 2, 17, 21, 4, 10, 0, 21, 23, 4, 21, 22, 22, 23, 4, 22, 22, 25, 0, 25, 24, 4, 24,
			25, 4, 25, 24, 27, 2, 6, 7, 28, 21, 4, 102, 27, 26, 26, 26, 0, 27, 2, 6, 7, 28, 21, 4, 102, 27, 26, 26, 26, 0, 28, 29,
			34, 35, 28, 35, 35, 35, 0, 31, 30, 31, 30, 32, 2, 6, 33, 7, 21, 4, 102, 32, 0, 32, 2, 6, 7, 21, 4, 102, 32, 26, 26, 26,
			0, 29, 34, 35, 35, 35, 35, 0, 35, 35, 35, 35, 0, 32, 36, 2, 6, 33, 7, 35, 21, 4, 102, 32, 35, 35, 35, 0, 32, 2, 6, 33,
			7, 21, 4, 102, 32, 0, 32, 38, 32, 38, 39, 39, 40, 40, 40, 0, 41, 2, 7, 42, 21, 4, 47, 41, 40, 40, 40, 0, 41, 2, 7, 42,
			21, 4, 47, 41, 40, 40, 40, 0, 42, 43, 60, 61, 42, 61, 61, 61, 0, 45, 44, 45, 44, 46, 2, 59, 7, 21, 4, 47, 46, 0, 46, 2,
			7, 21, 4, 47, 46, 40, 40, 40, 0, 48, 2, 7, 21, 4, 47, 48, 49, 49, 49, 0, 48, 2, 7, 21, 4, 47, 48, 49, 49, 49, 0, 50, 2,
			7, 51, 21, 4, 47, 50, 49, 49, 49, 0, 50, 2, 7, 51, 21, 4, 47, 50, 49, 49, 49, 0, 51, 52, 56, 57, 51, 57, 57, 57, 0, 54,
			53, 54, 53, 48, 2, 55, 7, 21, 4, 47, 48, 0, 52, 56, 57, 57, 57, 57, 0, 57, 57, 57, 57, 0, 48, 58, 2, 55, 7, 57, 21, 4,
			47, 48, 57, 57, 57, 0, 48, 2, 55, 7, 21, 4, 47, 48, 0, 43, 60, 61, 61, 61, 61, 0, 61, 61, 61, 61, 0, 46, 62, 2, 59, 7,
			61, 21, 4, 47, 46, 61, 61, 61, 0, 46, 2, 59, 7, 21, 4, 47, 46, 0, 64, 2, 39, 7, 65, 21, 4, 47, 64, 63, 63, 63, 0, 64, 2,
			39, 7, 65, 21, 4, 47, 64, 63, 63, 63, 0, 65, 66, 71, 72, 65, 72, 72, 72, 0, 68, 67, 68, 67, 69, 2, 39, 70, 7, 21, 4, 47,
			69, 0, 69, 2, 39, 7, 21, 4, 47, 69, 63, 63, 63, 0, 66, 71, 72, 72, 72, 72, 0, 72, 72, 72, 72, 0, 69, 73, 2, 39, 70, 7,
			72, 21, 4, 47, 69, 72, 72, 72, 0, 69, 2, 39, 70, 7, 21, 4, 47, 69, 0, 69, 75, 69, 75, 76, 2, 39, 7, 74, 21, 4, 47, 76,
			63, 63, 63, 0, 77, 78, 104, 82, 80, 77, 92, 92, 92, 0, 80, 79, 80, 79, 80, 78, 81, 104, 89, 82, 80, 80, 87, 87, 87, 0,
			81, 78, 104, 82, 80, 81, 0, 82, 84, 80, 82, 83, 83, 84, 80, 83, 83, 86, 0, 86, 85, 80, 85, 86, 80, 86, 85, 88, 78, 81,
			104, 82, 80, 88, 87, 87, 87, 0, 88, 78, 81, 104, 82, 80, 88, 0, 91, 90, 91, 90, 91, 78, 81, 104, 82, 80, 91, 87, 87, 87,
			0, 93, 78, 104, 94, 82, 80, 93, 92, 92, 92, 0, 93, 78, 104, 94, 82, 80, 93, 92, 92, 92, 0, 94, 95, 99, 100, 94, 100,
			100, 100, 0, 97, 96, 97, 96, 77, 78, 104, 98, 82, 80, 77, 0, 95, 99, 100, 100, 100, 100, 0, 100, 100, 100, 100, 0, 77,
			101, 78, 104, 98, 100, 82, 80, 77, 100, 100, 100, 0, 77, 78, 104, 98, 82, 80, 77, 0, 103, 103, 0, 103, 103, 0, 0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 52, 1, 27, 0, 37, 37, 133, 37, 37, 37, 130, 37, 37, 127, 127,
			127, 0, 0, 0, 33, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 15, 15, 15, 112, 15, 109, 109,
			109, 0, 0, 0, 0, 29, 0, 1, 1, 1, 0, 64, 64, 3, 64, 167, 64, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1,
			1, 1, 0, 46, 1, 5, 0, 17, 17, 0, 17, 115, 17, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 85, 0, 85, 5, 0, 85, 199, 85, 0, 0,
			0, 0, 85, 85, 5, 85, 199, 85, 0, 43, 43, 151, 43, 1, 3, 3, 70, 3, 0, 1, 0, 1, 1, 25, 0, 1, 25, 1, 1, 67, 67, 175, 67, 3,
			67, 171, 67, 67, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 46, 1, 5, 0, 19, 19,
			121, 0, 19, 19, 118, 19, 19, 0, 0, 0, 33, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 88, 0, 88,
			207, 5, 88, 0, 88, 203, 88, 88, 0, 0, 0, 0, 88, 88, 207, 5, 88, 88, 203, 88, 88, 0, 49, 1, 21, 0, 0, 0, 1, 1, 1, 0, 58,
			58, 58, 3, 58, 159, 58, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 46, 1, 5, 0, 9,
			9, 0, 9, 9, 97, 9, 9, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 11, 11, 11, 11, 103, 11, 11, 100, 100, 100, 0, 0, 0, 0, 0,
			29, 0, 0, 1, 1, 1, 0, 61, 61, 61, 3, 61, 163, 61, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1,
			1, 1, 0, 46, 1, 5, 0, 13, 13, 0, 13, 13, 106, 13, 13, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 82, 0, 82, 5, 82, 0, 82,
			195, 82, 82, 0, 0, 0, 0, 82, 82, 5, 82, 82, 195, 82, 82, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 79, 0, 79, 5, 79, 0, 79,
			191, 79, 79, 0, 0, 0, 0, 79, 79, 5, 79, 79, 191, 79, 79, 0, 55, 55, 55, 55, 3, 55, 155, 55, 55, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 46, 1, 5, 0, 7, 7, 7, 0, 7, 7, 94, 7, 7, 0, 0, 0, 0, 0, 0, 29, 0,
			0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 76, 0, 76, 76, 5, 76, 0, 76, 187, 76, 76, 0, 0, 0, 0, 76, 76, 76, 5,
			76, 76, 187, 76, 76, 0, 49, 1, 21, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 1, 1, 1, 0, 0, 0, 35, 0, 29, 0, 1, 1, 1, 0, 52, 1, 27,
			0, 0, 39, 139, 142, 0, 39, 136, 0, 1, 1, 1, 0, 0, 0, 35, 0, 29, 0, 0, 43, 43, 151, 43, 1, 3, 3, 70, 3, 0, 1, 0, 1, 1,
			25, 0, 1, 25, 1, 1, 23, 124, 223, 227, 124, 219, 23, 0, 0, 0, 0, 0, 39, 139, 142, 39, 136, 0, 0, 49, 1, 21, 0, 0, 39,
			139, 142, 39, 136, 0, 1, 1, 1, 0, 73, 73, 183, 3, 73, 179, 73, 0, 0, 0, 0, 0, 0, 35, 0, 0, 29, 0, 1, 1, 1, 0, 0, 0, 1,
			1, 0, 1, 1, 1, 0, 46, 1, 5, 0, 41, 41, 148, 0, 41, 145, 41, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 91, 0, 91, 215, 5, 0,
			91, 211, 91, 0, 0, 0, 0, 91, 91, 215, 5, 91, 211, 91, 0, 31, 31, 0, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	private static short[] init__tableLayout_eof_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0};
	}

	private static final short _tableLayout_eof_actions[] = init__tableLayout_eof_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 102;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_widgetSection = 77;
	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 76;

	// line 248 "TableLayoutParser.rl"

	static public void setTableProperty (BaseTableLayout table, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("size")) {
				switch (values.size()) {
				case 1:
					value = values.get(0);
					// BOZO - Fix table %.
					if (value.endsWith("%"))
						table.fillX = table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = table.height = Integer.parseInt(values.get(0));
					break;
				case 2:
					value = values.get(0);
					if (value.endsWith("%"))
						table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = Integer.parseInt(values.get(0));
					value = values.get(1);
					if (value.endsWith("%"))
						table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.height = Integer.parseInt(values.get(0));
					break;
				}

			} else if (name.equals("width")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.width = Integer.parseInt(value);

			} else if (name.equals("height")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.height = Integer.parseInt(value);

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) table.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) table.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) table.padLeft = Integer.parseInt(value);
					break;
				case 1:
					table.padTop = table.padLeft = table.padBottom = table.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					table.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					table.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					table.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r"))
					table.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				table.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						table.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						table.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						table.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						table.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						table.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("debug")) {
				if (values.size() == 0) table.debug = "all,";
				for (int i = 0, n = values.size(); i < n; i++)
					table.debug += values.get(i) + ",";

			} else
				throw new IllegalArgumentException("Unknown property: " + name);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static public void setCellProperty (Cell c, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("expand")) {
				if (values.size() == 0) c.expandWidth = c.expandHeight = 1;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.expandWidth = 1;
					else if (value.equals("y"))
						c.expandHeight = 1;
					else if (value.equals("false"))
						c.expandWidth = c.expandHeight = 0;
					else {
						switch (i) {
						case 0:
							c.expandWidth = Integer.parseInt(value);
							break;
						case 1:
							c.expandHeight = Integer.parseInt(value);
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("fill")) {
				if (values.size() == 0) c.fillWidth = c.fillHeight = 1f;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.fillWidth = 1f;
					else if (value.equals("y")) //
						c.fillHeight = 1f;
					else {
						switch (i) {
						case 0:
							c.fillWidth = Integer.parseInt(value) / 100f;
							break;
						case 1:
							c.fillHeight = Integer.parseInt(value) / 100f;
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("size")) {
				switch (values.size()) {
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("width")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxWidth = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefWidth = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("height")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxHeight = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefHeight = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("spacing") || name.equals("space")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.spaceRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.spaceBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.spaceTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.spaceLeft = Integer.parseInt(value);
					break;
				case 1:
					c.spaceTop = c.spaceLeft = c.spaceBottom = c.spaceRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.padLeft = Integer.parseInt(value);
					break;
				case 1:
					c.padTop = c.padLeft = c.padBottom = c.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					c.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.startsWith("spacing") || name.startsWith("space")) {
				name = name.replace("spacing", "").replace("space", "");
				if (name.equals("top") || name.equals("t"))
					c.spaceTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.spaceLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.spaceBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.spaceRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				c.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						c.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						c.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						c.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						c.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						c.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("ignore")) {
				c.ignore = values.size() == 0 ? true : Boolean.valueOf(values.get(0));

			} else if (name.equals("colspan")) {
				c.colspan = Integer.parseInt(values.get(0));

			} else if (name.equals("uniform")) {
				if (values.size() == 0) c.uniformWidth = c.uniformHeight = true;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.uniformWidth = true;
					else if (value.equals("y"))
						c.uniformHeight = true;
					else if (value.equals("false"))
						c.uniformHeight = c.uniformHeight = null;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property.");
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static private Object invokeMethod (Object object, String name, ArrayList<String> values) throws NoSuchMethodException {
		Method[] methods = object.getClass().getMethods();
		outer:
		for (int i = 0, n = methods.length; i < n; i++) {
			Method method = methods[i];
			if (!method.getName().equals(name)) continue;
			Object[] params = values.toArray();
			Class[] paramTypes = method.getParameterTypes();
			for (int ii = 0, nn = paramTypes.length; ii < nn; ii++) {
				Object value = convertType(object, (String)params[ii], paramTypes[ii]);
				if (value == null) continue outer;
				params[ii] = value;
			}
			try {
				return method.invoke(object, params);
			} catch (Exception ex) {
				throw new RuntimeException("Error invoking method: " + name, ex);
			}
		}
		throw new NoSuchMethodException();
	}

	static private Object convertType (Object parentObject, String value, Class paramType) {
		if (paramType == String.class) return value;
		if (paramType == int.class || paramType == Integer.class) return Integer.valueOf(value);
		if (paramType == float.class || paramType == Float.class) return Float.valueOf(value);
		if (paramType == boolean.class || paramType == Boolean.class) return Boolean.valueOf(value);
		if (paramType == long.class || paramType == Long.class) return Long.valueOf(value);
		if (paramType == double.class || paramType == Double.class) return Double.valueOf(value);
		if (paramType == char.class || paramType == Character.class) return value.charAt(0);
		if (paramType == short.class || paramType == Short.class) return Short.valueOf(value);
		if (paramType == byte.class || paramType == Byte.class) return Byte.valueOf(value);
		// Look for a static field.
		try {
			Field field = paramType.getField(value);
			if (paramType == field.getType()) return field.get(null);
		} catch (Exception ignored) {
		}
		try {
			Field field = parentObject.getClass().getField(value);
			if (paramType == field.getType()) return field.get(null);
		} catch (Exception ignored) {
		}
		return null;
	}

	static private Object newWidget (String className) throws Exception {
		try {
			return Class.forName(className).newInstance();
		} catch (Exception ex) {
			for (int i = 0, n = BaseTableLayout.classPrefixes.size(); i < n; i++) {
				String prefix = BaseTableLayout.classPrefixes.get(i);
				try {
					return Class.forName(prefix + className).newInstance();
				} catch (Exception ignored) {
				}
			}
			throw ex;
		}
	}

	static public void main (String args[]) {
		BaseTableLayout table = new BaseTableLayout();
		table.setName("button", 123);
		table.setName("textbox", 345);
		table.setName("textbox2", 345);
		table.parse("<Meow>" //
			+ "width:400 height:400 " //
			+ "[boom:java.lang.String] <Booyah> size:80,80 align:left spacing:10 ( bean:true [button] moo (yagga:yo) 'sweet' ) \n " //
			+ "{ [textbox] [textbox] } " //
			+ "[textbox]\nalign:right,bottom \n ");
	}
}
