// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;

import com.esotericsoftware.tablelayout.BaseTableLayout.Cell;
import com.esotericsoftware.tablelayout.BaseTableLayout.WidgetFactory;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, String input) {
		char[] data = (input + "  ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		String widgetLayoutString = null;
		String className = null;
		Object label = null;

		ArrayList<String> values = new ArrayList(4);
		ArrayList<Object> parents = new ArrayList(8);
		Cell cell = null, rowDefaults = null, columnDefaults = null;
		Object parent = table, widget = null;
		RuntimeException parseRuntimeEx = null;

		boolean debug = false;
		if (debug) System.out.println();

		try {

// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
// line 45 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
// line 46 "TableLayoutParser.rl"
								{
									name = new String(data, s, p - s);
									s = p;
								}
									break;
								case 2:
// line 50 "TableLayoutParser.rl"
								{
									values.add(new String(data, s, p - s));
								}
									break;
								case 3:
// line 53 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("tableProperty: " + name + " = " + values);
									setTableProperty((BaseTableLayout)parent, name, values);
								}
									break;
								case 4:
// line 57 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellDefaultProperty: " + name + " = " + values);
									setCellProperty(((BaseTableLayout)parent).getCellDefaults(), name, values);
								}
									break;
								case 5:
// line 61 "TableLayoutParser.rl"
								{
									int column = ((BaseTableLayout)parent).getColumnDefaults().size();
									columnDefaults = ((BaseTableLayout)parent).getColumnDefaults(column);
								}
									break;
								case 6:
// line 65 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("columnDefaultProperty: " + name + " = " + values);
									setCellProperty(columnDefaults, name, values);
								}
									break;
								case 7:
// line 69 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startRow");
									rowDefaults = ((BaseTableLayout)parent).startRow();
								}
									break;
								case 8:
// line 73 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("rowDefaultValue: " + name + " = " + values);
									setCellProperty(rowDefaults, name, values);
								}
									break;
								case 9:
// line 77 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("cellProperty: " + name + " = " + values);
									setCellProperty(cell, name, values);
								}
									break;
								case 10:
// line 81 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("setTitle: " + new String(data, s, p - s));
									if (widget instanceof BaseTableLayout)
										((BaseTableLayout)widget).setTitle(new String(data, s, p - s));
									else
										table.setTitle(widget, new String(data, s, p - s));
								}
									break;
								case 11:
// line 88 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetLayoutString: " + new String(data, s, p - s).trim());
									widgetLayoutString = new String(data, s, p - s).trim();
								}
									break;
								case 12:
// line 92 "TableLayoutParser.rl"
								{
									className = new String(data, s, p - s);
								}
									break;
								case 13:
// line 95 "TableLayoutParser.rl"
								{
									label = table.newLabel(new String(data, s, p - s));
								}
									break;
								case 14:
// line 98 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newWidget: " + name + " " + className + " " + label);
									widget = null;
									if (label != null) {
										widget = label;
										label = null;
										if (!name.isEmpty()) table.setName(name, widget);
									} else if (className == null) {
										if (!name.isEmpty()) {
											widget = table.getWidget(name);
											if (widget == null) {
												// Try the widget name as a class name.
												try {
													widget = table.wrap(newWidget(name));
												} catch (Exception ex) {
													throw new IllegalArgumentException("Widget not found with name: " + name);
												}
											}
										}
									} else {
										try {
											widget = table.wrap(newWidget(className));
										} catch (Exception ex) {
											throw new RuntimeException("Error creating instance of class: " + className, ex);
										}
										className = null;
										if (!name.isEmpty()) table.setName(name, widget);
									}
								}
									break;
								case 15:
// line 127 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("newLabel: " + new String(data, s, p - s));
									widget = table.newLabel(new String(data, s, p - s));
								}
									break;
								case 16:
// line 131 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startTable");
									parents.add(parent);
									parent = table.newTableLayout();
									cell = null;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 82;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 17:
// line 139 "TableLayoutParser.rl"
								{
									widget = parent;
									if (!parents.isEmpty()) {
										if (debug) System.out.println("endTable");
										parent = parents.remove(parents.size() - 1);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 18:
// line 147 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("startWidgetSection");
									parents.add(parent);
									parent = widget;
									widget = null;
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 83;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 19:
// line 154 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("endWidgetSection");
									widget = parent;
									parent = parents.remove(parents.size() - 1);
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 20:
// line 160 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addCell");
									cell = ((BaseTableLayout)parent).add(table.wrap(widget));
								}
									break;
								case 21:
// line 164 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("addWidget");
									table.addChild(parent, table.wrap(widget), widgetLayoutString);
									widgetLayoutString = null;
								}
									break;
								case 22:
// line 169 "TableLayoutParser.rl"
								{
									if (debug) System.out.println("widgetProperty: " + name + " = " + values);
									try {
										try {
											invokeMethod(parent, name, values);
										} catch (NoSuchMethodException ex1) {
											try {
												invokeMethod(parent, "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1),
													values);
											} catch (NoSuchMethodException ex2) {
												try {
													Field field = parent.getClass().getField(name);
													Object value = convertType(parent, values.get(0), field.getType());
													if (value != null) field.set(parent, value);
												} catch (Exception ex3) {
													throw new RuntimeException("No method, bean property, or field found.");
												}
											}
										}
									} catch (RuntimeException ex) {
										throw new RuntimeException("Error setting property: " + name + "\nClass: " + parent.getClass()
											+ "\nValues: " + values, ex);
									}
									values.clear();
								}
									break;
// line 317 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
					case 5:
					}
					break;
				}
			}

// line 264 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			for (int i = 0; i < p; i++)
				if (data[i] == '\n') lineNumber++;
			throw new IllegalArgumentException("Error parsing layout on line " + lineNumber + " near: "
				+ new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0)
			throw new IllegalArgumentException("Error parsing layout (possibly an unmatched brace or quote): " + input,
				parseRuntimeEx);
	}

// line 337 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16,
			1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 2, 0, 1, 2, 0, 2, 2, 0, 10, 2, 0, 12, 2, 0, 13, 2, 0, 15, 2, 1, 3, 2, 1, 4, 2,
			1, 6, 2, 1, 8, 2, 1, 9, 2, 1, 14, 2, 1, 22, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 9, 2, 2, 22, 2, 3, 16, 2, 4, 16,
			2, 5, 0, 2, 5, 16, 2, 6, 16, 2, 7, 0, 2, 7, 16, 2, 8, 16, 2, 9, 16, 2, 9, 17, 2, 9, 18, 2, 11, 21, 2, 12, 14, 2, 20, 0,
			2, 20, 16, 2, 20, 17, 2, 20, 18, 2, 21, 16, 2, 21, 18, 2, 21, 19, 2, 22, 16, 2, 22, 19, 3, 0, 1, 14, 3, 1, 3, 16, 3, 1,
			4, 16, 3, 1, 6, 16, 3, 1, 8, 16, 3, 1, 9, 16, 3, 1, 9, 17, 3, 1, 9, 18, 3, 1, 22, 16, 3, 1, 22, 19, 3, 2, 3, 16, 3, 2,
			4, 16, 3, 2, 6, 16, 3, 2, 8, 16, 3, 2, 9, 16, 3, 2, 9, 17, 3, 2, 9, 18, 3, 2, 22, 16, 3, 2, 22, 19, 3, 11, 21, 16, 3,
			11, 21, 18, 3, 11, 21, 19};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 16, 17, 18, 34, 50, 58, 59, 60, 72, 84, 97, 110, 123, 124, 125, 132, 142, 150, 166, 173, 178,
			180, 185, 190, 195, 196, 197, 201, 205, 206, 207, 223, 239, 252, 253, 254, 264, 279, 289, 297, 316, 326, 327, 328, 337,
			352, 367, 380, 381, 382, 391, 405, 419, 433, 448, 463, 476, 477, 478, 487, 497, 505, 523, 532, 542, 550, 568, 577, 593,
			609, 622, 623, 624, 634, 649, 659, 667, 686, 696, 697, 698, 714, 727, 728, 729, 744, 751, 756, 758, 763, 768, 773, 774,
			775, 779, 793, 794, 795, 809, 823, 837, 850, 851, 852, 860, 870, 878, 895, 903, 907, 910};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 60, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 45, 60, 91, 123,
			125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 60, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91,
			123, 125, 9, 13, 45, 45, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97,
			122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 91, 123, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122,
			46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 46, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 91, 123,
			9, 13, 32, 58, 93, 9, 13, 58, 93, 32, 39, 93, 9, 13, 32, 39, 93, 9, 13, 32, 39, 93, 9, 13, 39, 39, 32, 93, 9, 13, 32,
			60, 9, 13, 62, 62, 32, 39, 40, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40, 45, 58, 91, 123, 125,
			9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 40, 44, 45, 91, 123,
			125, 9, 13, 32, 39, 40, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46,
			95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 40, 44, 45, 46, 91, 95, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 40,
			44, 45, 91, 123, 125, 9, 13, 62, 62, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57,
			65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57, 65,
			90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39,
			45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 44, 45, 91, 123, 124, 9, 13, 39, 45, 46, 95, 48, 57, 65,
			90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 46, 91, 95, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122,
			32, 39, 44, 45, 91, 123, 124, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32, 37,
			39, 44, 45, 46, 91, 95, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 42, 45,
			58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32,
			39, 45, 46, 95, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 32, 39, 42, 45, 91,
			123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65, 90, 97, 122, 32,
			37, 39, 42, 44, 45, 46, 91, 95, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 62,
			62, 32, 39, 42, 45, 60, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97,
			122, 39, 39, 32, 39, 40, 41, 60, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 91, 123, 9, 13, 32, 58, 93, 9, 13,
			58, 93, 32, 39, 93, 9, 13, 32, 39, 93, 9, 13, 32, 39, 93, 9, 13, 39, 39, 32, 93, 9, 13, 32, 39, 40, 41, 91, 123, 9, 13,
			48, 57, 65, 90, 97, 122, 62, 62, 32, 39, 40, 41, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 91, 123, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 46, 95, 9, 13, 48, 57,
			65, 90, 97, 122, 39, 39, 32, 39, 41, 44, 91, 123, 9, 13, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 95, 48, 57, 65,
			90, 97, 122, 32, 37, 39, 41, 44, 46, 91, 95, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 41, 44, 91, 123, 9, 13, 32,
			60, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 8, 1, 1, 8, 8, 6, 1, 1, 4, 4, 5, 5, 5, 1, 1, 5, 4, 2, 8, 5, 3, 2, 3, 3, 3, 1, 1, 2, 2, 1, 1, 8, 8, 5,
			1, 1, 8, 7, 4, 2, 11, 8, 1, 1, 1, 7, 7, 5, 1, 1, 7, 6, 6, 6, 7, 7, 5, 1, 1, 7, 4, 2, 10, 7, 4, 2, 10, 7, 8, 8, 5, 1, 1,
			8, 7, 4, 2, 11, 8, 1, 1, 8, 5, 1, 1, 7, 5, 3, 2, 3, 3, 3, 1, 1, 2, 6, 1, 1, 6, 6, 6, 5, 1, 1, 6, 4, 2, 9, 6, 2, 1, 0};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 0, 0, 4, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 4, 4, 4,
			0, 0, 1, 4, 3, 3, 4, 1, 0, 0, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 3, 3, 4, 1, 4, 4, 4, 0, 0, 1,
			4, 3, 3, 4, 1, 0, 0, 4, 4, 0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 0, 0, 4, 4, 4, 4, 0, 0, 1, 3, 3, 4, 1, 1, 1, 0};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 13, 15, 17, 30, 43, 51, 53, 55, 64, 73, 83, 93, 103, 105, 107, 114, 122, 128, 141, 148, 153, 156,
			161, 166, 171, 173, 175, 179, 183, 185, 187, 200, 213, 223, 225, 227, 237, 249, 257, 263, 279, 289, 291, 293, 299, 311,
			323, 333, 335, 337, 346, 357, 368, 379, 391, 403, 413, 415, 417, 426, 434, 440, 455, 464, 472, 478, 493, 502, 515, 528,
			538, 540, 542, 552, 564, 572, 578, 594, 604, 606, 608, 621, 631, 633, 635, 647, 654, 659, 662, 667, 672, 677, 679, 681,
			685, 696, 698, 700, 711, 722, 733, 743, 745, 747, 755, 763, 769, 783, 791, 795, 798};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {1, 2, 45, 7, 80, 21, 82, 53, 1, 69, 69, 69, 0, 4, 3, 4, 3, 5, 2, 6, 7, 43, 21, 4, 110, 5, 32, 32, 32, 0,
			5, 2, 6, 7, 43, 21, 4, 110, 5, 32, 32, 32, 0, 6, 2, 7, 21, 4, 110, 6, 0, 8, 0, 9, 0, 10, 2, 21, 4, 10, 11, 11, 11, 0,
			10, 2, 21, 4, 10, 11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 12, 2, 13, 21, 4, 12, 11, 11, 11, 0, 13, 14, 18,
			19, 19, 13, 19, 19, 19, 0, 16, 15, 16, 15, 10, 2, 17, 21, 4, 10, 0, 14, 18, 19, 19, 19, 19, 19, 0, 19, 19, 19, 19, 19,
			0, 10, 20, 2, 17, 19, 21, 19, 4, 10, 19, 19, 19, 0, 10, 2, 17, 21, 4, 10, 0, 21, 23, 4, 21, 22, 23, 4, 22, 25, 26, 0,
			25, 24, 24, 0, 4, 24, 24, 25, 26, 4, 25, 24, 28, 27, 28, 27, 28, 4, 28, 0, 29, 30, 29, 0, 111, 31, 111, 31, 33, 2, 6, 7,
			34, 21, 4, 110, 33, 32, 32, 32, 0, 33, 2, 6, 7, 34, 21, 4, 110, 33, 32, 32, 32, 0, 34, 35, 40, 41, 41, 34, 41, 41, 41,
			0, 37, 36, 37, 36, 38, 2, 6, 39, 7, 21, 4, 110, 38, 0, 38, 2, 6, 7, 21, 4, 110, 38, 32, 32, 32, 0, 35, 40, 41, 41, 41,
			41, 41, 0, 41, 41, 41, 41, 41, 0, 38, 42, 2, 6, 39, 7, 41, 21, 41, 4, 110, 38, 41, 41, 41, 0, 38, 2, 6, 39, 7, 21, 4,
			110, 38, 0, 38, 44, 38, 44, 45, 45, 46, 46, 46, 0, 47, 2, 7, 48, 21, 4, 53, 47, 46, 46, 46, 0, 47, 2, 7, 48, 21, 4, 53,
			47, 46, 46, 46, 0, 48, 49, 66, 67, 67, 48, 67, 67, 67, 0, 51, 50, 51, 50, 52, 2, 65, 7, 21, 4, 53, 52, 0, 52, 2, 7, 21,
			4, 53, 52, 46, 46, 46, 0, 54, 2, 7, 21, 4, 53, 54, 55, 55, 55, 0, 54, 2, 7, 21, 4, 53, 54, 55, 55, 55, 0, 56, 2, 7, 57,
			21, 4, 53, 56, 55, 55, 55, 0, 56, 2, 7, 57, 21, 4, 53, 56, 55, 55, 55, 0, 57, 58, 62, 63, 63, 57, 63, 63, 63, 0, 60, 59,
			60, 59, 54, 2, 61, 7, 21, 4, 53, 54, 0, 58, 62, 63, 63, 63, 63, 63, 0, 63, 63, 63, 63, 63, 0, 54, 64, 2, 61, 7, 63, 21,
			63, 4, 53, 54, 63, 63, 63, 0, 54, 2, 61, 7, 21, 4, 53, 54, 0, 49, 66, 67, 67, 67, 67, 67, 0, 67, 67, 67, 67, 67, 0, 52,
			68, 2, 65, 7, 67, 21, 67, 4, 53, 52, 67, 67, 67, 0, 52, 2, 65, 7, 21, 4, 53, 52, 0, 70, 2, 45, 7, 71, 21, 4, 53, 70, 69,
			69, 69, 0, 70, 2, 45, 7, 71, 21, 4, 53, 70, 69, 69, 69, 0, 71, 72, 77, 78, 78, 71, 78, 78, 78, 0, 74, 73, 74, 73, 75, 2,
			45, 76, 7, 21, 4, 53, 75, 0, 75, 2, 45, 7, 21, 4, 53, 75, 69, 69, 69, 0, 72, 77, 78, 78, 78, 78, 78, 0, 78, 78, 78, 78,
			78, 0, 75, 79, 2, 45, 76, 7, 78, 21, 78, 4, 53, 75, 78, 78, 78, 0, 75, 2, 45, 76, 7, 21, 4, 53, 75, 0, 75, 81, 75, 81,
			82, 2, 45, 7, 80, 21, 4, 53, 82, 69, 69, 69, 0, 83, 84, 112, 88, 86, 83, 100, 100, 100, 0, 86, 85, 86, 85, 86, 84, 87,
			112, 97, 88, 86, 86, 96, 96, 96, 0, 87, 84, 112, 88, 86, 87, 0, 88, 90, 86, 88, 89, 90, 86, 89, 92, 93, 0, 92, 91, 91,
			0, 86, 91, 91, 92, 93, 86, 92, 91, 95, 94, 95, 94, 95, 86, 95, 0, 96, 84, 87, 112, 88, 86, 87, 96, 96, 96, 0, 99, 98,
			99, 98, 99, 84, 87, 112, 88, 86, 99, 96, 96, 96, 0, 101, 84, 112, 102, 88, 86, 101, 100, 100, 100, 0, 101, 84, 112, 102,
			88, 86, 101, 100, 100, 100, 0, 102, 103, 107, 108, 108, 102, 108, 108, 108, 0, 105, 104, 105, 104, 83, 84, 112, 106, 88,
			86, 83, 0, 103, 107, 108, 108, 108, 108, 108, 0, 108, 108, 108, 108, 108, 0, 83, 109, 84, 112, 106, 108, 88, 108, 86,
			83, 108, 108, 108, 0, 83, 84, 112, 106, 88, 86, 83, 0, 29, 30, 29, 0, 111, 111, 0, 0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 60, 1, 29, 0, 39, 39, 150, 39, 39, 39, 144, 147, 39, 141, 141,
			141, 0, 0, 0, 35, 0, 0, 0, 31, 33, 0, 1, 1, 1, 0, 0, 0, 0, 0, 31, 33, 0, 0, 0, 0, 0, 0, 15, 15, 15, 120, 15, 117, 117,
			117, 0, 0, 0, 0, 31, 0, 1, 1, 1, 0, 72, 72, 3, 72, 184, 72, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,
			1, 1, 1, 0, 48, 1, 5, 0, 17, 17, 0, 17, 123, 17, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 93, 0, 93, 5, 0, 93, 0,
			220, 93, 0, 0, 0, 0, 93, 93, 5, 93, 220, 93, 0, 1, 45, 168, 1, 1, 3, 78, 0, 1, 0, 0, 1, 1, 23, 0, 138, 23, 0, 54, 0,
			138, 54, 1, 57, 1, 25, 0, 0, 27, 0, 0, 0, 0, 0, 0, 51, 1, 21, 0, 75, 75, 196, 75, 3, 75, 188, 192, 75, 0, 0, 0, 0, 0, 0,
			35, 0, 0, 0, 31, 33, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 48, 1, 5, 0, 19, 19, 132, 0, 19, 19, 126, 129, 19, 0,
			0, 0, 35, 0, 0, 31, 33, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 96, 0, 96, 232, 5, 96, 0, 96, 0, 224,
			228, 96, 0, 0, 0, 0, 96, 96, 232, 5, 96, 96, 224, 228, 96, 0, 51, 1, 21, 0, 0, 0, 1, 1, 1, 0, 66, 66, 66, 3, 66, 176,
			66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 48, 1, 5, 0, 9, 9, 0, 9, 9, 105,
			9, 9, 0, 0, 0, 0, 0, 31, 0, 0, 1, 1, 1, 0, 11, 11, 11, 11, 111, 11, 11, 108, 108, 108, 0, 0, 0, 0, 0, 31, 0, 0, 1, 1, 1,
			0, 69, 69, 69, 3, 69, 180, 69, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 48, 1,
			5, 0, 13, 13, 0, 13, 13, 114, 13, 13, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 90, 0, 90, 5, 90, 0, 90, 0, 216, 90,
			90, 0, 0, 0, 0, 90, 90, 5, 90, 90, 216, 90, 90, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 87, 0, 87, 5, 87, 0, 87, 0,
			212, 87, 87, 0, 0, 0, 0, 87, 87, 5, 87, 87, 212, 87, 87, 0, 63, 63, 63, 63, 3, 63, 172, 63, 63, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 31, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 48, 1, 5, 0, 7, 7, 7, 0, 7, 7, 102, 7, 7, 0, 0, 0, 0, 0, 0,
			31, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 84, 0, 84, 84, 5, 84, 0, 84, 0, 208, 84, 84, 0, 0, 0, 0,
			84, 84, 84, 5, 84, 84, 208, 84, 84, 0, 51, 1, 21, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 1, 1, 1, 0, 0, 0, 37, 0, 31, 0, 1, 1,
			1, 0, 60, 1, 29, 0, 0, 41, 156, 159, 0, 41, 153, 0, 1, 1, 1, 0, 0, 0, 37, 0, 31, 0, 0, 1, 45, 168, 1, 1, 3, 78, 0, 1, 0,
			0, 1, 1, 23, 0, 138, 23, 0, 54, 0, 138, 54, 1, 57, 1, 25, 0, 0, 27, 0, 0, 0, 135, 248, 252, 135, 244, 135, 0, 0, 0, 0,
			51, 1, 21, 0, 0, 41, 156, 159, 41, 153, 0, 1, 1, 1, 0, 81, 81, 204, 3, 81, 200, 81, 0, 0, 0, 0, 0, 0, 37, 0, 0, 31, 0,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 48, 1, 5, 0, 43, 43, 165, 0, 43, 162, 43, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 99, 0, 99, 240, 5, 0, 99, 0, 236, 99, 0, 0, 0, 0, 99, 99, 240, 5, 99, 236, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 110;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_widgetSection = 83;
	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 82;

// line 279 "TableLayoutParser.rl"

	static public void setTableProperty (BaseTableLayout table, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("size")) {
				switch (values.size()) {
				case 1:
					table.width = table.height = Integer.parseInt(values.get(0));
					break;
				case 2:
					table.width = Integer.parseInt(values.get(0));
					table.height = Integer.parseInt(values.get(1));
					break;
				}

			} else if (name.equals("width") || name.equals("w")) {
				table.width = Integer.parseInt(values.get(0));

			} else if (name.equals("height") || name.equals("h")) {
				table.height = Integer.parseInt(values.get(0));

			} else if (name.equals("fill")) {
				switch (values.size()) {
				case 0:
					table.fillWidth = table.fillHeight = 1f;
					break;
				case 1:
					value = values.get(0);
					if (value.equals("x"))
						table.fillWidth = 1f;
					else if (value.equals("y")) //
						table.fillHeight = 1f;
					else
						table.fillWidth = table.fillHeight = Integer.parseInt(value) / 100f;
					break;
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.fillWidth = Integer.parseInt(value) / 100f;
					value = values.get(1);
					if (value.length() > 0) table.fillHeight = Integer.parseInt(value) / 100f;
					break;
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) table.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) table.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) table.padLeft = Integer.parseInt(value);
					break;
				case 1:
					table.padTop = table.padLeft = table.padBottom = table.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					table.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					table.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					table.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r"))
					table.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				table.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						table.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						table.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						table.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						table.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						table.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("debug")) {
				if (values.size() == 0) table.debug = "all,";
				for (int i = 0, n = values.size(); i < n; i++)
					table.debug += values.get(i) + ",";

			} else
				throw new IllegalArgumentException("Unknown property: " + name);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static public void setCellProperty (Cell c, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("expand")) {
				switch (values.size()) {
				case 0:
					c.expandWidth = c.expandHeight = 1;
					break;
				case 1:
					value = values.get(0);
					if (value.equals("x"))
						c.expandWidth = 1;
					else if (value.equals("y")) //
						c.expandHeight = 1;
					else
						c.expandWidth = c.expandHeight = Integer.parseInt(value);
					break;
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.expandWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.expandHeight = Integer.parseInt(value);
					break;
				}

			} else if (name.equals("fill")) {
				switch (values.size()) {
				case 0:
					c.fillWidth = c.fillHeight = 1f;
					break;
				case 1:
					value = values.get(0);
					if (value.equals("x"))
						c.fillWidth = 1f;
					else if (value.equals("y")) //
						c.fillHeight = 1f;
					else
						c.fillWidth = c.fillHeight = Integer.parseInt(value) / 100f;
					break;
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.fillWidth = Integer.parseInt(value) / 100f;
					value = values.get(1);
					if (value.length() > 0) c.fillHeight = Integer.parseInt(value) / 100f;
					break;
				}

			} else if (name.equals("size")) {
				switch (values.size()) {
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.prefWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.minHeight = c.prefHeight = Integer.parseInt(value);
					break;
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.minHeight = c.prefWidth = c.prefHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("width") || name.equals("w")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxWidth = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefWidth = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("height") || name.equals("h")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxHeight = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefHeight = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("spacing") || name.equals("space")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.spaceRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.spaceBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.spaceTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.spaceLeft = Integer.parseInt(value);
					break;
				case 1:
					c.spaceTop = c.spaceLeft = c.spaceBottom = c.spaceRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.padLeft = Integer.parseInt(value);
					break;
				case 1:
					c.padTop = c.padLeft = c.padBottom = c.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					c.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.startsWith("spacing") || name.startsWith("space")) {
				name = name.replace("spacing", "").replace("space", "");
				if (name.equals("top") || name.equals("t"))
					c.spaceTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.spaceLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.spaceBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.spaceRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				c.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						c.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						c.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						c.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						c.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						c.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("ignore")) {
				c.ignore = values.size() == 0 ? true : Boolean.valueOf(values.get(0));

			} else if (name.equals("colspan")) {
				c.colspan = Integer.parseInt(values.get(0));

			} else if (name.equals("uniform")) {
				if (values.size() == 0) c.uniformWidth = c.uniformHeight = true;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.uniformWidth = true;
					else if (value.equals("y"))
						c.uniformHeight = true;
					else if (value.equals("false"))
						c.uniformHeight = c.uniformHeight = null;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property.");
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static private Object invokeMethod (Object object, String name, ArrayList<String> values) throws NoSuchMethodException {
		Method[] methods = object.getClass().getMethods();
		outer:
		for (int i = 0, n = methods.length; i < n; i++) {
			Method method = methods[i];
			if (!method.getName().equalsIgnoreCase(name)) continue;
			Object[] params = values.toArray();
			Class[] paramTypes = method.getParameterTypes();
			for (int ii = 0, nn = paramTypes.length; ii < nn; ii++) {
				Object value = convertType(object, (String)params[ii], paramTypes[ii]);
				if (value == null) continue outer;
				params[ii] = value;
			}
			try {
				return method.invoke(object, params);
			} catch (Exception ex) {
				throw new RuntimeException("Error invoking method: " + name, ex);
			}
		}
		throw new NoSuchMethodException();
	}

	static private Object convertType (Object parentObject, String value, Class paramType) {
		if (paramType == String.class) return value;
		try {
			if (paramType == int.class || paramType == Integer.class) return Integer.valueOf(value);
			if (paramType == float.class || paramType == Float.class) return Float.valueOf(value);
			if (paramType == long.class || paramType == Long.class) return Long.valueOf(value);
			if (paramType == double.class || paramType == Double.class) return Double.valueOf(value);
		} catch (NumberFormatException ignored) {
		}
		if (paramType == boolean.class || paramType == Boolean.class) return Boolean.valueOf(value);
		if (paramType == char.class || paramType == Character.class) return value.charAt(0);
		if (paramType == short.class || paramType == Short.class) return Short.valueOf(value);
		if (paramType == byte.class || paramType == Byte.class) return Byte.valueOf(value);
		// Look for a static field.
		try {
			Field field = getField(paramType, value);
			if (field != null && paramType == field.getType()) return field.get(null);
		} catch (Exception ignored) {
		}
		try {
			Field field = getField(parentObject.getClass(), value);
			if (field != null && paramType == field.getType()) return field.get(null);
		} catch (Exception ignored) {
		}
		return null;
	}

	static private Field getField (Class type, String name) {
		try {
			Field field = type.getField(name);
			if (field != null) return field;
		} catch (Exception ignored) {
		}
		while (type != null && type != Object.class) {
			Field[] fields = type.getDeclaredFields();
			for (int i = 0, n = fields.length; i < n; i++)
				if (fields[i].getName().equalsIgnoreCase(name)) return fields[i];
			type = type.getSuperclass();
		}
		return null;
	}

	static Object newWidget (String className) throws Exception {
		WidgetFactory factory = BaseTableLayout.widgetFactories.get(className);
		if (factory != null) return factory.newInstance();
		try {
			return Class.forName(className).newInstance();
		} catch (Exception ex) {
			for (int i = 0, n = BaseTableLayout.classPrefixes.size(); i < n; i++) {
				String prefix = BaseTableLayout.classPrefixes.get(i);
				try {
					return Class.forName(prefix + className).newInstance();
				} catch (Exception ignored) {
				}
			}
			throw ex;
		}
	}
}
