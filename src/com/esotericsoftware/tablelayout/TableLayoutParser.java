// line 1 "TableLayoutParser.rl"
// Do not edit this file! Generated from Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

import com.esotericsoftware.tablelayout.TableLayout.Cell;

class TableLayoutParser {
	static public void parse (TableLayout table, Cell cell, String input) {
		char[] data = (input + " ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<TableLayout> tables = new ArrayList(8);

		RuntimeException parseRuntimeEx = null;
		try {

			// line 3 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				cs = tableLayout_start;
				top = 0;
			}

			// line 8 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _tableLayout_key_offsets[cs];
							_trans = _tableLayout_index_offsets[cs];
							_klen = _tableLayout_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _tableLayout_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _tableLayout_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _tableLayout_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _tableLayout_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _tableLayout_trans_targs[_trans];

						if (_tableLayout_trans_actions[_trans] != 0) {
							_acts = _tableLayout_trans_actions[_trans];
							_nacts = (int)_tableLayout_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_tableLayout_actions[_acts++]) {
								case 0:
									// line 33 "TableLayoutParser.rl"
								{
									s = p;
								}
									break;
								case 1:
									// line 34 "TableLayoutParser.rl"
								{
									// System.out.println("name: " + new String(data, s, p - s));
									name = new String(data, s, p - s).toLowerCase();
								}
									break;
								case 2:
									// line 38 "TableLayoutParser.rl"
								{
									// System.out.println("value: " + new String(data, s, p - s));
									values.add(new String(data, s, p - s).toLowerCase());
								}
									break;
								case 3:
									// line 42 "TableLayoutParser.rl"
								{
									System.out.println("tableValues: " + name + " = " + values);
									setTableValues(table, name, values);
								}
									break;
								case 4:
									// line 46 "TableLayoutParser.rl"
								{
									System.out.println("cellDefaultValue: " + name + " = " + values);
									setCellValues(table.getDefaults(), name, values);
								}
									break;
								case 5:
									// line 50 "TableLayoutParser.rl"
								{
									table.getColumnDefaults(table.columnDefaults.size());
								}
									break;
								case 6:
									// line 53 "TableLayoutParser.rl"
								{
									System.out.println("columnDefaultValue: " + name + " = " + values);
									setCellValues(table.getColumnDefaults(table.columnDefaults.size() - 1), name, values);
								}
									break;
								case 7:
									// line 57 "TableLayoutParser.rl"
								{
									System.out.println("startRow");
									table.startRow();
								}
									break;
								case 8:
									// line 61 "TableLayoutParser.rl"
								{
									System.out.println("rowDefaultValue: " + name + " = " + values);
									setCellValues(table.rowDefaults, name, values);
								}
									break;
								case 9:
									// line 65 "TableLayoutParser.rl"
								{
									System.out.println("addCell: " + new String(data, s, p - s));
									Integer widget = null;
									if (s < p) {
										widget = table.getWidget(new String(data, s, p - s));
										if (widget == null)
											throw new IllegalArgumentException("Widget not found with name: " + new String(data, s, p - s));
									}
									cell = table.add(widget);
								}
									break;
								case 10:
									// line 74 "TableLayoutParser.rl"
								{
									System.out.println("addLabel: " + new String(data, s, p - s));
									String widget = new String(data, s, p - s);
									cell = table.add(widget);
								}
									break;
								case 11:
									// line 79 "TableLayoutParser.rl"
								{
									System.out.println("cellValue: " + name + " = " + values);
									setCellValues(cell, name, values);
								}
									break;
								case 12:
									// line 83 "TableLayoutParser.rl"
								{
									System.out.println("startTable");
									cell = null;
									TableLayout parentTable = table;
									tables.add(parentTable);
									table = new TableLayout();
									table.nameToWidget.putAll(parentTable.nameToWidget);
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 3;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 13:
									// line 92 "TableLayoutParser.rl"
								{
									if (top > 0) {
										System.out.println("endTable");
										TableLayout childTable = table;
										table = tables.size() == 0 ? null : tables.remove(tables.size() - 1);
										cell = table.add(childTable);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								// line 203 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
						if (p == eof) {
							int __acts = _tableLayout_eof_actions[cs];
							int __nacts = (int)_tableLayout_actions[__acts++];
							while (__nacts-- > 0) {
								switch (_tableLayout_actions[__acts++]) {
								case 13:
									// line 92 "TableLayoutParser.rl"
								{
									if (top > 0) {
										System.out.println("endTable");
										TableLayout childTable = table;
										table = tables.size() == 0 ? null : tables.remove(tables.size() - 1);
										cell = table.add(childTable);
										{
											cs = stack[--top];
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								// line 236 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
								}
							}
						}

					case 5:
					}
					break;
				}
			}

			// line 142 "TableLayoutParser.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			throw new IllegalArgumentException("Error parsing layout near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0)
			throw new IllegalArgumentException("Error parsing layout, missing closing curly brace: " + input, parseRuntimeEx);
	}

	// line 246 "../src/com/esotericsoftware/tablelayout/TableLayoutParser.java"
	private static byte[] init__tableLayout_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 5, 1, 7, 1, 9, 1, 10, 1, 12, 1, 13, 2, 0, 2, 2, 0, 9, 2, 0, 10, 2, 1, 3, 2, 1,
			4, 2, 1, 6, 2, 1, 8, 2, 1, 11, 2, 2, 3, 2, 2, 4, 2, 2, 6, 2, 2, 8, 2, 2, 11, 2, 5, 0, 2, 5, 12, 2, 7, 0, 2, 7, 12, 3, 0,
			2, 3, 3, 0, 2, 4, 3, 0, 2, 6, 3, 0, 2, 8, 3, 0, 2, 11, 3, 1, 3, 12, 3, 1, 4, 12, 3, 1, 6, 12, 3, 1, 8, 12, 3, 1, 11, 12,
			3, 2, 3, 12, 3, 2, 4, 12, 3, 2, 6, 12, 3, 2, 8, 12, 3, 2, 11, 12, 4, 0, 2, 3, 12, 4, 0, 2, 4, 12, 4, 0, 2, 6, 12, 4, 0,
			2, 8, 12, 4, 0, 2, 11, 12};
	}

	private static final byte _tableLayout_actions[] = init__tableLayout_actions_0();

	private static short[] init__tableLayout_key_offsets_0 () {
		return new short[] {0, 0, 15, 19, 34, 35, 36, 50, 51, 52, 64, 76, 89, 102, 112, 118, 132, 139, 152, 165, 166, 167, 182,
			197, 207, 213, 229, 238, 253, 268, 277, 292, 307, 317, 323, 339, 353, 367, 381, 396, 411, 421, 427, 443, 452, 467, 482,
			491, 506, 521, 537, 553, 563, 569, 586, 596, 612, 628, 631};
	}

	private static final short _tableLayout_key_offsets[] = init__tableLayout_key_offsets_0();

	private static char[] init__tableLayout_trans_keys_0 () {
		return new char[] {32, 39, 42, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 123, 9, 13, 32, 39, 42, 45, 91, 123,
			124, 9, 13, 48, 57, 65, 90, 97, 122, 39, 39, 32, 39, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 45, 45, 32, 39,
			91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 58, 91, 123, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 58, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 45, 9, 13, 48, 57, 65, 90, 97, 122,
			48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 91, 123, 9, 13, 32, 39,
			44, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 91, 123, 9, 13, 48, 57, 65, 90, 97, 122, 93, 93, 32, 39, 45,
			58, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 45,
			9, 13, 48, 57, 65, 90, 97, 122, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97,
			122, 32, 39, 44, 45, 91, 123, 125, 9, 13, 32, 39, 44, 45, 91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45,
			91, 123, 125, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 45, 9, 13, 48, 57, 65, 90,
			97, 122, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123,
			124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 91, 123, 124,
			9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 45, 58, 91, 123,
			124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 45, 9, 13, 48, 57, 65, 90, 97, 122, 48, 57, 65, 90, 97, 122, 32, 37, 39, 44,
			45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 32, 39, 44, 45, 91, 123, 124, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124,
			9, 13, 32, 39, 44, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 44, 45, 91, 123, 124, 9, 13, 48, 57, 65,
			90, 97, 122, 32, 39, 42, 45, 58, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 45, 58, 91, 123, 124, 9, 13,
			48, 57, 65, 90, 97, 122, 32, 45, 9, 13, 48, 57, 65, 90, 97, 122, 48, 57, 65, 90, 97, 122, 32, 37, 39, 42, 44, 45, 91,
			123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 32, 39, 42, 44, 45, 91, 123, 124, 9,
			13, 48, 57, 65, 90, 97, 122, 32, 39, 42, 44, 45, 91, 123, 124, 9, 13, 48, 57, 65, 90, 97, 122, 32, 9, 13, 32, 9, 13, 0};
	}

	private static final char _tableLayout_trans_keys[] = init__tableLayout_trans_keys_0();

	private static byte[] init__tableLayout_single_lengths_0 () {
		return new byte[] {0, 7, 2, 7, 1, 1, 6, 1, 1, 4, 4, 5, 5, 2, 0, 6, 5, 5, 5, 1, 1, 7, 7, 2, 0, 8, 7, 7, 7, 1, 7, 7, 2, 0, 8,
			6, 6, 6, 7, 7, 2, 0, 8, 7, 7, 7, 7, 7, 7, 8, 8, 2, 0, 9, 8, 8, 8, 1, 1};
	}

	private static final byte _tableLayout_single_lengths[] = init__tableLayout_single_lengths_0();

	private static byte[] init__tableLayout_range_lengths_0 () {
		return new byte[] {0, 4, 1, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 3, 4, 1, 4, 4, 0, 0, 4, 4, 4, 3, 4, 1, 4, 4, 4, 4, 4, 4, 3, 4,
			4, 4, 4, 4, 4, 4, 3, 4, 1, 4, 4, 1, 4, 4, 4, 4, 4, 3, 4, 1, 4, 4, 1, 1};
	}

	private static final byte _tableLayout_range_lengths[] = init__tableLayout_range_lengths_0();

	private static short[] init__tableLayout_index_offsets_0 () {
		return new short[] {0, 0, 12, 16, 28, 30, 32, 43, 45, 47, 56, 65, 75, 85, 92, 96, 107, 114, 124, 134, 136, 138, 150, 162,
			169, 173, 186, 195, 207, 219, 225, 237, 249, 256, 260, 273, 284, 295, 306, 318, 330, 337, 341, 354, 363, 375, 387, 396,
			408, 420, 433, 446, 453, 457, 471, 481, 494, 507, 510};
	}

	private static final short _tableLayout_index_offsets[] = init__tableLayout_index_offsets_0();

	private static byte[] init__tableLayout_trans_targs_0 () {
		return new byte[] {2, 4, 29, 7, 19, 3, 36, 2, 49, 49, 49, 0, 2, 3, 2, 0, 3, 4, 29, 7, 19, 6, 36, 3, 49, 49, 49, 0, 6, 5, 6,
			5, 6, 4, 7, 19, 6, 57, 6, 21, 21, 21, 0, 8, 0, 9, 0, 10, 4, 19, 6, 10, 11, 11, 11, 0, 10, 4, 19, 6, 10, 11, 11, 11, 0,
			12, 4, 13, 19, 6, 12, 11, 11, 11, 0, 12, 4, 13, 19, 6, 12, 11, 11, 11, 0, 13, 14, 13, 15, 15, 15, 0, 15, 15, 15, 0, 10,
			16, 4, 17, 19, 6, 10, 15, 15, 15, 0, 10, 4, 17, 19, 6, 10, 0, 10, 4, 17, 19, 6, 10, 18, 18, 18, 0, 10, 4, 17, 19, 6, 10,
			18, 18, 18, 0, 6, 20, 6, 20, 22, 4, 7, 23, 19, 6, 57, 22, 21, 21, 21, 0, 22, 4, 7, 23, 19, 6, 57, 22, 21, 21, 21, 0, 23,
			24, 23, 25, 25, 25, 0, 25, 25, 25, 0, 6, 26, 4, 27, 7, 19, 6, 57, 6, 25, 25, 25, 0, 6, 4, 27, 7, 19, 6, 57, 6, 0, 6, 4,
			27, 7, 19, 6, 57, 6, 28, 28, 28, 0, 6, 4, 27, 7, 19, 6, 57, 6, 28, 28, 28, 0, 29, 29, 30, 30, 30, 0, 31, 4, 7, 32, 19,
			6, 36, 31, 30, 30, 30, 0, 31, 4, 7, 32, 19, 6, 36, 31, 30, 30, 30, 0, 32, 33, 32, 34, 34, 34, 0, 34, 34, 34, 0, 35, 46,
			4, 47, 7, 19, 6, 36, 35, 34, 34, 34, 0, 35, 4, 7, 19, 6, 36, 35, 30, 30, 30, 0, 37, 4, 7, 19, 6, 36, 37, 38, 38, 38, 0,
			37, 4, 7, 19, 6, 36, 37, 38, 38, 38, 0, 39, 4, 7, 40, 19, 6, 36, 39, 38, 38, 38, 0, 39, 4, 7, 40, 19, 6, 36, 39, 38, 38,
			38, 0, 40, 41, 40, 42, 42, 42, 0, 42, 42, 42, 0, 37, 43, 4, 44, 7, 19, 6, 36, 37, 42, 42, 42, 0, 37, 4, 44, 7, 19, 6,
			36, 37, 0, 37, 4, 44, 7, 19, 6, 36, 37, 45, 45, 45, 0, 37, 4, 44, 7, 19, 6, 36, 37, 45, 45, 45, 0, 35, 4, 47, 7, 19, 6,
			36, 35, 0, 35, 4, 47, 7, 19, 6, 36, 35, 48, 48, 48, 0, 35, 4, 47, 7, 19, 6, 36, 35, 48, 48, 48, 0, 50, 4, 29, 7, 51, 19,
			6, 36, 50, 49, 49, 49, 0, 50, 4, 29, 7, 51, 19, 6, 36, 50, 49, 49, 49, 0, 51, 52, 51, 53, 53, 53, 0, 53, 53, 53, 0, 3,
			54, 4, 29, 55, 7, 19, 6, 36, 3, 53, 53, 53, 0, 3, 4, 29, 55, 7, 19, 6, 36, 3, 0, 3, 4, 29, 55, 7, 19, 6, 36, 3, 56, 56,
			56, 0, 3, 4, 29, 55, 7, 19, 6, 36, 3, 56, 56, 56, 0, 58, 58, 0, 58, 58, 0, 0};
	}

	private static final byte _tableLayout_trans_targs[] = init__tableLayout_trans_targs_0();

	private static short[] init__tableLayout_trans_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 25, 1, 13, 0, 0,
			0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 9, 9, 9, 67, 9, 64, 64, 64, 0, 0, 0, 0, 15, 0, 1, 1, 1, 0, 37, 37, 3, 37,
			102, 37, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 52, 0, 52, 5, 52, 122, 52, 0, 0, 0,
			0, 52, 52, 5, 52, 122, 52, 0, 82, 82, 19, 82, 145, 82, 1, 1, 1, 0, 52, 52, 5, 52, 122, 52, 0, 0, 0, 0, 22, 1, 11, 0, 40,
			40, 40, 3, 40, 106, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 55, 0, 55,
			5, 55, 55, 126, 55, 55, 0, 0, 0, 0, 55, 55, 5, 55, 55, 126, 55, 55, 0, 86, 86, 19, 86, 86, 150, 86, 86, 1, 1, 1, 0, 55,
			55, 5, 55, 55, 126, 55, 55, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 31, 31, 31, 3, 31, 94, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
			0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 46, 0, 46, 5, 46, 46, 114, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0,
			1, 1, 1, 0, 7, 7, 7, 7, 61, 7, 7, 58, 58, 58, 0, 0, 0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 34, 34, 34, 3, 34, 98, 34, 34, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 49, 0, 49, 5, 49, 49, 118, 49, 49, 0, 0, 0,
			0, 49, 49, 5, 49, 49, 118, 49, 49, 0, 78, 78, 19, 78, 78, 140, 78, 78, 1, 1, 1, 0, 49, 49, 5, 49, 49, 118, 49, 49, 0, 0,
			0, 0, 46, 46, 5, 46, 46, 114, 46, 46, 0, 74, 74, 19, 74, 74, 135, 74, 74, 1, 1, 1, 0, 46, 46, 5, 46, 46, 114, 46, 46, 0,
			0, 0, 0, 28, 28, 28, 28, 3, 28, 90, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0,
			0, 0, 0, 43, 0, 43, 43, 5, 43, 43, 110, 43, 43, 0, 0, 0, 0, 43, 43, 43, 5, 43, 43, 110, 43, 43, 0, 70, 70, 70, 19, 70,
			70, 130, 70, 70, 1, 1, 1, 0, 43, 43, 43, 5, 43, 43, 110, 43, 43, 0, 0, 0, 0, 17, 17, 0, 0, 0, 0, 0};
	}

	private static final short _tableLayout_trans_actions[] = init__tableLayout_trans_actions_0();

	private static short[] init__tableLayout_eof_actions_0 () {
		return new short[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0};
	}

	private static final short _tableLayout_eof_actions[] = init__tableLayout_eof_actions_0();

	static final int tableLayout_start = 1;
	static final int tableLayout_first_final = 57;
	static final int tableLayout_error = 0;

	static final int tableLayout_en_main = 1;
	static final int tableLayout_en_main_table = 3;

	// line 154 "TableLayoutParser.rl"

	static private void setTableValues (TableLayout table, String name, ArrayList<String> values) {
		try {
			String value;
			if (name.equals("size")) {
				switch (values.size()) {
				case 1:
					value = values.get(0);
					// BOZO - Fix table %.
					if (value.endsWith("%"))
						table.fillX = table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = table.height = Integer.parseInt(values.get(0));
					break;
				case 2:
					value = values.get(0);
					if (value.endsWith("%"))
						table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = Integer.parseInt(values.get(0));
					value = values.get(1);
					if (value.endsWith("%"))
						table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.height = Integer.parseInt(values.get(0));
					break;
				}

			} else if (name.equals("width")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.width = Integer.parseInt(value);

			} else if (name.equals("height")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.height = Integer.parseInt(value);

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) table.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) table.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) table.padLeft = Integer.parseInt(value);
					break;
				case 1:
					table.padTop = table.padLeft = table.padBottom = table.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					table.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					table.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					table.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r"))
					table.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				table.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						table.align |= TableLayout.CENTER;
					else if (value.equals("left"))
						table.align |= TableLayout.LEFT;
					else if (value.equals("right"))
						table.align |= TableLayout.RIGHT;
					else if (value.equals("top"))
						table.align |= TableLayout.TOP;
					else if (value.equals("bottom"))
						table.align |= TableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property: " + name);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static private void setCellValues (Cell c, String name, ArrayList<String> values) {
		try {
			String value;
			if (name.equals("expand")) {
				if (values.size() == 0) c.expandWidth = c.expandHeight = 1;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.expandWidth = 1;
					else if (value.equals("y"))
						c.expandHeight = 1;
					else if (value.equals("false"))
						c.expandWidth = c.expandHeight = 0;
					else {
						switch (i) {
						case 0:
							c.expandWidth = Integer.parseInt(value);
							break;
						case 1:
							c.expandHeight = Integer.parseInt(value);
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("fill")) {
				if (values.size() == 0) c.fillWidth = c.fillHeight = 1f;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.fillWidth = 1f;
					else if (value.equals("y")) //
						c.fillHeight = 1f;
					else {
						switch (i) {
						case 0:
							c.fillWidth = Integer.parseInt(value) / 100f;
							break;
						case 1:
							c.fillHeight = Integer.parseInt(value) / 100f;
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("size")) {
				switch (values.size()) {
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("width")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxWidth = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefWidth = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("height")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxHeight = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefHeight = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("spacing") || name.equals("space")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.spaceRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.spaceBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.spaceTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.spaceLeft = Integer.parseInt(value);
					break;
				case 1:
					c.spaceTop = c.spaceLeft = c.spaceBottom = c.spaceRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.padLeft = Integer.parseInt(value);
					break;
				case 1:
					c.padTop = c.padLeft = c.padBottom = c.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					c.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.startsWith("spacing") || name.startsWith("space")) {
				name = name.replace("spacing", "").replace("space", "");
				if (name.equals("top") || name.equals("t"))
					c.spaceTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.spaceLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.spaceBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.spaceRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				c.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						c.align |= TableLayout.CENTER;
					else if (value.equals("left"))
						c.align |= TableLayout.LEFT;
					else if (value.equals("right"))
						c.align |= TableLayout.RIGHT;
					else if (value.equals("top"))
						c.align |= TableLayout.TOP;
					else if (value.equals("bottom"))
						c.align |= TableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("ignore")) {
				c.ignore = values.size() == 0 ? true : Boolean.valueOf(values.get(0));

			} else if (name.equals("colspan")) {
				c.colspan = Integer.parseInt(values.get(0));

			} else if (name.equals("uniform")) {
				if (values.size() == 0) c.uniformWidth = c.uniformHeight = true;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.uniformWidth = true;
					else if (value.equals("y"))
						c.uniformHeight = true;
					else if (value.equals("false"))
						c.uniformHeight = c.uniformHeight = null;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property.");
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	public static void main (String args[]) {
		TableLayout table = new TableLayout();
		table.set(123, "button");
		table.set(345, "textbox");
		table.parse("" //
			+ "width:400 height:400 " //
			+ "[button]size:80,80 align:left spacing:10 \n " //
			+ "{ width:12 [textbox] fill:x } align:bottom,right fill:xy " //
			+ "[textbox]\nalign:right,bottom \n ");
	}
}
