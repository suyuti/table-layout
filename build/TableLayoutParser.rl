// Do not edit this file! Generated from Ragel.

package com.esotericsoftware.tablelayout;

import java.util.ArrayList;

import com.esotericsoftware.tablelayout.BaseTableLayout.Cell;

class TableLayoutParser {
	static public void parse (BaseTableLayout table, Cell cell, String input) {
		char[] data = (input + " ").toCharArray();
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		String name = null;
		ArrayList<String> values = new ArrayList(4);
		ArrayList<BaseTableLayout> tables = new ArrayList(8);
		Cell rowDefaults = null;

		if (cell != null) {
			// BOZO - Set cell state.
		}

		RuntimeException parseRuntimeEx = null;
		try {
		%%{
			machine tableLayout;

			prepush {
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			}
			
			action buffer { s = p; }
			action name {
				name = new String(data, s, p - s);
				s = p;
			}
			action value {
				values.add(new String(data, s, p - s));
			}
			action tableProperty {
				System.out.println("tableProperty: " + name + " = " + values);
				setTableProperty(table, name, values);
			}
			action cellDefaultProperty {
				System.out.println("cellDefaultProperty: " + name + " = " + values);
				setCellProperty(table.getCellDefaults(), name, values);
			}
			action startColumn {
				table.getColumnDefaults(table.getColumnDefaults().size());
			}
			action columnDefaultProperty {
				System.out.println("columnDefaultProperty: " + name + " = " + values);
				setCellProperty(table.getColumnDefaults(table.getColumnDefaults().size() - 1), name, values);
			}
			action startRow {
				System.out.println("startRow");
				rowDefaults = table.startRow();
			}
			action rowDefaultValue {
				System.out.println("rowDefaultValue: " + name + " = " + values);
				setCellProperty(rowDefaults, name, values);
			}
			action addWidget {
				String className = p > s ? new String(data, s, p - s) : null;
				System.out.println("addWidget: " + name + " " + className);
				Object widget = null;
				if (className == null) {
					if (!name.isEmpty()) {
						widget = table.getWidget(name);
						if (widget == null) throw new IllegalArgumentException("Widget not found with name: " + name);
					}
				} else {
					try {
						widget = Class.forName(className).newInstance();
					} catch (Exception ex) {
						throw new RuntimeException("Error creating instance of class: " + className, ex);
					}
					table.set(name, widget);
				}
				cell = table.add(widget);
			}
			action addLabel {
				System.out.println("addLabel: " + new String(data, s, p - s));
				Object widget = table.newLabel(new String(data, s, p - s));
				cell = table.add(widget);
			}
			action cellProperty {
				System.out.println("cellProperty: " + name + " = " + values);
				setCellProperty(cell, name, values);
			}
			action startTable {
				System.out.println("startTable");
				cell = null;
				BaseTableLayout parentTable = table;
				tables.add(parentTable);
				table = parentTable.newTableLayout();
				table.setAll(parentTable.nameToWidget);
				fcall table;
			}
			action endTable {
				if (!tables.isEmpty()) {
					System.out.println("endTable");
					BaseTableLayout childTable = table;
					table = tables.remove(tables.size() - 1);
					cell = table.add(childTable);
					fret;
				}
			}
			action setTitle {
				System.out.println("setTitle: " + new String(data, s, p - s));
				// BOZO
			}
			action widgetProperty {
				System.out.println("widgetProperty: " + name + " = " + values);
				C
				values.clear();
			}
			action widgetLayoutString {
				System.out.println("widgetLayoutString: " + new String(data, s, p - s));
			}

			property =
				alnum+ >buffer %name (
					space* ':' space* ('-'? alnum+ '%'?) >buffer %value
					(',' alnum* >buffer %value)*
				)?;

			widget = '[' ^[\]:]* >buffer %name (':' ^[\]]+ >buffer)? ']' @addWidget;
			label = '\'' ^'\''* >buffer %addLabel '\'';
			startTable = '{' @startTable;

			title = '<' ^'>'* >buffer %setTitle '>';

			startWidgetProperties = '(' @{ fcall widgetProperties; };
			widgetProperty = alnum+ >buffer %name space* ':' space* alnum+ >buffer %value;
			widgetProperties := space*
				# Widget properties.
				(widgetProperty %widgetProperty (space+ widgetProperty %widgetProperty)* space*)?
				(
					# Widget contents.
					(widget | label | startTable) space*
					# Contents title.
					(title space*)?
					# Contents layout string.
					(
						(alnum+ >buffer %widgetLayoutString) |
						('\'' (^'\''* >buffer %widgetLayoutString) '\'')
					)?
					# Contents properties.
					startWidgetProperties?
				)*
				space* ')' @{ fret; };

			table = space*
				# Table title.
				(title space*)?
				# Table properties.
				(property %tableProperty (space+ property %tableProperty)* space*)?
				# Default cell properties.
				('*' space* property %cellDefaultProperty (space+ property %cellDefaultProperty)* space*)?
				# Default column properties.
				('|' %startColumn space* property %columnDefaultProperty (space+ property %columnDefaultProperty)* space* '|'? space*)*
				(
					# Start row and default row properties.
					('---' %startRow space* (property %rowDefaultValue (space+ property %rowDefaultValue)* )? )?
					(
						# Cell contents.
						space* (widget | label | startTable) space*
						# Contents title.
						(title space*)?
						# Cell properties.
						(property %cellProperty (space+ property %cellProperty)* space*)?
						# Contents properties.
						startWidgetProperties? space*
					)+
				)+
				space* '}' %endTable;
			
			main := 
				(space* '{')? <: table space*
			;

			write init;
			write exec;
		}%%
		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			throw new IllegalArgumentException("Error parsing layout near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (top > 0) 
			throw new IllegalArgumentException("Error parsing layout, missing closing curly brace: " + input, parseRuntimeEx);
	}

	%% write data;

	static public void setTableProperty (BaseTableLayout table, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("size")) {
				switch (values.size()) {
				case 1:
					value = values.get(0);
					// BOZO - Fix table %.
					if (value.endsWith("%"))
						table.fillX = table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = table.height = Integer.parseInt(values.get(0));
					break;
				case 2:
					value = values.get(0);
					if (value.endsWith("%"))
						table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.width = Integer.parseInt(values.get(0));
					value = values.get(1);
					if (value.endsWith("%"))
						table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
					else
						table.height = Integer.parseInt(values.get(0));
					break;
				}

			} else if (name.equals("width")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillX = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.width = Integer.parseInt(value);

			} else if (name.equals("height")) {
				value = values.get(0);
				if (value.endsWith("%"))
					table.fillY = Integer.parseInt(value.substring(0, value.length() - 1)) / 100f;
				else
					table.height = Integer.parseInt(value);

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) table.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) table.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) table.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) table.padLeft = Integer.parseInt(value);
					break;
				case 1:
					table.padTop = table.padLeft = table.padBottom = table.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					table.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					table.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					table.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r"))
					table.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				table.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						table.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						table.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						table.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						table.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						table.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("debug")) {
				if (values.size() == 0) table.debug = "all,";
				for (int i = 0, n = values.size(); i < n; i++)
					table.debug += values.get(i) + ",";

			} else
				throw new IllegalArgumentException("Unknown property: " + name);
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	static public void setCellProperty (Cell c, String name, ArrayList<String> values) {
		name = name.toLowerCase();
		for (int i = 0, n = values.size(); i < n; i++)
			values.set(i, values.get(i).toLowerCase());
		try {
			String value;
			if (name.equals("expand")) {
				if (values.size() == 0) c.expandWidth = c.expandHeight = 1;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.expandWidth = 1;
					else if (value.equals("y"))
						c.expandHeight = 1;
					else if (value.equals("false"))
						c.expandWidth = c.expandHeight = 0;
					else {
						switch (i) {
						case 0:
							c.expandWidth = Integer.parseInt(value);
							break;
						case 1:
							c.expandHeight = Integer.parseInt(value);
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("fill")) {
				if (values.size() == 0) c.fillWidth = c.fillHeight = 1f;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.fillWidth = 1f;
					else if (value.equals("y")) //
						c.fillHeight = 1f;
					else {
						switch (i) {
						case 0:
							c.fillWidth = Integer.parseInt(value) / 100f;
							break;
						case 1:
							c.fillHeight = Integer.parseInt(value) / 100f;
							break;
						default:
							throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
						}
					}
				}

			} else if (name.equals("size")) {
				switch (values.size()) {
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("width")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxWidth = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefWidth = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minWidth = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("height")) {
				switch (values.size()) {
				case 3:
					value = values.get(0);
					if (value.length() > 0) c.maxHeight = Integer.parseInt(value);
				case 2:
					value = values.get(1);
					if (value.length() > 0) c.prefHeight = Integer.parseInt(value);
				case 1:
					value = values.get(0);
					if (value.length() > 0) c.minHeight = Integer.parseInt(value);
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("spacing") || name.equals("space")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.spaceRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.spaceBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.spaceTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.spaceLeft = Integer.parseInt(value);
					break;
				case 1:
					c.spaceTop = c.spaceLeft = c.spaceBottom = c.spaceRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.equals("padding") || name.equals("pad")) {
				switch (values.size()) {
				case 4:
					value = values.get(3);
					if (value.length() > 0) c.padRight = Integer.parseInt(value);
				case 3:
					value = values.get(2);
					if (value.length() > 0) c.padBottom = Integer.parseInt(value);
				case 2:
					value = values.get(0);
					if (value.length() > 0) c.padTop = Integer.parseInt(value);
					value = values.get(1);
					if (value.length() > 0) c.padLeft = Integer.parseInt(value);
					break;
				case 1:
					c.padTop = c.padLeft = c.padBottom = c.padRight = Integer.parseInt(values.get(0));
					break;
				default:
					throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): " + values);
				}

			} else if (name.startsWith("padding") || name.startsWith("pad")) {
				name = name.replace("padding", "").replace("pad", "");
				if (name.equals("top") || name.equals("t"))
					c.padTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.padLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.padBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.padRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.startsWith("spacing") || name.startsWith("space")) {
				name = name.replace("spacing", "").replace("space", "");
				if (name.equals("top") || name.equals("t"))
					c.spaceTop = Integer.parseInt(values.get(0));
				else if (name.equals("left") || name.equals("l"))
					c.spaceLeft = Integer.parseInt(values.get(0));
				else if (name.equals("bottom") || name.equals("b"))
					c.spaceBottom = Integer.parseInt(values.get(0));
				else if (name.equals("right") || name.equals("r")) //
					c.spaceRight = Integer.parseInt(values.get(0));
				else
					throw new IllegalArgumentException("Unknown property.");

			} else if (name.equals("align")) {
				c.align = 0;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("center"))
						c.align |= BaseTableLayout.CENTER;
					else if (value.equals("left"))
						c.align |= BaseTableLayout.LEFT;
					else if (value.equals("right"))
						c.align |= BaseTableLayout.RIGHT;
					else if (value.equals("top"))
						c.align |= BaseTableLayout.TOP;
					else if (value.equals("bottom"))
						c.align |= BaseTableLayout.BOTTOM;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else if (name.equals("ignore")) {
				c.ignore = values.size() == 0 ? true : Boolean.valueOf(values.get(0));

			} else if (name.equals("colspan")) {
				c.colspan = Integer.parseInt(values.get(0));

			} else if (name.equals("uniform")) {
				if (values.size() == 0) c.uniformWidth = c.uniformHeight = true;
				for (int i = 0, n = values.size(); i < n; i++) {
					value = values.get(i);
					if (value.equals("x"))
						c.uniformWidth = true;
					else if (value.equals("y"))
						c.uniformHeight = true;
					else if (value.equals("false"))
						c.uniformHeight = c.uniformHeight = null;
					else
						throw new IllegalArgumentException("Invalid value: " + value);
				}

			} else
				throw new IllegalArgumentException("Unknown property.");
		} catch (Exception ex) {
			throw new IllegalArgumentException("Error setting property: " + name, ex);
		}
		values.clear();
	}

	public static void main (String args[]) {
		BaseTableLayout table = new BaseTableLayout();
		table.set("button", 123);
		table.set("textbox", 345);
		table.set("textbox2", 345);
		table.parse("<Meow>" //
			+ "width:400 height:400 " //
			+ "[button:java.lang.String] <Booyah> size:80,80 align:left spacing:10 ( bean:true [button] 'moo' ) \n " //
			+ "{ [textbox] [textbox] } " //
			+ "[textbox]\nalign:right,bottom \n ");
	}
}
