// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout.swing;

import java.util.HashSet;

public class TableLayoutTokenizer extends RagelTokenMaker {
	static public final int PLAIN = 1;
	static public final int STRUCTURE = 2;
	static public final int SYMBOL = 3;
	static public final int NAME = 4;
	static public final int STRING = 5;
	static public final int BRACKET = 6;
	static public final int PROPERTY = 7;
	static public final int KEYWORD = 8;
	static public final int VALUE = 9;
	static public final int CONSTANT = 10;

	protected void parse (int initialTokenType) {
		%%{
		machine syntax;

		action buffer { s = p; }
		action plain { addToken(PLAIN); }
		action structure { addToken(STRUCTURE); }
		action structureChar { addCharToken(STRUCTURE); }
		action symbol { addToken(SYMBOL); }
		action symbolChar { addCharToken(SYMBOL); }
		action name { addToken(NAME); }
		action bracketChar { addCharToken(BRACKET); }
		action string { addToken(STRING); }
		action stringChar { addCharToken(STRING); }
		action property { addToken(keywords, KEYWORD, PROPERTY); }
		action value {
			addToken(constants, CONSTANT, VALUE);
			try {
				Integer.parseInt(currentToken.getLexeme());
				currentToken.type = CONSTANT;
			} catch (NumberFormatException ignored) {}
		}
		action constant { addToken(CONSTANT); }

		whitespace = space* >buffer %plain;
		string = '\'' @stringChar ^'\''* >buffer %string '\''? @stringChar;
		propertyValue = ('-'? (alnum | '.' | '_')+ '%'?) @0 >buffer %value | string;
		property = (alnum+) >buffer %property whitespace 
			(':' @symbolChar whitespace (propertyValue (',' @symbolChar propertyValue)* )? )?;
		structure = [{}<>]+ >buffer %structure;
		symbol = [.,*|:\-()]+ >buffer %symbol;
		widget = '[' @bracketChar ^[\]:]* >buffer %name <:
			whitespace ':'? @symbolChar whitespace
			# Class name.
			<: (^[\]':{]+ >buffer %plain)?;

		main := (
			widget $1 |
			']' @bracketChar $1 |
			string $1 |
			structure $1 |
			symbol $1 |
			property $1 |
			any+ $0 >buffer %plain
		)**;

		write init;
		write exec;
		}%%
	}
	%% write data;

	private HashSet<String> keywords = new HashSet();
	{
		keywords.add("debug");
		keywords.add("size");
		keywords.add("width");
		keywords.add("height");
		keywords.add("expand");
		keywords.add("fill");
		keywords.add("align");
		keywords.add("colspan");
		keywords.add("uniform");
		keywords.add("padding");
		keywords.add("paddingTop");
		keywords.add("paddingLeft");
		keywords.add("paddingBottom");
		keywords.add("paddingRight");
		keywords.add("spacing");
		keywords.add("spacingTop");
		keywords.add("spacingLeft");
		keywords.add("spacingBottom");
		keywords.add("spacingRight");
		keywords.add("ignore");
		keywords.add("w");
		keywords.add("h");
		keywords.add("pad");
		keywords.add("padTop");
		keywords.add("padLeft");
		keywords.add("padBottom");
		keywords.add("padRight");
		keywords.add("space");
		keywords.add("spaceTop");
		keywords.add("spaceLeft");
		keywords.add("spaceBottom");
		keywords.add("spaceRight");
	}

	private HashSet<String> constants = new HashSet();
	{
		constants.add("x");
		constants.add("y");
		constants.add("top");
		constants.add("bottom");
		constants.add("left");
		constants.add("right");
		constants.add("center");
		constants.add("min");
		constants.add("pref");
		constants.add("max");
		constants.add("cell");
		constants.add("table");
		constants.add("widget");
	}

	public boolean getCurlyBracesDenoteCodeBlocks () {
		return true;
	}
}
