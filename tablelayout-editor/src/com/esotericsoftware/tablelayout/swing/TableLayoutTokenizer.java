
// line 1 "TableLayoutTokenizer.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout.swing;

import java.util.HashSet;

import org.fife.ui.rsyntaxtextarea.Token;

public class TableLayoutTokenizer extends RagelTokenMaker {
	static public final int PLAIN = 1;
	static public final int STRUCTURE = 2;
	static public final int SYMBOL = 3;
	static public final int NAME = 4;
	static public final int STRING = 5;
	static public final int BRACKET = 6;
	static public final int PROPERTY = 7;
	static public final int KEYWORD = 8;
	static public final int VALUE = 9;
	static public final int CONSTANT = 10;
	static public final int WHITESPACE = Token.WHITESPACE;

	protected void parse (int initialTokenType) {
		
// line 3 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
	{
	cs = syntax_start;
	}

// line 7 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _syntax_key_offsets[cs];
	_trans = _syntax_index_offsets[cs];
	_klen = _syntax_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _syntax_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _syntax_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _syntax_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _syntax_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _syntax_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _syntax_indicies[_trans];
	cs = _syntax_trans_targs[_trans];

	if ( _syntax_trans_actions[_trans] != 0 ) {
		_acts = _syntax_trans_actions[_trans];
		_nacts = (int) _syntax_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _syntax_actions[_acts++] )
			{
	case 0:
// line 24 "TableLayoutTokenizer.rl"
	{ s = p; }
	break;
	case 1:
// line 25 "TableLayoutTokenizer.rl"
	{ addToken(PLAIN); }
	break;
	case 2:
// line 26 "TableLayoutTokenizer.rl"
	{ addToken(WHITESPACE); }
	break;
	case 3:
// line 27 "TableLayoutTokenizer.rl"
	{ addToken(STRUCTURE); }
	break;
	case 4:
// line 29 "TableLayoutTokenizer.rl"
	{ addToken(SYMBOL); }
	break;
	case 5:
// line 30 "TableLayoutTokenizer.rl"
	{ addCharToken(SYMBOL); }
	break;
	case 6:
// line 31 "TableLayoutTokenizer.rl"
	{ addToken(NAME); }
	break;
	case 7:
// line 32 "TableLayoutTokenizer.rl"
	{ addCharToken(BRACKET); }
	break;
	case 8:
// line 33 "TableLayoutTokenizer.rl"
	{ addToken(STRING); }
	break;
	case 9:
// line 34 "TableLayoutTokenizer.rl"
	{ addToken(keywords, KEYWORD, PROPERTY); }
	break;
	case 10:
// line 35 "TableLayoutTokenizer.rl"
	{
			addToken(constants, CONSTANT, VALUE);
		}
	break;
	case 11:
// line 38 "TableLayoutTokenizer.rl"
	{ addToken(CONSTANT); }
	break;
// line 137 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _syntax_eof_actions[cs];
	int __nacts = (int) _syntax_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _syntax_actions[__acts++] ) {
	case 0:
// line 24 "TableLayoutTokenizer.rl"
	{ s = p; }
	break;
	case 1:
// line 25 "TableLayoutTokenizer.rl"
	{ addToken(PLAIN); }
	break;
	case 2:
// line 26 "TableLayoutTokenizer.rl"
	{ addToken(WHITESPACE); }
	break;
	case 3:
// line 27 "TableLayoutTokenizer.rl"
	{ addToken(STRUCTURE); }
	break;
	case 4:
// line 29 "TableLayoutTokenizer.rl"
	{ addToken(SYMBOL); }
	break;
	case 6:
// line 31 "TableLayoutTokenizer.rl"
	{ addToken(NAME); }
	break;
	case 8:
// line 33 "TableLayoutTokenizer.rl"
	{ addToken(STRING); }
	break;
	case 9:
// line 34 "TableLayoutTokenizer.rl"
	{ addToken(keywords, KEYWORD, PROPERTY); }
	break;
	case 10:
// line 35 "TableLayoutTokenizer.rl"
	{
			addToken(constants, CONSTANT, VALUE);
		}
	break;
	case 11:
// line 38 "TableLayoutTokenizer.rl"
	{ addToken(CONSTANT); }
	break;
// line 200 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 68 "TableLayoutTokenizer.rl"

	}
	
// line 210 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
private static byte[] init__syntax_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,   11,    2,
	    0,    6,    2,    1,    0,    2,    1,    7,    2,    2,    0,    2,
	    2,    5,    2,    2,    7,    2,    3,    0,    2,    3,    7,    2,
	    4,    0,    2,    4,    7,    2,    6,    5,    2,    6,    7,    2,
	    8,    0,    2,    8,    5,    2,    8,    7,    2,    8,   10,    2,
	    8,   11,    2,    9,    0,    2,    9,    5,    2,    9,    7,    2,
	   10,    0,    2,   10,    5,    2,   10,    7,    2,   10,    8,    2,
	   11,    0,    2,   11,    5,    2,   11,    7,    2,   11,    8,    3,
	    0,    6,    5,    3,    0,    6,    7,    3,    8,   10,    5,    3,
	    8,   11,    5,    3,   10,    8,    5,    3,   11,    8,    5
	};
}

private static final byte _syntax_actions[] = init__syntax_actions_0();


private static short[] init__syntax_key_offsets_0()
{
	return new short [] {
	    0,    0,   11,   14,   36,   58,   80,   81,  103,  125,  147,  169,
	  194,  219,  244,  246,  269,  291,  293,  295,  302,  306,  313,  325,
	  336,  341,  347,  349,  373,  396,  398,  410,  421,  426,  432
	};
}

private static final short _syntax_key_offsets[] = init__syntax_key_offsets_0();


private static char[] init__syntax_trans_keys_0()
{
	return new char [] {
	   37,   39,   45,   46,   95,   48,   57,   65,   90,   97,  122,   46,
	   48,   57,   32,   39,   58,   60,   62,   91,   93,  124,    9,   13,
	   40,   42,   44,   46,   48,   57,   65,   90,   97,  122,  123,  125,
	   32,   39,   58,   60,   62,   91,   93,  124,    9,   13,   40,   42,
	   44,   46,   48,   57,   65,   90,   97,  122,  123,  125,   32,   39,
	   58,   60,   62,   91,   93,  124,    9,   13,   40,   42,   44,   46,
	   48,   57,   65,   90,   97,  122,  123,  125,   39,   32,   39,   58,
	   60,   62,   91,   93,  124,    9,   13,   40,   42,   44,   46,   48,
	   57,   65,   90,   97,  122,  123,  125,   32,   39,   58,   60,   62,
	   91,   93,  124,    9,   13,   40,   42,   44,   46,   48,   57,   65,
	   90,   97,  122,  123,  125,   32,   39,   58,   60,   62,   91,   93,
	  124,    9,   13,   40,   42,   44,   46,   48,   57,   65,   90,   97,
	  122,  123,  125,   32,   39,   58,   60,   62,   91,   93,  124,    9,
	   13,   40,   42,   44,   46,   48,   57,   65,   90,   97,  122,  123,
	  125,   32,   37,   39,   44,   45,   46,   58,   60,   62,   91,   93,
	   95,  124,    9,   13,   40,   42,   48,   57,   65,   90,   97,  122,
	  123,  125,   32,   37,   39,   44,   45,   46,   58,   60,   62,   91,
	   93,   95,  124,    9,   13,   40,   42,   48,   57,   65,   90,   97,
	  122,  123,  125,   32,   37,   39,   44,   45,   46,   58,   60,   62,
	   91,   93,   95,  124,    9,   13,   40,   42,   48,   57,   65,   90,
	   97,  122,  123,  125,   39,   44,   32,   39,   44,   58,   60,   62,
	   91,   93,  124,    9,   13,   40,   42,   45,   46,   48,   57,   65,
	   90,   97,  122,  123,  125,   32,   39,   58,   60,   62,   91,   93,
	  124,    9,   13,   40,   42,   44,   46,   48,   57,   65,   90,   97,
	  122,  123,  125,   58,   93,   58,   93,   32,   39,   58,   93,  123,
	    9,   13,   39,   58,   93,  123,   32,   39,   58,   93,  123,    9,
	   13,   37,   39,   44,   45,   46,   95,   48,   57,   65,   90,   97,
	  122,   37,   39,   44,   46,   95,   48,   57,   65,   90,   97,  122,
	   39,   44,   46,   48,   57,   37,   39,   44,   46,   48,   57,   39,
	   44,   32,   37,   39,   44,   45,   46,   58,   60,   62,   91,   93,
	  124,    9,   13,   40,   42,   48,   57,   65,   90,   97,  122,  123,
	  125,   32,   39,   44,   58,   60,   62,   91,   93,  124,    9,   13,
	   40,   42,   45,   46,   48,   57,   65,   90,   97,  122,  123,  125,
	   39,   44,   37,   39,   44,   45,   46,   95,   48,   57,   65,   90,
	   97,  122,   37,   39,   44,   46,   95,   48,   57,   65,   90,   97,
	  122,   39,   44,   46,   48,   57,   37,   39,   44,   46,   48,   57,
	   39,   44,    0
	};
}

private static final char _syntax_trans_keys[] = init__syntax_trans_keys_0();


private static byte[] init__syntax_single_lengths_0()
{
	return new byte [] {
	    0,    5,    1,    8,    8,    8,    1,    8,    8,    8,    8,   13,
	   13,   13,    2,    9,    8,    2,    2,    5,    4,    5,    6,    5,
	    3,    4,    2,   12,    9,    2,    6,    5,    3,    4,    2
	};
}

private static final byte _syntax_single_lengths[] = init__syntax_single_lengths_0();


private static byte[] init__syntax_range_lengths_0()
{
	return new byte [] {
	    0,    3,    1,    7,    7,    7,    0,    7,    7,    7,    7,    6,
	    6,    6,    0,    7,    7,    0,    0,    1,    0,    1,    3,    3,
	    1,    1,    0,    6,    7,    0,    3,    3,    1,    1,    0
	};
}

private static final byte _syntax_range_lengths[] = init__syntax_range_lengths_0();


private static short[] init__syntax_index_offsets_0()
{
	return new short [] {
	    0,    0,    9,   12,   28,   44,   60,   62,   78,   94,  110,  126,
	  146,  166,  186,  189,  206,  222,  225,  228,  235,  240,  247,  257,
	  266,  271,  277,  280,  299,  316,  319,  329,  338,  343,  349
	};
}

private static final short _syntax_index_offsets[] = init__syntax_index_offsets_0();


private static byte[] init__syntax_indicies_0()
{
	return new byte [] {
	    0,    2,    3,    4,    0,    4,    0,    0,    1,    5,    5,    1,
	    7,    8,    9,   11,   11,   12,   13,    9,    7,    9,    9,   10,
	   10,   10,   11,    6,   15,   16,   17,   19,   19,   20,   21,   17,
	   15,   17,   17,   18,   18,   18,   19,   14,   23,   24,   25,   27,
	   27,   28,   29,   25,   23,   25,   25,   26,   26,   26,   27,   22,
	   31,   30,   33,   34,   35,   37,   37,   38,   39,   35,   33,   35,
	   35,   36,   36,   36,   37,   32,   41,   42,   43,   45,   45,   46,
	   47,   43,   41,   43,   43,   44,   44,   44,   45,   40,   49,   50,
	   53,   54,   54,   55,   56,   51,   49,   51,   51,   52,   52,   52,
	   54,   48,   57,   24,   58,   27,   27,   28,   29,   25,   57,   25,
	   25,   26,   26,   26,   27,   22,   59,    0,   60,    9,    3,    4,
	    9,   11,   11,   12,   13,    0,    9,   59,    9,    4,    0,    0,
	   11,    6,   61,   62,   63,   25,   64,   65,   25,   27,   27,   28,
	   29,   62,   25,   61,   25,   65,   62,   62,   27,   22,   67,   68,
	   69,   71,   70,   68,   70,   72,   72,   73,   74,   68,   70,   67,
	   70,   68,   68,   68,   72,   66,   76,   77,   75,   33,   34,   78,
	   35,   37,   37,   38,   39,   35,   33,   35,   35,   36,   36,   36,
	   37,   32,   80,   81,   82,   84,   84,   85,   86,   82,   80,   82,
	   82,   83,   83,   83,   84,   79,   88,   89,   87,   91,   92,   90,
	   94,    8,    9,   13,   11,   94,   93,   16,   17,   21,   19,   95,
	   97,   24,   25,   29,   27,   97,   96,   98,    2,   77,   99,  100,
	   98,  100,   98,   98,   75,  101,   76,  102,  101,  101,  101,  101,
	  101,   75,   76,   77,  103,  103,   75,  104,   76,  105,  103,  103,
	   75,   76,  105,   75,  107,  108,  109,  111,  110,    5,  110,  112,
	  112,  114,  115,  110,  107,  110,    5,  113,  113,  112,  106,  107,
	  109,  111,  110,  112,  112,  114,  115,  110,  107,  110,  110,  113,
	  113,  113,  112,  106,   76,  117,  116,  118,    2,  117,  119,  120,
	  118,  120,  118,  118,  116,  121,   76,  122,  121,  121,  121,  121,
	  121,  116,   76,  117,  123,  123,  116,  124,   76,  125,  123,  123,
	  116,   76,  125,  116,    0
	};
}

private static final byte _syntax_indicies[] = init__syntax_indicies_0();


private static byte[] init__syntax_trans_targs_0()
{
	return new byte [] {
	   13,    0,   14,    2,   27,   27,    4,    5,    6,    8,    9,   16,
	   17,    3,    4,    5,    6,    8,    9,   16,   17,    3,    4,    5,
	    6,    8,    9,   16,   17,    3,    6,    7,    4,    5,    6,    8,
	    9,   16,   17,    3,    4,    5,    6,    8,    9,   16,   17,    3,
	    4,   10,    6,    8,    9,   11,   16,   17,    3,   10,   11,   12,
	   29,   12,   13,   29,    2,   27,    4,    5,   13,    6,    8,    1,
	   16,   17,    3,   14,   15,   22,    1,    4,    5,    6,    8,    9,
	   16,   17,    3,   18,   19,    3,   18,   19,    3,   20,   21,   20,
	   20,   21,   23,   24,   25,   23,   22,   25,   26,   22,    4,    5,
	   28,    6,    8,    1,   16,    9,   17,    3,   29,   30,   31,   32,
	   33,   31,   30,   33,   34,   30
	};
}

private static final byte _syntax_trans_targs[] = init__syntax_trans_targs_0();


private static byte[] init__syntax_trans_actions_0()
{
	return new byte [] {
	    1,    0,    1,    1,    1,    0,    1,    1,    1,    1,    1,    1,
	   13,   13,    0,   26,   26,   26,   26,   26,   29,   29,   32,    0,
	   32,   32,   32,   32,   38,   38,    0,    0,   59,   59,   59,   59,
	   59,   59,   65,   65,   47,   47,   47,    0,   47,   47,   50,   50,
	   74,   74,   74,   74,    0,   77,   74,   80,   80,    0,   35,    1,
	    1,    0,   32,   32,   32,   32,   83,   83,    0,   83,   83,   86,
	   83,   89,   89,    0,    0,   62,   62,   41,   41,   41,   41,   41,
	    0,   44,   44,    1,  107,  111,    0,   53,   56,    1,    1,    0,
	   32,    0,    1,    1,    1,    0,  123,    0,    0,  127,   95,   95,
	    0,   95,   95,   98,   95,   95,  101,  101,    0,   62,    1,    1,
	    1,    0,  115,    0,    0,  119
	};
}

private static final byte _syntax_trans_actions[] = init__syntax_trans_actions_0();


private static byte[] init__syntax_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    3,    5,   15,   15,    9,   17,    5,    0,
	    5,   19,   15,   15,    7,   23,   11,    0,    3,    5,   15,   92,
	   15,  104,  104,   21,   21,   15,   15,   68,   15,   71,   71
	};
}

private static final byte _syntax_eof_actions[] = init__syntax_eof_actions_0();


static final int syntax_start = 3;
static final int syntax_first_final = 3;
static final int syntax_error = 0;

static final int syntax_en_main = 3;


// line 71 "TableLayoutTokenizer.rl"

	private HashSet<String> keywords = new HashSet();
	{
		keywords.add("debug");
		keywords.add("size");
		keywords.add("width");
		keywords.add("height");
		keywords.add("expand");
		keywords.add("fill");
		keywords.add("align");
		keywords.add("colspan");
		keywords.add("uniform");
		keywords.add("padding");
		keywords.add("paddingTop");
		keywords.add("paddingLeft");
		keywords.add("paddingBottom");
		keywords.add("paddingRight");
		keywords.add("spacing");
		keywords.add("spacingTop");
		keywords.add("spacingLeft");
		keywords.add("spacingBottom");
		keywords.add("spacingRight");
		keywords.add("ignore");
		keywords.add("w");
		keywords.add("h");
		keywords.add("pad");
		keywords.add("padTop");
		keywords.add("padLeft");
		keywords.add("padBottom");
		keywords.add("padRight");
		keywords.add("space");
		keywords.add("spaceTop");
		keywords.add("spaceLeft");
		keywords.add("spaceBottom");
		keywords.add("spaceRight");
	}

	private HashSet<String> constants = new HashSet();
	{
		constants.add("x");
		constants.add("y");
		constants.add("top");
		constants.add("bottom");
		constants.add("left");
		constants.add("right");
		constants.add("center");
		constants.add("min");
		constants.add("pref");
		constants.add("max");
		constants.add("cell");
		constants.add("table");
		constants.add("widget");
	}

	public boolean getCurlyBracesDenoteCodeBlocks () {
		return true;
	}
}
