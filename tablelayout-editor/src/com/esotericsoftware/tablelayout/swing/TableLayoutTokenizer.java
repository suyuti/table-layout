// line 1 "TableLayoutTokenizer.rl"
// Do not edit this file! Generated by Ragel.

package com.esotericsoftware.tablelayout.swing;

import java.util.HashSet;

public class TableLayoutTokenizer extends RagelTokenMaker {
	static public final int PLAIN = 1;
	static public final int STRUCTURE = 2;
	static public final int SYMBOL = 3;
	static public final int NAME = 4;
	static public final int STRING = 5;
	static public final int BRACKET = 6;
	static public final int PROPERTY = 7;
	static public final int KEYWORD = 8;
	static public final int VALUE = 9;
	static public final int CONSTANT = 10;

	protected void parse (int initialTokenType) {

		// line 3 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
		{
			cs = syntax_start;
		}

		// line 7 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
		{
			int _klen;
			int _trans = 0;
			int _acts;
			int _nacts;
			int _keys;
			int _goto_targ = 0;

			_goto:
			while (true) {
				switch (_goto_targ) {
				case 0:
					if (p == pe) {
						_goto_targ = 4;
						continue _goto;
					}
					if (cs == 0) {
						_goto_targ = 5;
						continue _goto;
					}
				case 1:
					_match:
					do {
						_keys = _syntax_key_offsets[cs];
						_trans = _syntax_index_offsets[cs];
						_klen = _syntax_single_lengths[cs];
						if (_klen > 0) {
							int _lower = _keys;
							int _mid;
							int _upper = _keys + _klen - 1;
							while (true) {
								if (_upper < _lower) break;

								_mid = _lower + ((_upper - _lower) >> 1);
								if (data[p] < _syntax_trans_keys[_mid])
									_upper = _mid - 1;
								else if (data[p] > _syntax_trans_keys[_mid])
									_lower = _mid + 1;
								else {
									_trans += (_mid - _keys);
									break _match;
								}
							}
							_keys += _klen;
							_trans += _klen;
						}

						_klen = _syntax_range_lengths[cs];
						if (_klen > 0) {
							int _lower = _keys;
							int _mid;
							int _upper = _keys + (_klen << 1) - 2;
							while (true) {
								if (_upper < _lower) break;

								_mid = _lower + (((_upper - _lower) >> 1) & ~1);
								if (data[p] < _syntax_trans_keys[_mid])
									_upper = _mid - 2;
								else if (data[p] > _syntax_trans_keys[_mid + 1])
									_lower = _mid + 2;
								else {
									_trans += ((_mid - _keys) >> 1);
									break _match;
								}
							}
							_trans += _klen;
						}
					} while (false);

					_trans = _syntax_indicies[_trans];
					cs = _syntax_trans_targs[_trans];

					if (_syntax_trans_actions[_trans] != 0) {
						_acts = _syntax_trans_actions[_trans];
						_nacts = (int)_syntax_actions[_acts++];
						while (_nacts-- > 0) {
							switch (_syntax_actions[_acts++]) {
							case 0:
								// line 23 "TableLayoutTokenizer.rl"
							{
								s = p;
							}
								break;
							case 1:
								// line 24 "TableLayoutTokenizer.rl"
							{
								addToken(PLAIN);
							}
								break;
							case 2:
								// line 25 "TableLayoutTokenizer.rl"
							{
								addToken(STRUCTURE);
							}
								break;
							case 3:
								// line 27 "TableLayoutTokenizer.rl"
							{
								addToken(SYMBOL);
							}
								break;
							case 4:
								// line 28 "TableLayoutTokenizer.rl"
							{
								addCharToken(SYMBOL);
							}
								break;
							case 5:
								// line 29 "TableLayoutTokenizer.rl"
							{
								addToken(NAME);
							}
								break;
							case 6:
								// line 30 "TableLayoutTokenizer.rl"
							{
								addCharToken(BRACKET);
							}
								break;
							case 7:
								// line 31 "TableLayoutTokenizer.rl"
							{
								addToken(STRING);
							}
								break;
							case 8:
								// line 32 "TableLayoutTokenizer.rl"
							{
								addToken(keywords, KEYWORD, PROPERTY);
							}
								break;
							case 9:
								// line 33 "TableLayoutTokenizer.rl"
							{
								addToken(constants, CONSTANT, VALUE);
							}
								break;
							case 10:
								// line 36 "TableLayoutTokenizer.rl"
							{
								addToken(CONSTANT);
							}
								break;
							// line 133 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
							}
						}
					}

				case 2:
					if (cs == 0) {
						_goto_targ = 5;
						continue _goto;
					}
					if (++p != pe) {
						_goto_targ = 1;
						continue _goto;
					}
				case 4:
					if (p == eof) {
						int __acts = _syntax_eof_actions[cs];
						int __nacts = (int)_syntax_actions[__acts++];
						while (__nacts-- > 0) {
							switch (_syntax_actions[__acts++]) {
							case 0:
								// line 23 "TableLayoutTokenizer.rl"
							{
								s = p;
							}
								break;
							case 1:
								// line 24 "TableLayoutTokenizer.rl"
							{
								addToken(PLAIN);
							}
								break;
							case 2:
								// line 25 "TableLayoutTokenizer.rl"
							{
								addToken(STRUCTURE);
							}
								break;
							case 3:
								// line 27 "TableLayoutTokenizer.rl"
							{
								addToken(SYMBOL);
							}
								break;
							case 5:
								// line 29 "TableLayoutTokenizer.rl"
							{
								addToken(NAME);
							}
								break;
							case 7:
								// line 31 "TableLayoutTokenizer.rl"
							{
								addToken(STRING);
							}
								break;
							case 8:
								// line 32 "TableLayoutTokenizer.rl"
							{
								addToken(keywords, KEYWORD, PROPERTY);
							}
								break;
							case 9:
								// line 33 "TableLayoutTokenizer.rl"
							{
								addToken(constants, CONSTANT, VALUE);
							}
								break;
							case 10:
								// line 36 "TableLayoutTokenizer.rl"
							{
								addToken(CONSTANT);
							}
								break;
							// line 192 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
							}
						}
					}

				case 5:
				}
				break;
			}
		}

		// line 65 "TableLayoutTokenizer.rl"

	}

	// line 202 "../src/com/esotericsoftware/tablelayout/swing/TableLayoutTokenizer.java"
	private static byte[] init__syntax_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 6, 1, 7, 1, 9, 1, 10, 2, 0, 1, 2, 1, 0, 2, 1, 4, 2, 1, 6, 2, 2, 0, 2, 2,
			6, 2, 3, 0, 2, 3, 6, 2, 7, 0, 2, 7, 4, 2, 7, 6, 2, 7, 9, 2, 7, 10, 2, 8, 0, 2, 9, 0, 2, 9, 4, 2, 9, 6, 2, 9, 7, 2, 10,
			0, 2, 10, 4, 2, 10, 6, 2, 10, 7, 3, 0, 1, 6, 3, 0, 5, 1, 3, 5, 0, 1, 3, 7, 9, 4, 3, 7, 10, 4, 3, 8, 0, 1, 3, 9, 7, 4, 3,
			10, 7, 4, 4, 0, 5, 1, 4, 4, 0, 5, 1, 6, 4, 5, 0, 1, 4, 4, 5, 0, 1, 6, 4, 8, 0, 1, 4, 4, 8, 0, 1, 6};
	}

	private static final byte _syntax_actions[] = init__syntax_actions_0();

	private static short[] init__syntax_key_offsets_0 () {
		return new short[] {0, 0, 11, 14, 33, 52, 53, 72, 91, 113, 135, 160, 185, 207, 209, 229, 248, 250, 252, 259, 263, 270, 282,
			294, 299, 305, 307, 328, 348, 350, 362, 374, 379, 385};
	}

	private static final short _syntax_key_offsets[] = init__syntax_key_offsets_0();

	private static char[] init__syntax_trans_keys_0 () {
		return new char[] {37, 39, 45, 46, 95, 48, 57, 65, 90, 97, 122, 46, 48, 57, 39, 58, 60, 62, 91, 93, 124, 40, 42, 44, 46,
			48, 57, 65, 90, 97, 122, 123, 125, 39, 58, 60, 62, 91, 93, 124, 40, 42, 44, 46, 48, 57, 65, 90, 97, 122, 123, 125, 39,
			39, 58, 60, 62, 91, 93, 124, 40, 42, 44, 46, 48, 57, 65, 90, 97, 122, 123, 125, 39, 58, 60, 62, 91, 93, 124, 40, 42, 44,
			46, 48, 57, 65, 90, 97, 122, 123, 125, 32, 39, 58, 60, 62, 91, 93, 124, 9, 13, 40, 42, 44, 46, 48, 57, 65, 90, 97, 122,
			123, 125, 32, 39, 58, 60, 62, 91, 93, 124, 9, 13, 40, 42, 44, 46, 48, 57, 65, 90, 97, 122, 123, 125, 32, 37, 39, 44, 45,
			46, 58, 60, 62, 91, 93, 95, 124, 9, 13, 40, 42, 48, 57, 65, 90, 97, 122, 123, 125, 32, 37, 39, 44, 45, 46, 58, 60, 62,
			91, 93, 95, 124, 9, 13, 40, 42, 48, 57, 65, 90, 97, 122, 123, 125, 37, 39, 44, 58, 60, 62, 91, 93, 95, 124, 40, 42, 45,
			46, 48, 57, 65, 90, 97, 122, 123, 125, 39, 44, 39, 44, 58, 60, 62, 91, 93, 124, 40, 42, 45, 46, 48, 57, 65, 90, 97, 122,
			123, 125, 39, 58, 60, 62, 91, 93, 124, 40, 42, 44, 46, 48, 57, 65, 90, 97, 122, 123, 125, 58, 93, 58, 93, 32, 39, 58,
			93, 123, 9, 13, 39, 58, 93, 123, 32, 39, 58, 93, 123, 9, 13, 37, 39, 44, 45, 46, 95, 48, 57, 65, 90, 97, 122, 37, 39,
			44, 95, 45, 46, 48, 57, 65, 90, 97, 122, 39, 44, 46, 48, 57, 37, 39, 44, 46, 48, 57, 39, 44, 37, 39, 44, 45, 46, 58, 60,
			62, 91, 93, 124, 40, 42, 48, 57, 65, 90, 97, 122, 123, 125, 39, 44, 58, 60, 62, 91, 93, 124, 40, 42, 45, 46, 48, 57, 65,
			90, 97, 122, 123, 125, 39, 44, 37, 39, 44, 45, 46, 95, 48, 57, 65, 90, 97, 122, 37, 39, 44, 95, 45, 46, 48, 57, 65, 90,
			97, 122, 39, 44, 46, 48, 57, 37, 39, 44, 46, 48, 57, 39, 44, 0};
	}

	private static final char _syntax_trans_keys[] = init__syntax_trans_keys_0();

	private static byte[] init__syntax_single_lengths_0 () {
		return new byte[] {0, 5, 1, 7, 7, 1, 7, 7, 8, 8, 13, 13, 10, 2, 8, 7, 2, 2, 5, 4, 5, 6, 4, 3, 4, 2, 11, 8, 2, 6, 4, 3, 4, 2};
	}

	private static final byte _syntax_single_lengths[] = init__syntax_single_lengths_0();

	private static byte[] init__syntax_range_lengths_0 () {
		return new byte[] {0, 3, 1, 6, 6, 0, 6, 6, 7, 7, 6, 6, 6, 0, 6, 6, 0, 0, 1, 0, 1, 3, 4, 1, 1, 0, 5, 6, 0, 3, 4, 1, 1, 0};
	}

	private static final byte _syntax_range_lengths[] = init__syntax_range_lengths_0();

	private static short[] init__syntax_index_offsets_0 () {
		return new short[] {0, 0, 9, 12, 26, 40, 42, 56, 70, 86, 102, 122, 142, 159, 162, 177, 191, 194, 197, 204, 209, 216, 226,
			235, 240, 246, 249, 266, 281, 284, 294, 303, 308, 314};
	}

	private static final short _syntax_index_offsets[] = init__syntax_index_offsets_0();

	private static byte[] init__syntax_indicies_0 () {
		return new byte[] {0, 2, 3, 4, 0, 4, 0, 0, 1, 5, 5, 1, 7, 8, 10, 10, 11, 12, 8, 8, 8, 9, 9, 9, 10, 6, 14, 15, 17, 17, 18,
			19, 15, 15, 15, 16, 16, 16, 17, 13, 21, 20, 23, 24, 26, 26, 27, 28, 24, 24, 24, 25, 25, 25, 26, 22, 30, 31, 33, 33, 34,
			35, 31, 31, 31, 32, 32, 32, 33, 29, 37, 38, 41, 42, 42, 43, 44, 39, 37, 39, 39, 40, 40, 40, 42, 36, 46, 14, 47, 17, 17,
			18, 19, 15, 46, 15, 15, 16, 16, 16, 17, 45, 49, 50, 51, 52, 53, 54, 52, 55, 55, 56, 57, 50, 52, 49, 52, 54, 50, 50, 55,
			48, 58, 59, 60, 15, 61, 62, 15, 17, 17, 18, 19, 59, 15, 58, 15, 62, 59, 59, 17, 45, 64, 65, 67, 66, 68, 68, 69, 70, 64,
			66, 66, 64, 64, 64, 64, 68, 63, 72, 73, 71, 23, 74, 24, 26, 26, 27, 28, 24, 24, 24, 25, 25, 25, 26, 22, 76, 77, 79, 79,
			80, 81, 77, 77, 77, 78, 78, 78, 79, 75, 83, 84, 82, 86, 87, 85, 89, 90, 52, 57, 55, 89, 88, 14, 15, 19, 17, 91, 93, 14,
			15, 19, 17, 93, 92, 94, 2, 73, 95, 96, 94, 96, 94, 94, 71, 97, 72, 98, 97, 97, 97, 97, 97, 71, 72, 73, 99, 99, 71, 100,
			72, 101, 99, 99, 71, 72, 101, 71, 103, 104, 106, 105, 5, 105, 107, 107, 109, 110, 105, 105, 5, 108, 108, 107, 102, 104,
			106, 105, 107, 107, 109, 110, 105, 105, 105, 108, 108, 108, 107, 102, 72, 112, 111, 113, 2, 112, 114, 115, 113, 115,
			113, 113, 111, 116, 72, 117, 116, 116, 116, 116, 116, 111, 72, 112, 118, 118, 111, 119, 72, 120, 118, 118, 111, 72, 120,
			111, 0};
	}

	private static final byte _syntax_indicies[] = init__syntax_indicies_0();

	private static byte[] init__syntax_trans_targs_0 () {
		return new byte[] {12, 0, 13, 2, 26, 26, 4, 5, 7, 8, 15, 16, 3, 4, 5, 7, 8, 15, 16, 3, 5, 6, 4, 5, 7, 8, 15, 16, 3, 4, 5,
			7, 8, 15, 16, 3, 4, 9, 5, 7, 8, 10, 15, 16, 3, 4, 9, 10, 4, 11, 12, 28, 7, 2, 26, 15, 16, 3, 11, 12, 28, 2, 26, 4, 12,
			5, 7, 1, 15, 16, 3, 13, 14, 21, 1, 4, 5, 7, 8, 15, 16, 3, 17, 18, 3, 17, 18, 3, 19, 20, 5, 19, 19, 20, 22, 23, 24, 22,
			21, 24, 25, 21, 4, 27, 5, 7, 1, 15, 8, 16, 3, 28, 29, 30, 31, 32, 30, 29, 32, 33, 29};
	}

	private static final byte _syntax_trans_targs[] = init__syntax_trans_targs_0();

	private static short[] init__syntax_trans_actions_0 () {
		return new short[] {1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 9, 9, 0, 20, 20, 20, 20, 26, 26, 0, 0, 41, 41, 41, 41, 41, 47, 47, 35,
			35, 0, 35, 35, 38, 38, 103, 56, 103, 103, 0, 135, 103, 140, 140, 20, 0, 23, 17, 1, 17, 17, 17, 17, 17, 17, 83, 83, 0,
			20, 20, 20, 20, 59, 0, 59, 59, 62, 59, 65, 65, 0, 0, 44, 44, 29, 29, 29, 29, 0, 32, 32, 1, 115, 120, 0, 125, 130, 17, 1,
			17, 0, 20, 0, 1, 1, 1, 0, 107, 0, 0, 111, 71, 0, 71, 71, 74, 71, 71, 77, 77, 0, 44, 1, 1, 1, 0, 95, 0, 0, 99};
	}

	private static final short _syntax_trans_actions[] = init__syntax_trans_actions_0();

	private static short[] init__syntax_eof_actions_0 () {
		return new short[] {0, 0, 0, 0, 3, 11, 11, 7, 103, 3, 17, 3, 13, 11, 11, 5, 87, 91, 17, 3, 3, 11, 68, 11, 80, 80, 15, 15,
			11, 11, 50, 11, 53, 53};
	}

	private static final short _syntax_eof_actions[] = init__syntax_eof_actions_0();

	static final int syntax_start = 3;
	static final int syntax_first_final = 3;
	static final int syntax_error = 0;

	static final int syntax_en_main = 3;

	// line 68 "TableLayoutTokenizer.rl"

	private HashSet<String> keywords = new HashSet();
	{
		keywords.add("debug");
		keywords.add("size");
		keywords.add("width");
		keywords.add("height");
		keywords.add("expand");
		keywords.add("fill");
		keywords.add("align");
		keywords.add("colspan");
		keywords.add("uniform");
		keywords.add("padding");
		keywords.add("paddingTop");
		keywords.add("paddingLeft");
		keywords.add("paddingBottom");
		keywords.add("paddingRight");
		keywords.add("spacing");
		keywords.add("spacingTop");
		keywords.add("spacingLeft");
		keywords.add("spacingBottom");
		keywords.add("spacingRight");
		keywords.add("ignore");
		keywords.add("w");
		keywords.add("h");
		keywords.add("pad");
		keywords.add("padTop");
		keywords.add("padLeft");
		keywords.add("padBottom");
		keywords.add("padRight");
		keywords.add("space");
		keywords.add("spaceTop");
		keywords.add("spaceLeft");
		keywords.add("spaceBottom");
		keywords.add("spaceRight");
	}

	private HashSet<String> constants = new HashSet();
	{
		constants.add("x");
		constants.add("y");
		constants.add("top");
		constants.add("bottom");
		constants.add("left");
		constants.add("right");
		constants.add("center");
		constants.add("min");
		constants.add("pref");
		constants.add("max");
		constants.add("cell");
		constants.add("table");
		constants.add("widget");
	}

	public boolean getCurlyBracesDenoteCodeBlocks () {
		return true;
	}
}
